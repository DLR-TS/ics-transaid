# Tests acosta scenario with protocolspeed app, same as for traffic monitor
protocolspeedApp_acosta_infolog

# Tests acosta scenario with protocolspeed app, same as for traffic monitor
protocolspeedApp_acosta

# Tests testApp execution without giving a test case. (Subscribes to speed and set max speed, kept as legacy test, may be removed if proper test for speed retrieval/setting exists)
testApp_test_case_unknown

# Tests testApp execution with test case simpleExecute
testApp_simpleExecute

# Tests iCSInterface::getSUMOStepLength()
testApp_getSUMOStepLength

# Runs testApp test case "setVType"
testApp_setSUMOVType

# Runs testApp test case "inductionLoop"
# This subscribes to number of vehicles on the inductionLoop in every execution step  (could be done as persistent subscription) and if there is a vehicle, it reports more info.
# It also tests retrieving traci responses from the global map in the Behaviour base class (see output on stdout).
testApp_inductionLoop

# Tests communication behaviour with test case commSimple:
# RSU broadcasts from 0 to 10000 and vehicle starts broadcasting at 8000 until its scheduled abort signal arrives at 12000.
# As the vehicle is inserted at 5000, it receives the stations broadcast until 8000, where it begins to broadcast itself. From 8000 to 10000 no messages are received as both stations are sending simultaneously. From 10000 to 12000, the silent RSU receives the messages from the vehicle.
testApp_commSimple

# Tests communication behaviour with test case commSimple2:
# RSU broadcasts from 0 to 10000 and vehicle responds until an acknowledgement of the RSU arrives.
# The vehicle affirms the acknowledgement, upon which the RSU sends a stop advice. On its reception a stop is added via traci.
# The test uses randomized response offsets to avoid synchronized message transmission.
testApp_commSimple2
testApp_CAMsimple
testApp_mobility
testApp_trajectory
testApp_ToC

# Tests iCSInterface::openGap
testApp_openGap

# Tests iCSInterface::getDrivingDistance
testApp_getDrivingDistance
