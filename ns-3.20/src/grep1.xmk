click/test/ipv4-click-routing-test.cc:  internet.Install (node);
click/examples/nsclick-udp-client-server-csma.cc:  NetDeviceContainer d = csma.Install (n);
click/examples/nsclick-udp-client-server-csma.cc:// Install Click on the nodes
click/examples/nsclick-udp-client-server-csma.cc:  clickinternet.Install (n);
click/examples/nsclick-udp-client-server-csma.cc:  ApplicationContainer apps = server.Install (n.Get (1));
click/examples/nsclick-udp-client-server-csma.cc:  apps = client.Install (NodeContainer (n.Get (0), n.Get (2)));
click/examples/nsclick-raw-wlan.cc:  NetDeviceContainer wifiDevices = wifi.Install (wifiPhy, wifiMac, wifiNodes);
click/examples/nsclick-raw-wlan.cc:  mobility.Install (wifiNodes);
click/examples/nsclick-raw-wlan.cc:  // Install normal internet stack on node B
click/examples/nsclick-raw-wlan.cc:  internet.Install (wifiNodes.Get (1));
click/examples/nsclick-raw-wlan.cc:  // Install Click on node A
click/examples/nsclick-raw-wlan.cc:  clickinternet.Install (wifiNodes.Get (0));
click/examples/nsclick-raw-wlan.cc:  ApplicationContainer recvapp = packetSinkHelper.Install (wifiNodes.Get (1));
click/examples/nsclick-raw-wlan.cc:  appcont.Add (onOffHelper.Install (wifiNodes.Get (0)));
click/examples/nsclick-udp-client-server-wifi.cc:  NetDeviceContainer d = wifi.Install (wifiPhy, wifiMac, n);
click/examples/nsclick-udp-client-server-wifi.cc:  mobility.Install (n);
click/examples/nsclick-udp-client-server-wifi.cc:  // Install Click on the nodes
click/examples/nsclick-udp-client-server-wifi.cc:  clickinternet.Install (n);
click/examples/nsclick-udp-client-server-wifi.cc:  ApplicationContainer apps = server.Install (n.Get (1));
click/examples/nsclick-udp-client-server-wifi.cc:  apps = client.Install (NodeContainer (n.Get (0), n.Get (2)));
click/examples/nsclick-routing.cc:// Install Click on the nodes
click/examples/nsclick-routing.cc:  clickinternet.Install (n);
click/examples/nsclick-routing.cc:  NetDeviceContainer d01 = csma.Install (NodeContainer (n.Get (0), n.Get (1)));
click/examples/nsclick-routing.cc:  NetDeviceContainer d12 = csma.Install (NodeContainer (n.Get (1), n.Get (2)));
click/examples/nsclick-routing.cc:  ApplicationContainer apps = server.Install (n.Get (2));
click/examples/nsclick-routing.cc:  apps = client.Install (NodeContainer (n.Get (0)));
click/examples/nsclick-defines.cc:// Install Click on the nodes
click/examples/nsclick-defines.cc:  clickinternet.Install (n);
click/examples/nsclick-simple-lan.cc:  NetDeviceContainer csmaDevices = csma.Install (csmaNodes);
click/examples/nsclick-simple-lan.cc:  // Install normal internet stack on node B
click/examples/nsclick-simple-lan.cc:  internet.Install (csmaNodes.Get (1));
click/examples/nsclick-simple-lan.cc:  // Install Click on node A
click/examples/nsclick-simple-lan.cc:  clickinternet.Install (csmaNodes.Get (0));
click/examples/nsclick-simple-lan.cc:  ApplicationContainer recvapp = packetSinkHelper.Install (csmaNodes.Get (1));
click/examples/nsclick-simple-lan.cc:  appcont.Add (onOffHelper.Install (csmaNodes.Get (0)));
click/helper/click-internet-stack-helper.h:  void Install (std::string nodeName) const;
click/helper/click-internet-stack-helper.h:  void Install (Ptr<Node> node) const;
click/helper/click-internet-stack-helper.h:  void Install (NodeContainer c) const;
click/helper/click-internet-stack-helper.h:  void InstallAll (void) const;
click/helper/click-internet-stack-helper.cc:ClickInternetStackHelper::Install (NodeContainer c) const
click/helper/click-internet-stack-helper.cc:      Install (*i);
click/helper/click-internet-stack-helper.cc:ClickInternetStackHelper::InstallAll (void) const
click/helper/click-internet-stack-helper.cc:  Install (NodeContainer::GetGlobal ());
click/helper/click-internet-stack-helper.cc:ClickInternetStackHelper::Install (Ptr<Node> node) const
click/helper/click-internet-stack-helper.cc:          NS_FATAL_ERROR ("ClickInternetStackHelper::Install (): Aggregating "
click/helper/click-internet-stack-helper.cc:ClickInternetStackHelper::Install (std::string nodeName) const
click/helper/click-internet-stack-helper.cc:  Install (node);
click/doc/click.rst:  click.Install (myNodeContainer);
c2c-list-routing/helper/c2c-list-routing-helper.h:   * This method will be called by ns3::InternetStackHelper::Install
dsdv/examples/dsdv-manet.cc:  void InstallInternetStack (std::string tr_name);
dsdv/examples/dsdv-manet.cc:  void InstallApplications ();
dsdv/examples/dsdv-manet.cc:  InstallInternetStack (tr_name);
dsdv/examples/dsdv-manet.cc:  InstallApplications ();
dsdv/examples/dsdv-manet.cc:  mobility.Install (nodes);
dsdv/examples/dsdv-manet.cc:  devices = wifi.Install (wifiPhy, wifiMac, nodes);
dsdv/examples/dsdv-manet.cc:DsdvManetExample::InstallInternetStack (std::string tr_name)
dsdv/examples/dsdv-manet.cc:  stack.SetRoutingHelper (dsdv); // has effect on the next Install ()
dsdv/examples/dsdv-manet.cc:  stack.Install (nodes);
dsdv/examples/dsdv-manet.cc:DsdvManetExample::InstallApplications ()
dsdv/examples/dsdv-manet.cc:              ApplicationContainer apps1 = onoff1.Install (nodes.Get (clientNode));
dsdv/helper/dsdv-helper.h:   * This method will be called by ns3::InternetStackHelper::Install
mesh/model/dot11s/hwmp-protocol.cc:HwmpProtocol::Install (Ptr<MeshPointDevice> mp)
mesh/model/dot11s/hwmp-protocol.cc:      // Installing plugins:
mesh/model/dot11s/hwmp-protocol.cc:      mac->InstallPlugin (hwmpMac);
mesh/model/dot11s/hwmp-protocol.cc:      //Installing airtime link metric:
mesh/model/dot11s/peer-management-protocol.cc:PeerManagementProtocol::Install (Ptr<MeshPointDevice> mp)
mesh/model/dot11s/peer-management-protocol.cc:      mac->InstallPlugin (plugin);
mesh/model/dot11s/peer-management-protocol.h:   * \brief Install PMP on given mesh point.
mesh/model/dot11s/peer-management-protocol.h:   * Installing protocol cause installing its interface MAC plugins.
mesh/model/dot11s/peer-management-protocol.h:  bool Install (Ptr<MeshPointDevice>);
mesh/model/dot11s/hwmp-protocol.h:   * \brief Install HWMP on given mesh point.
mesh/model/dot11s/hwmp-protocol.h:   * Installing protocol cause installing its interface MAC plugins.
mesh/model/dot11s/hwmp-protocol.h:  bool Install (Ptr<MeshPointDevice>);
mesh/model/mesh-wifi-interface-mac.h:  /// Install plugin.
mesh/model/mesh-wifi-interface-mac.h:  void InstallPlugin (Ptr<MeshWifiInterfaceMacPlugin> plugin);
mesh/model/mesh-wifi-interface-mac.cc:MeshWifiInterfaceMac::InstallPlugin (Ptr<MeshWifiInterfaceMacPlugin> plugin)
mesh/model/flame/flame-protocol.h:   * \brief Install FLAME on given mesh point.
mesh/model/flame/flame-protocol.h:   * Installing protocol cause installing its interface MAC plugins.
mesh/model/flame/flame-protocol.h:  bool Install (Ptr<MeshPointDevice>);
mesh/model/flame/flame-protocol.cc:FlameProtocol::Install (Ptr<MeshPointDevice> mp)
mesh/model/flame/flame-protocol.cc:      // Installing plugins:
mesh/model/flame/flame-protocol.cc:      mac->InstallPlugin (flameMac);
mesh/test/dot11s/hwmp-simplest-regression.cc:  InstallApplications ();
mesh/test/dot11s/hwmp-simplest-regression.cc:  mobility.Install (*m_nodes);
mesh/test/dot11s/hwmp-simplest-regression.cc:HwmpSimplestRegressionTest::InstallApplications ()
mesh/test/dot11s/hwmp-simplest-regression.cc:  ApplicationContainer serverApps = echoServer.Install (m_nodes->Get (0));
mesh/test/dot11s/hwmp-simplest-regression.cc:  ApplicationContainer clientApps = echoClient.Install (m_nodes->Get (1));
mesh/test/dot11s/hwmp-simplest-regression.cc:  mesh.SetStackInstaller ("ns3::Dot11sStack");
mesh/test/dot11s/hwmp-simplest-regression.cc:  NetDeviceContainer meshDevices = mesh.Install (wifiPhy, *m_nodes);
mesh/test/dot11s/hwmp-simplest-regression.cc:  internetStack.Install (*m_nodes);
mesh/test/dot11s/pmp-regression.cc:  mobility.Install (*m_nodes);
mesh/test/dot11s/pmp-regression.cc:  mesh.SetStackInstaller ("ns3::Dot11sStack");
mesh/test/dot11s/pmp-regression.cc:  NetDeviceContainer meshDevices = mesh.Install (wifiPhy, *m_nodes);
mesh/test/dot11s/hwmp-proactive-regression.h:  void InstallApplications ();
mesh/test/dot11s/hwmp-target-flags-regression.cc:  InstallApplications ();
mesh/test/dot11s/hwmp-target-flags-regression.cc:  mobility.Install (*m_nodes);
mesh/test/dot11s/hwmp-target-flags-regression.cc:HwmpDoRfRegressionTest::InstallApplications ()
mesh/test/dot11s/hwmp-target-flags-regression.cc:  ApplicationContainer serverApps = echoServer.Install (m_nodes->Get (0));
mesh/test/dot11s/hwmp-target-flags-regression.cc:  //Install first client
mesh/test/dot11s/hwmp-target-flags-regression.cc:  ApplicationContainer clientApps = echoClient.Install (m_nodes->Get (1));
mesh/test/dot11s/hwmp-target-flags-regression.cc:  //Install second client
mesh/test/dot11s/hwmp-target-flags-regression.cc:  clientApps = echoClient.Install (m_nodes->Get (2));
mesh/test/dot11s/hwmp-target-flags-regression.cc:  //Install second server and attach client to it:
mesh/test/dot11s/hwmp-target-flags-regression.cc:  serverApps = echoServer1.Install (m_nodes->Get (3));
mesh/test/dot11s/hwmp-target-flags-regression.cc:  clientApps = echoClient1.Install (m_nodes->Get (0));
mesh/test/dot11s/hwmp-target-flags-regression.cc:  mesh.SetStackInstaller ("ns3::Dot11sStack");
mesh/test/dot11s/hwmp-target-flags-regression.cc:  NetDeviceContainer meshDevices = mesh.Install (wifiPhy, *m_nodes);
mesh/test/dot11s/hwmp-target-flags-regression.cc:  internetStack.Install (*m_nodes);
mesh/test/dot11s/hwmp-simplest-regression.h:  void InstallApplications ();
mesh/test/dot11s/hwmp-proactive-regression.cc:  InstallApplications ();
mesh/test/dot11s/hwmp-proactive-regression.cc:  mobility.Install (*m_nodes);
mesh/test/dot11s/hwmp-proactive-regression.cc:HwmpProactiveRegressionTest::InstallApplications ()
mesh/test/dot11s/hwmp-proactive-regression.cc:  ApplicationContainer serverApps = echoServer.Install (m_nodes->Get (0));
mesh/test/dot11s/hwmp-proactive-regression.cc:  ApplicationContainer clientApps = echoClient.Install (m_nodes->Get (4));
mesh/test/dot11s/hwmp-proactive-regression.cc:  mesh.SetStackInstaller ("ns3::Dot11sStack", "Root", Mac48AddressValue (Mac48Address ("00:00:00:00:00:0d")));
mesh/test/dot11s/hwmp-proactive-regression.cc:  NetDeviceContainer meshDevices = mesh.Install (wifiPhy, *m_nodes);
mesh/test/dot11s/hwmp-proactive-regression.cc:  internetStack.Install (*m_nodes);
mesh/test/dot11s/hwmp-reactive-regression.h:  void InstallApplications ();
mesh/test/dot11s/hwmp-reactive-regression.cc:  InstallApplications ();
mesh/test/dot11s/hwmp-reactive-regression.cc:  mobility.Install (*m_nodes);
mesh/test/dot11s/hwmp-reactive-regression.cc:HwmpReactiveRegressionTest::InstallApplications ()
mesh/test/dot11s/hwmp-reactive-regression.cc:  ApplicationContainer serverApps = echoServer.Install (m_nodes->Get (0));
mesh/test/dot11s/hwmp-reactive-regression.cc:  ApplicationContainer clientApps = echoClient.Install (m_nodes->Get (5));
mesh/test/dot11s/hwmp-reactive-regression.cc:  mesh.SetStackInstaller ("ns3::Dot11sStack");
mesh/test/dot11s/hwmp-reactive-regression.cc:  NetDeviceContainer meshDevices = mesh.Install (wifiPhy, *m_nodes);
mesh/test/dot11s/hwmp-reactive-regression.cc:  internetStack.Install (*m_nodes);
mesh/test/dot11s/hwmp-target-flags-regression.h:  void InstallApplications ();
mesh/test/flame/flame-regression.h:  void InstallApplications ();
mesh/test/flame/flame-regression.cc:  InstallApplications ();
mesh/test/flame/flame-regression.cc:  mobility.Install (*m_nodes);
mesh/test/flame/flame-regression.cc:  mesh.SetStackInstaller ("ns3::FlameStack");
mesh/test/flame/flame-regression.cc:  NetDeviceContainer meshDevices = mesh.Install (wifiPhy, *m_nodes);
mesh/test/flame/flame-regression.cc:  internetStack.Install (*m_nodes);
mesh/test/flame/flame-regression.cc:FlameRegressionTest::InstallApplications ()
mesh/test/flame/flame-regression.cc:  ApplicationContainer serverApps = echoServer.Install (m_nodes->Get (0));
mesh/test/flame/flame-regression.cc:  ApplicationContainer clientApps = echoClient.Install (m_nodes->Get (2));
mesh/examples/mesh.cc:  /// Install internet m_stack on nodes
mesh/examples/mesh.cc:  void InstallInternetStack ();
mesh/examples/mesh.cc:  /// Install applications
mesh/examples/mesh.cc:  void InstallApplication ();
mesh/examples/mesh.cc:      mesh.SetStackInstaller (m_stack, "Root", Mac48AddressValue (Mac48Address (m_root.c_str ())));
mesh/examples/mesh.cc:      mesh.SetStackInstaller (m_stack);
mesh/examples/mesh.cc:  // Install protocols and return container if MeshPointDevices
mesh/examples/mesh.cc:  meshDevices = mesh.Install (wifiPhy, nodes);
mesh/examples/mesh.cc:  mobility.Install (nodes);
mesh/examples/mesh.cc:MeshTest::InstallInternetStack ()
mesh/examples/mesh.cc:  internetStack.Install (nodes);
mesh/examples/mesh.cc:MeshTest::InstallApplication ()
mesh/examples/mesh.cc:  ApplicationContainer serverApps = echoServer.Install (nodes.Get (0));
mesh/examples/mesh.cc:  ApplicationContainer clientApps = echoClient.Install (nodes.Get (m_xSize*m_ySize-1));
mesh/examples/mesh.cc:  InstallInternetStack ();
mesh/examples/mesh.cc:  InstallApplication ();
mesh/helper/dot11s/dot11s-installer.h:   * \brief Install an 802.11s stack.
mesh/helper/dot11s/dot11s-installer.h:  bool InstallStack (Ptr<MeshPointDevice> mp);
mesh/helper/dot11s/dot11s-installer.cc:Dot11sStack::InstallStack (Ptr<MeshPointDevice> mp)
mesh/helper/dot11s/dot11s-installer.cc:  //Install Peer management protocol:
mesh/helper/dot11s/dot11s-installer.cc:  bool install_ok = pmp->Install (mp);
mesh/helper/dot11s/dot11s-installer.cc:  //Install HWMP:
mesh/helper/dot11s/dot11s-installer.cc:  install_ok = hwmp->Install (mp);
mesh/helper/dot11s/dot11s-installer.cc:  //Install interaction between HWMP and Peer management protocol:
mesh/helper/mesh-helper.h:   * \brief Install 802.11s mesh device & protocols on given node list
mesh/helper/mesh-helper.h:  Install (const WifiPhyHelper &phyHelper, NodeContainer c) const;
mesh/helper/mesh-helper.h:  void SetStackInstaller (std::string type,
mesh/helper/mesh-helper.h:   * have been assigned.  The Install() method of this helper
mesh/helper/mesh-stack-installer.h: * interfaces to it, than call Install method
mesh/helper/mesh-stack-installer.h:  ///\brief Installs mesh stack. needed by helper only
mesh/helper/mesh-stack-installer.h:  virtual bool InstallStack (Ptr<MeshPointDevice> mp) = 0;
mesh/helper/flame/flame-installer.h:   * \brief Install a flame stack on the given MeshPointDevice
mesh/helper/flame/flame-installer.h:  bool InstallStack (Ptr<MeshPointDevice> mp);
mesh/helper/flame/flame-installer.cc:FlameStack::InstallStack (Ptr<MeshPointDevice> mp)
mesh/helper/flame/flame-installer.cc:  return flame->Install (mp);
mesh/helper/mesh-helper.cc:MeshHelper::SetStackInstaller (std::string type,
mesh/helper/mesh-helper.cc:MeshHelper::Install (const WifiPhyHelper &phyHelper, NodeContainer c) const
mesh/helper/mesh-helper.cc:      if (!m_stack->InstallStack (mp))
mesh/bindings/modulegen__gcc_ILP32.py:    ## mesh-helper.h (module 'mesh'): ns3::NetDeviceContainer ns3::MeshHelper::Install(ns3::WifiPhyHelper const & phyHelper, ns3::NodeContainer c) const [member function]
mesh/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
mesh/bindings/modulegen__gcc_ILP32.py:    ## mesh-helper.h (module 'mesh'): void ns3::MeshHelper::SetStackInstaller(std::string type, std::string n0="", ns3::AttributeValue const & v0=ns3::EmptyAttributeValue(), std::string n1="", ns3::AttributeValue const & v1=ns3::EmptyAttributeValue(), std::string n2="", ns3::AttributeValue const & v2=ns3::EmptyAttributeValue(), std::string n3="", ns3::AttributeValue const & v3=ns3::EmptyAttributeValue(), std::string n4="", ns3::AttributeValue const & v4=ns3::EmptyAttributeValue(), std::string n5="", ns3::AttributeValue const & v5=ns3::EmptyAttributeValue(), std::string n6="", ns3::AttributeValue const & v6=ns3::EmptyAttributeValue(), std::string n7="", ns3::AttributeValue const & v7=ns3::EmptyAttributeValue()) [member function]
mesh/bindings/modulegen__gcc_ILP32.py:    cls.add_method('SetStackInstaller', 
mesh/bindings/modulegen__gcc_ILP32.py:    ## wifi-helper.h (module 'wifi'): ns3::NetDeviceContainer ns3::WifiHelper::Install(ns3::WifiPhyHelper const & phy, ns3::WifiMacHelper const & mac, ns3::NodeContainer c) const [member function]
mesh/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
mesh/bindings/modulegen__gcc_ILP32.py:    ## wifi-helper.h (module 'wifi'): ns3::NetDeviceContainer ns3::WifiHelper::Install(ns3::WifiPhyHelper const & phy, ns3::WifiMacHelper const & mac, ns3::Ptr<ns3::Node> node) const [member function]
mesh/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
mesh/bindings/modulegen__gcc_ILP32.py:    ## wifi-helper.h (module 'wifi'): ns3::NetDeviceContainer ns3::WifiHelper::Install(ns3::WifiPhyHelper const & phy, ns3::WifiMacHelper const & mac, std::string nodeName) const [member function]
mesh/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
mesh/bindings/modulegen__gcc_ILP32.py:    ## mesh-stack-installer.h (module 'mesh'): bool ns3::MeshStack::InstallStack(ns3::Ptr<ns3::MeshPointDevice> mp) [member function]
mesh/bindings/modulegen__gcc_ILP32.py:    cls.add_method('InstallStack', 
mesh/bindings/modulegen__gcc_ILP32.py:    ## dot11s-installer.h (module 'mesh'): bool ns3::Dot11sStack::InstallStack(ns3::Ptr<ns3::MeshPointDevice> mp) [member function]
mesh/bindings/modulegen__gcc_ILP32.py:    cls.add_method('InstallStack', 
mesh/bindings/modulegen__gcc_ILP32.py:    ## flame-installer.h (module 'mesh'): bool ns3::FlameStack::InstallStack(ns3::Ptr<ns3::MeshPointDevice> mp) [member function]
mesh/bindings/modulegen__gcc_ILP32.py:    cls.add_method('InstallStack', 
mesh/bindings/modulegen__gcc_ILP32.py:    ## mesh-wifi-interface-mac.h (module 'mesh'): void ns3::MeshWifiInterfaceMac::InstallPlugin(ns3::Ptr<ns3::MeshWifiInterfaceMacPlugin> plugin) [member function]
mesh/bindings/modulegen__gcc_ILP32.py:    cls.add_method('InstallPlugin', 
mesh/bindings/modulegen__gcc_ILP32.py:    ## hwmp-protocol.h (module 'mesh'): bool ns3::dot11s::HwmpProtocol::Install(ns3::Ptr<ns3::MeshPointDevice> arg0) [member function]
mesh/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
mesh/bindings/modulegen__gcc_ILP32.py:    ## peer-management-protocol.h (module 'mesh'): bool ns3::dot11s::PeerManagementProtocol::Install(ns3::Ptr<ns3::MeshPointDevice> arg0) [member function]
mesh/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
mesh/bindings/modulegen__gcc_ILP32.py:    ## flame-protocol.h (module 'mesh'): bool ns3::flame::FlameProtocol::Install(ns3::Ptr<ns3::MeshPointDevice> arg0) [member function]
mesh/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
mesh/bindings/modulegen__gcc_LP64.py:    ## mesh-helper.h (module 'mesh'): ns3::NetDeviceContainer ns3::MeshHelper::Install(ns3::WifiPhyHelper const & phyHelper, ns3::NodeContainer c) const [member function]
mesh/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
mesh/bindings/modulegen__gcc_LP64.py:    ## mesh-helper.h (module 'mesh'): void ns3::MeshHelper::SetStackInstaller(std::string type, std::string n0="", ns3::AttributeValue const & v0=ns3::EmptyAttributeValue(), std::string n1="", ns3::AttributeValue const & v1=ns3::EmptyAttributeValue(), std::string n2="", ns3::AttributeValue const & v2=ns3::EmptyAttributeValue(), std::string n3="", ns3::AttributeValue const & v3=ns3::EmptyAttributeValue(), std::string n4="", ns3::AttributeValue const & v4=ns3::EmptyAttributeValue(), std::string n5="", ns3::AttributeValue const & v5=ns3::EmptyAttributeValue(), std::string n6="", ns3::AttributeValue const & v6=ns3::EmptyAttributeValue(), std::string n7="", ns3::AttributeValue const & v7=ns3::EmptyAttributeValue()) [member function]
mesh/bindings/modulegen__gcc_LP64.py:    cls.add_method('SetStackInstaller', 
mesh/bindings/modulegen__gcc_LP64.py:    ## wifi-helper.h (module 'wifi'): ns3::NetDeviceContainer ns3::WifiHelper::Install(ns3::WifiPhyHelper const & phy, ns3::WifiMacHelper const & mac, ns3::NodeContainer c) const [member function]
mesh/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
mesh/bindings/modulegen__gcc_LP64.py:    ## wifi-helper.h (module 'wifi'): ns3::NetDeviceContainer ns3::WifiHelper::Install(ns3::WifiPhyHelper const & phy, ns3::WifiMacHelper const & mac, ns3::Ptr<ns3::Node> node) const [member function]
mesh/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
mesh/bindings/modulegen__gcc_LP64.py:    ## wifi-helper.h (module 'wifi'): ns3::NetDeviceContainer ns3::WifiHelper::Install(ns3::WifiPhyHelper const & phy, ns3::WifiMacHelper const & mac, std::string nodeName) const [member function]
mesh/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
mesh/bindings/modulegen__gcc_LP64.py:    ## mesh-stack-installer.h (module 'mesh'): bool ns3::MeshStack::InstallStack(ns3::Ptr<ns3::MeshPointDevice> mp) [member function]
mesh/bindings/modulegen__gcc_LP64.py:    cls.add_method('InstallStack', 
mesh/bindings/modulegen__gcc_LP64.py:    ## dot11s-installer.h (module 'mesh'): bool ns3::Dot11sStack::InstallStack(ns3::Ptr<ns3::MeshPointDevice> mp) [member function]
mesh/bindings/modulegen__gcc_LP64.py:    cls.add_method('InstallStack', 
mesh/bindings/modulegen__gcc_LP64.py:    ## flame-installer.h (module 'mesh'): bool ns3::FlameStack::InstallStack(ns3::Ptr<ns3::MeshPointDevice> mp) [member function]
mesh/bindings/modulegen__gcc_LP64.py:    cls.add_method('InstallStack', 
mesh/bindings/modulegen__gcc_LP64.py:    ## mesh-wifi-interface-mac.h (module 'mesh'): void ns3::MeshWifiInterfaceMac::InstallPlugin(ns3::Ptr<ns3::MeshWifiInterfaceMacPlugin> plugin) [member function]
mesh/bindings/modulegen__gcc_LP64.py:    cls.add_method('InstallPlugin', 
mesh/bindings/modulegen__gcc_LP64.py:    ## hwmp-protocol.h (module 'mesh'): bool ns3::dot11s::HwmpProtocol::Install(ns3::Ptr<ns3::MeshPointDevice> arg0) [member function]
mesh/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
mesh/bindings/modulegen__gcc_LP64.py:    ## peer-management-protocol.h (module 'mesh'): bool ns3::dot11s::PeerManagementProtocol::Install(ns3::Ptr<ns3::MeshPointDevice> arg0) [member function]
mesh/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
mesh/bindings/modulegen__gcc_LP64.py:    ## flame-protocol.h (module 'mesh'): bool ns3::flame::FlameProtocol::Install(ns3::Ptr<ns3::MeshPointDevice> arg0) [member function]
mesh/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
olsr/test/hello-regression-test.cc:  internet.Install (c);
olsr/test/hello-regression-test.cc:  NetDeviceContainer nd = p2p.Install (c);
olsr/test/bug780-test.cc:  NetDeviceContainer adhocDevices = wifi.Install (wifiPhy, wifiMac, adhocNodes);
olsr/test/bug780-test.cc:  internet.Install (adhocNodes);
olsr/test/bug780-test.cc:  mobilityAdhoc.Install (adhocNodes);
olsr/test/bug780-test.cc:  ApplicationContainer p = ping.Install (adhocNodes.Get (0));
olsr/test/tc-regression-test.cc:  mobility.Install (c);
olsr/test/tc-regression-test.cc:  internet.Install (c);
olsr/test/tc-regression-test.cc:  NetDeviceContainer nd = wifi.Install (wifiPhy, wifiMac, c); 
olsr/examples/olsr-hna.cc:  NetDeviceContainer devices = wifi.Install (wifiPhy, wifiMac, olsrNodes);
olsr/examples/olsr-hna.cc:  NetDeviceContainer csmaDevices = csma.Install (NodeContainer (csmaNodes.Get (0), olsrNodes.Get (1)));
olsr/examples/olsr-hna.cc:  mobility.Install (olsrNodes);
olsr/examples/olsr-hna.cc:  internet_olsr.SetRoutingHelper (list); // has effect on the next Install ()
olsr/examples/olsr-hna.cc:  internet_olsr.Install (olsrNodes);
olsr/examples/olsr-hna.cc:  internet_csma.Install (csmaNodes);
olsr/examples/simple-point-to-point-olsr.cc:  internet.SetRoutingHelper (list); // has effect on the next Install ()
olsr/examples/simple-point-to-point-olsr.cc:  internet.Install (c);
olsr/examples/simple-point-to-point-olsr.cc:  NetDeviceContainer nd02 = p2p.Install (n02);
olsr/examples/simple-point-to-point-olsr.cc:  NetDeviceContainer nd12 = p2p.Install (n12);
olsr/examples/simple-point-to-point-olsr.cc:  NetDeviceContainer nd32 = p2p.Install (n32);
olsr/examples/simple-point-to-point-olsr.cc:  NetDeviceContainer nd34 = p2p.Install (n34);
olsr/examples/simple-point-to-point-olsr.cc:  ApplicationContainer apps = onoff.Install (c.Get (0));
olsr/examples/simple-point-to-point-olsr.cc:  apps = sink.Install (c.Get (3));
olsr/examples/simple-point-to-point-olsr.cc:  apps = onoff.Install (c.Get (3));
olsr/examples/simple-point-to-point-olsr.cc:  apps = sink.Install (c.Get (1));
olsr/helper/olsr-helper.h:   * This method will be called by ns3::InternetStackHelper::Install
olsr/helper/olsr-helper.h:  * have been assigned.  The Install() method of the InternetStackHelper
olsr/doc/olsr.rst:with different scope to enable OLSR: ``ns3::OlsrHelper::Install
olsr/doc/olsr.rst:(NodeContainer container)``; ``ns3::OlsrHelper::Install (Ptr<Node>
olsr/doc/olsr.rst:node)``; or ``ns3::OlsrHelper::InstallAll (void)``
dsr/examples/dsr.cc:  allDevices = wifi.Install (wifiPhy, wifiMac, adhocNodes);
dsr/examples/dsr.cc:  adhocMobility.Install (adhocNodes);
dsr/examples/dsr.cc:  internet.Install (adhocNodes);
dsr/examples/dsr.cc:  dsrMain.Install (dsr, adhocNodes);
dsr/examples/dsr.cc:      ApplicationContainer apps_sink = sink.Install (adhocNodes.Get (i));
dsr/examples/dsr.cc:      ApplicationContainer apps1 = onoff1.Install (adhocNodes.Get (i + nWifis - nSinks));
dsr/helper/dsr-main-helper.cc:DsrMainHelper::Install (DsrHelper &dsrHelper, NodeContainer nodes)
dsr/helper/dsr-main-helper.cc:      Install (*i);
dsr/helper/dsr-main-helper.cc:DsrMainHelper::Install (Ptr<Node> node)
dsr/helper/dsr-main-helper.h:  void Install (DsrHelper &dsrHelper, NodeContainer nodes);
dsr/helper/dsr-main-helper.h:  void Install (Ptr<Node> node);
dsr/bindings/modulegen__gcc_ILP32.py:    ## dsr-main-helper.h (module 'dsr'): void ns3::DsrMainHelper::Install(ns3::DsrHelper & dsrHelper, ns3::NodeContainer nodes) [member function]
dsr/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
dsr/bindings/modulegen__gcc_LP64.py:    ## dsr-main-helper.h (module 'dsr'): void ns3::DsrMainHelper::Install(ns3::DsrHelper & dsrHelper, ns3::NodeContainer nodes) [member function]
dsr/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
dsr/doc/dsr.rst:  dsrMain.Install (dsr, adhocNodes);
tap-bridge/examples/tap-wifi-virtual-machine.py:    # Install the wireless devices onto our ghost nodes.
tap-bridge/examples/tap-wifi-virtual-machine.py:    devices = wifi.Install(wifiPhy, wifiMac, nodes)
tap-bridge/examples/tap-wifi-virtual-machine.py:    mobility.Install(nodes)
tap-bridge/examples/tap-wifi-virtual-machine.py:    tapBridge.Install (nodes.Get (0), devices.Get (0));
tap-bridge/examples/tap-wifi-virtual-machine.py:    tapBridge.Install (nodes.Get (1), devices.Get (1));
tap-bridge/examples/tap-wifi-dumbbell.cc:  NetDeviceContainer devicesLeft = wifi.Install (wifiPhy, wifiMac, nodesLeft.Get (0));
tap-bridge/examples/tap-wifi-dumbbell.cc:  devicesLeft.Add (wifi.Install (wifiPhy, wifiMac, NodeContainer (nodesLeft.Get (1), nodesLeft.Get (2), nodesLeft.Get (3))));
tap-bridge/examples/tap-wifi-dumbbell.cc:  mobility.Install (nodesLeft);
tap-bridge/examples/tap-wifi-dumbbell.cc:  internetLeft.Install (nodesLeft);
tap-bridge/examples/tap-wifi-dumbbell.cc:  tapBridge.Install (nodesLeft.Get (0), devicesLeft.Get (0));
tap-bridge/examples/tap-wifi-dumbbell.cc:  NetDeviceContainer devicesRight = csmaRight.Install (nodesRight);
tap-bridge/examples/tap-wifi-dumbbell.cc:  internetRight.Install (nodesRight);
tap-bridge/examples/tap-wifi-dumbbell.cc:  NetDeviceContainer devices = p2p.Install (nodes);
tap-bridge/examples/tap-wifi-dumbbell.cc:  ApplicationContainer apps = onoff.Install (nodesLeft.Get (3));
tap-bridge/examples/tap-wifi-dumbbell.cc:  apps = sink.Install (nodesRight.Get (0));
tap-bridge/examples/tap-csma-virtual-machine.py:    devices = csma.Install(nodes)
tap-bridge/examples/tap-csma-virtual-machine.py:    tapBridge.Install (nodes.Get (0), devices.Get (0))
tap-bridge/examples/tap-csma-virtual-machine.py:    tapBridge.Install (nodes.Get (1), devices.Get (1))
tap-bridge/examples/tap-csma.cc:  NetDeviceContainer devices = csma.Install (nodes);
tap-bridge/examples/tap-csma.cc:  stack.Install (nodes);
tap-bridge/examples/tap-csma.cc:  tapBridge.Install (nodes.Get (0), devices.Get (0));
tap-bridge/examples/tap-wifi-virtual-machine.cc:  // Install the wireless devices onto our ghost nodes.
tap-bridge/examples/tap-wifi-virtual-machine.cc:  NetDeviceContainer devices = wifi.Install (wifiPhy, wifiMac, nodes);
tap-bridge/examples/tap-wifi-virtual-machine.cc:  mobility.Install (nodes);
tap-bridge/examples/tap-wifi-virtual-machine.cc:  tapBridge.Install (nodes.Get (0), devices.Get (0));
tap-bridge/examples/tap-wifi-virtual-machine.cc:  tapBridge.Install (nodes.Get (1), devices.Get (1));
tap-bridge/examples/tap-csma-virtual-machine.cc:  NetDeviceContainer devices = csma.Install (nodes);
tap-bridge/examples/tap-csma-virtual-machine.cc:  tapBridge.Install (nodes.Get (0), devices.Get (0));
tap-bridge/examples/tap-csma-virtual-machine.cc:  tapBridge.Install (nodes.Get (1), devices.Get (1));
tap-bridge/helper/tap-bridge-helper.cc:TapBridgeHelper::Install (Ptr<Node> node, Ptr<NetDevice> nd, const AttributeValue &v1)
tap-bridge/helper/tap-bridge-helper.cc:  return Install (node, nd);
tap-bridge/helper/tap-bridge-helper.cc:TapBridgeHelper::Install (Ptr<Node> node, Ptr<NetDevice> nd)
tap-bridge/helper/tap-bridge-helper.cc:  NS_LOG_LOGIC ("Install TapBridge on node " << node->GetId () << " bridging net device " << nd);
tap-bridge/helper/tap-bridge-helper.cc:TapBridgeHelper::Install (std::string nodeName, Ptr<NetDevice> nd)
tap-bridge/helper/tap-bridge-helper.cc:  return Install (node, nd);
tap-bridge/helper/tap-bridge-helper.cc:TapBridgeHelper::Install (Ptr<Node> node, std::string ndName)
tap-bridge/helper/tap-bridge-helper.cc:  return Install (node, nd);
tap-bridge/helper/tap-bridge-helper.cc:TapBridgeHelper::Install (std::string nodeName, std::string ndName)
tap-bridge/helper/tap-bridge-helper.cc:  return Install (node, nd);
tap-bridge/helper/tap-bridge-helper.h:  Ptr<NetDevice> Install (Ptr<Node> node, Ptr<NetDevice> nd);
tap-bridge/helper/tap-bridge-helper.h:  Ptr<NetDevice> Install (std::string nodeName, Ptr<NetDevice> nd);
tap-bridge/helper/tap-bridge-helper.h:  Ptr<NetDevice> Install (Ptr<Node> node, std::string ndName);
tap-bridge/helper/tap-bridge-helper.h:  Ptr<NetDevice> Install (std::string nodeName, std::string ndName);
tap-bridge/helper/tap-bridge-helper.h:  Ptr<NetDevice> Install (Ptr<Node> node, Ptr<NetDevice> nd, const AttributeValue &bridgeType);
tap-bridge/bindings/modulegen__gcc_ILP32.py:    ## tap-bridge-helper.h (module 'tap-bridge'): ns3::Ptr<ns3::NetDevice> ns3::TapBridgeHelper::Install(ns3::Ptr<ns3::Node> node, ns3::Ptr<ns3::NetDevice> nd) [member function]
tap-bridge/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
tap-bridge/bindings/modulegen__gcc_ILP32.py:    ## tap-bridge-helper.h (module 'tap-bridge'): ns3::Ptr<ns3::NetDevice> ns3::TapBridgeHelper::Install(std::string nodeName, ns3::Ptr<ns3::NetDevice> nd) [member function]
tap-bridge/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
tap-bridge/bindings/modulegen__gcc_ILP32.py:    ## tap-bridge-helper.h (module 'tap-bridge'): ns3::Ptr<ns3::NetDevice> ns3::TapBridgeHelper::Install(ns3::Ptr<ns3::Node> node, std::string ndName) [member function]
tap-bridge/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
tap-bridge/bindings/modulegen__gcc_ILP32.py:    ## tap-bridge-helper.h (module 'tap-bridge'): ns3::Ptr<ns3::NetDevice> ns3::TapBridgeHelper::Install(std::string nodeName, std::string ndName) [member function]
tap-bridge/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
tap-bridge/bindings/modulegen__gcc_ILP32.py:    ## tap-bridge-helper.h (module 'tap-bridge'): ns3::Ptr<ns3::NetDevice> ns3::TapBridgeHelper::Install(ns3::Ptr<ns3::Node> node, ns3::Ptr<ns3::NetDevice> nd, ns3::AttributeValue const & bridgeType) [member function]
tap-bridge/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
tap-bridge/bindings/modulegen__gcc_LP64.py:    ## tap-bridge-helper.h (module 'tap-bridge'): ns3::Ptr<ns3::NetDevice> ns3::TapBridgeHelper::Install(ns3::Ptr<ns3::Node> node, ns3::Ptr<ns3::NetDevice> nd) [member function]
tap-bridge/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
tap-bridge/bindings/modulegen__gcc_LP64.py:    ## tap-bridge-helper.h (module 'tap-bridge'): ns3::Ptr<ns3::NetDevice> ns3::TapBridgeHelper::Install(std::string nodeName, ns3::Ptr<ns3::NetDevice> nd) [member function]
tap-bridge/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
tap-bridge/bindings/modulegen__gcc_LP64.py:    ## tap-bridge-helper.h (module 'tap-bridge'): ns3::Ptr<ns3::NetDevice> ns3::TapBridgeHelper::Install(ns3::Ptr<ns3::Node> node, std::string ndName) [member function]
tap-bridge/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
tap-bridge/bindings/modulegen__gcc_LP64.py:    ## tap-bridge-helper.h (module 'tap-bridge'): ns3::Ptr<ns3::NetDevice> ns3::TapBridgeHelper::Install(std::string nodeName, std::string ndName) [member function]
tap-bridge/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
tap-bridge/bindings/modulegen__gcc_LP64.py:    ## tap-bridge-helper.h (module 'tap-bridge'): ns3::Ptr<ns3::NetDevice> ns3::TapBridgeHelper::Install(ns3::Ptr<ns3::Node> node, ns3::Ptr<ns3::NetDevice> nd, ns3::AttributeValue const & bridgeType) [member function]
tap-bridge/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
bridge/examples/csma-bridge.py:        link = csma.Install(ns.network.NodeContainer(ns.network.NodeContainer(terminals.Get(i)), csmaSwitch))
bridge/examples/csma-bridge.py:    internet.Install(terminals)
bridge/examples/csma-bridge.py:    app = onoff.Install(ns.network.NodeContainer(terminals.Get(0)))
bridge/examples/csma-bridge.py:    app = sink.Install(ns.network.NodeContainer(terminals.Get(1)))
bridge/examples/csma-bridge.py:    app = onoff.Install(ns.network.NodeContainer(terminals.Get(3)))
bridge/examples/csma-bridge.py:    app = sink.Install(ns.network.NodeContainer(terminals.Get(0)))
bridge/examples/csma-bridge.cc:      NetDeviceContainer link = csma.Install (NodeContainer (terminals.Get (i), csmaSwitch));
bridge/examples/csma-bridge.cc:  bridge.Install (switchNode, switchDevices);
bridge/examples/csma-bridge.cc:  internet.Install (terminals);
bridge/examples/csma-bridge.cc:  ApplicationContainer app = onoff.Install (terminals.Get (0));
bridge/examples/csma-bridge.cc:  app = sink.Install (terminals.Get (1));
bridge/examples/csma-bridge.cc:  app = onoff.Install (terminals.Get (3));
bridge/examples/csma-bridge.cc:  app = sink.Install (terminals.Get (0));
bridge/examples/csma-bridge-one-hop.cc:      NetDeviceContainer link = csma.Install (NodeContainer (topLan.Get (i), bridge1));
bridge/examples/csma-bridge-one-hop.cc:  bridge.Install (bridge1, topBridgeDevices);
bridge/examples/csma-bridge-one-hop.cc:  internet.Install (routerNodes);
bridge/examples/csma-bridge-one-hop.cc:      NetDeviceContainer link = csma.Install (NodeContainer (bottomLan.Get (i), bridge2));
bridge/examples/csma-bridge-one-hop.cc:  bridge.Install (bridge2, bottomBridgeDevices);
bridge/examples/csma-bridge-one-hop.cc:  ApplicationContainer app = onoff.Install (n0);
bridge/examples/csma-bridge-one-hop.cc:  ApplicationContainer sink1 = sink.Install (n1);
bridge/examples/csma-bridge-one-hop.cc:  ApplicationContainer app2 = onoff.Install (n3);
bridge/examples/csma-bridge-one-hop.cc:  ApplicationContainer sink2 = sink.Install (n0);
bridge/helper/bridge-helper.h:   * BridgeHelper::Install
bridge/helper/bridge-helper.h:  NetDeviceContainer Install (Ptr<Node> node, NetDeviceContainer c);
bridge/helper/bridge-helper.h:  NetDeviceContainer Install (std::string nodeName, NetDeviceContainer c);
bridge/helper/bridge-helper.cc:BridgeHelper::Install (Ptr<Node> node, NetDeviceContainer c)
bridge/helper/bridge-helper.cc:  NS_LOG_LOGIC ("**** Install bridge device on node " << node->GetId ());
bridge/helper/bridge-helper.cc:BridgeHelper::Install (std::string nodeName, NetDeviceContainer c)
bridge/helper/bridge-helper.cc:  return Install (node, c);
bridge/bindings/modulegen__gcc_ILP32.py:    ## bridge-helper.h (module 'bridge'): ns3::NetDeviceContainer ns3::BridgeHelper::Install(ns3::Ptr<ns3::Node> node, ns3::NetDeviceContainer c) [member function]
bridge/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
bridge/bindings/modulegen__gcc_ILP32.py:    ## bridge-helper.h (module 'bridge'): ns3::NetDeviceContainer ns3::BridgeHelper::Install(std::string nodeName, ns3::NetDeviceContainer c) [member function]
bridge/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
bridge/bindings/modulegen__gcc_LP64.py:    ## bridge-helper.h (module 'bridge'): ns3::NetDeviceContainer ns3::BridgeHelper::Install(ns3::Ptr<ns3::Node> node, ns3::NetDeviceContainer c) [member function]
bridge/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
bridge/bindings/modulegen__gcc_LP64.py:    ## bridge-helper.h (module 'bridge'): ns3::NetDeviceContainer ns3::BridgeHelper::Install(std::string nodeName, ns3::NetDeviceContainer c) [member function]
bridge/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
mobility/model/gauss-markov-mobility-model.h:    mobility.Install (wifiStaNodes);
mobility/test/ns2-mobility-helper-test-suite.cc:    mobility.Install ();
mobility/test/mobility-trace-test-suite.cc:  mobility.Install (sta);
mobility/examples/bonnmotion-ns2-example.cc:  ns2.Install ();
mobility/examples/main-random-walk.cc:  mobility.InstallAll ();
mobility/examples/ns2-mobility-trace.cc: *      - the program calls the Install() method of Ns2MobilityHelper to set mobility to nodes. At this moment, the file is read line by line, and the movement is scheduled in the simulator.
mobility/examples/ns2-mobility-trace.cc:  ns2.Install (); // configure movements for each node, while reading trace file
mobility/examples/main-grid-topology.cc:  mobility.Install (nodes);
mobility/examples/mobility-trace-example.cc:  mobility.Install (sta);
mobility/examples/main-random-topology.cc:  mobility.Install (c);
mobility/helper/mobility-helper.cc:MobilityHelper::Install (Ptr<Node> node) const
mobility/helper/mobility-helper.cc:MobilityHelper::Install (std::string nodeName) const
mobility/helper/mobility-helper.cc:  Install (node);
mobility/helper/mobility-helper.cc:MobilityHelper::Install (NodeContainer c) const
mobility/helper/mobility-helper.cc:      Install (*i);
mobility/helper/mobility-helper.cc:MobilityHelper::InstallAll (void)
mobility/helper/mobility-helper.cc:  Install (NodeContainer::GetGlobal ());
mobility/helper/ns2-mobility-helper.cc:Ns2MobilityHelper::Install (void) const
mobility/helper/ns2-mobility-helper.cc:  Install (NodeList::Begin (), NodeList::End ());
mobility/helper/mobility-helper.h: * MobilityHelper::Install is the most important method here.
mobility/helper/mobility-helper.h:   * position of every node initialized during MobilityModel::Install.
mobility/helper/mobility-helper.h:   * Calls to MobilityHelper::Install will create an instance of a matching 
mobility/helper/mobility-helper.h:   * has already been aggregated (usually by a call to Install).
mobility/helper/mobility-helper.h:   * If this stack is not empty when MobilityHelper::Install
mobility/helper/mobility-helper.h:   * has already been aggregated (usually by a call to Install).
mobility/helper/mobility-helper.h:   * If this stack is not empty when MobilityHelper::Install
mobility/helper/mobility-helper.h:  void Install (Ptr<Node> node) const;
mobility/helper/mobility-helper.h:  void Install (std::string nodeName) const;
mobility/helper/mobility-helper.h:  void Install (NodeContainer container) const;
mobility/helper/mobility-helper.h:   * Perform the work of MobilityHelper::Install on _all_ nodes which
mobility/helper/mobility-helper.h:  void InstallAll (void);
mobility/helper/mobility-helper.h:   * streams (possibly zero) that have been assigned. The Install() 
mobility/helper/ns2-mobility-helper.h:  void Install (void) const;
mobility/helper/ns2-mobility-helper.h:  void Install (T begin, T end) const;
mobility/helper/ns2-mobility-helper.h:Ns2MobilityHelper::Install (T begin, T end) const
mobility/bindings/modulegen__gcc_ILP32.py:    ## mobility-helper.h (module 'mobility'): void ns3::MobilityHelper::Install(ns3::Ptr<ns3::Node> node) const [member function]
mobility/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
mobility/bindings/modulegen__gcc_ILP32.py:    ## mobility-helper.h (module 'mobility'): void ns3::MobilityHelper::Install(std::string nodeName) const [member function]
mobility/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
mobility/bindings/modulegen__gcc_ILP32.py:    ## mobility-helper.h (module 'mobility'): void ns3::MobilityHelper::Install(ns3::NodeContainer container) const [member function]
mobility/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
mobility/bindings/modulegen__gcc_ILP32.py:    ## mobility-helper.h (module 'mobility'): void ns3::MobilityHelper::InstallAll() [member function]
mobility/bindings/modulegen__gcc_ILP32.py:    cls.add_method('InstallAll', 
mobility/bindings/modulegen__gcc_ILP32.py:    ## ns2-mobility-helper.h (module 'mobility'): void ns3::Ns2MobilityHelper::Install() const [member function]
mobility/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
mobility/bindings/modulegen__gcc_LP64.py:    ## mobility-helper.h (module 'mobility'): void ns3::MobilityHelper::Install(ns3::Ptr<ns3::Node> node) const [member function]
mobility/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
mobility/bindings/modulegen__gcc_LP64.py:    ## mobility-helper.h (module 'mobility'): void ns3::MobilityHelper::Install(std::string nodeName) const [member function]
mobility/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
mobility/bindings/modulegen__gcc_LP64.py:    ## mobility-helper.h (module 'mobility'): void ns3::MobilityHelper::Install(ns3::NodeContainer container) const [member function]
mobility/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
mobility/bindings/modulegen__gcc_LP64.py:    ## mobility-helper.h (module 'mobility'): void ns3::MobilityHelper::InstallAll() [member function]
mobility/bindings/modulegen__gcc_LP64.py:    cls.add_method('InstallAll', 
mobility/bindings/modulegen__gcc_LP64.py:    ## ns2-mobility-helper.h (module 'mobility'): void ns3::Ns2MobilityHelper::Install() const [member function]
mobility/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
mobility/doc/mobility.rst:  - `Installation instructions <http://www.nsnam.org/wiki/HOWTO_use_ns-3_with_BonnMotion_mobility_generator_and_analysis_tool>`_ and
mobility/doc/mobility.rst:  mobility.Install (wifiStaNodes);
mobility/doc/mobility.rst:- the Install() method of Ns2MobilityHelper to set mobility to nodes. At this moment, the file is read line by line, and the movement is scheduled in the simulator.
mobility/doc/mobility.rst:  mobility.Install (wifiStaNodes);
mobility/doc/mobility.rst:If AssignStreams is called before Install, it will not have any effect.
point-to-point/helper/point-to-point-helper.cc:PointToPointHelper::Install (NodeContainer c)
point-to-point/helper/point-to-point-helper.cc:  return Install (c.Get (0), c.Get (1));
point-to-point/helper/point-to-point-helper.cc:PointToPointHelper::Install (Ptr<Node> a, Ptr<Node> b)
point-to-point/helper/point-to-point-helper.cc:PointToPointHelper::Install (Ptr<Node> a, std::string bName)
point-to-point/helper/point-to-point-helper.cc:  return Install (a, b);
point-to-point/helper/point-to-point-helper.cc:PointToPointHelper::Install (std::string aName, Ptr<Node> b)
point-to-point/helper/point-to-point-helper.cc:  return Install (a, b);
point-to-point/helper/point-to-point-helper.cc:PointToPointHelper::Install (std::string aName, std::string bName)
point-to-point/helper/point-to-point-helper.cc:  return Install (a, b);
point-to-point/helper/point-to-point-helper.h:   * PointToPointNetDevice created through PointToPointHelper::Install.
point-to-point/helper/point-to-point-helper.h:   * by PointToPointHelper::Install
point-to-point/helper/point-to-point-helper.h:   * by PointToPointHelper::Install
point-to-point/helper/point-to-point-helper.h:  NetDeviceContainer Install (NodeContainer c);
point-to-point/helper/point-to-point-helper.h:  NetDeviceContainer Install (Ptr<Node> a, Ptr<Node> b);
point-to-point/helper/point-to-point-helper.h:  NetDeviceContainer Install (Ptr<Node> a, std::string bName);
point-to-point/helper/point-to-point-helper.h:  NetDeviceContainer Install (std::string aName, Ptr<Node> b);
point-to-point/helper/point-to-point-helper.h:  NetDeviceContainer Install (std::string aNode, std::string bNode);
point-to-point/bindings/modulegen__gcc_ILP32.py:    ## point-to-point-helper.h (module 'point-to-point'): ns3::NetDeviceContainer ns3::PointToPointHelper::Install(ns3::NodeContainer c) [member function]
point-to-point/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
point-to-point/bindings/modulegen__gcc_ILP32.py:    ## point-to-point-helper.h (module 'point-to-point'): ns3::NetDeviceContainer ns3::PointToPointHelper::Install(ns3::Ptr<ns3::Node> a, ns3::Ptr<ns3::Node> b) [member function]
point-to-point/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
point-to-point/bindings/modulegen__gcc_ILP32.py:    ## point-to-point-helper.h (module 'point-to-point'): ns3::NetDeviceContainer ns3::PointToPointHelper::Install(ns3::Ptr<ns3::Node> a, std::string bName) [member function]
point-to-point/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
point-to-point/bindings/modulegen__gcc_ILP32.py:    ## point-to-point-helper.h (module 'point-to-point'): ns3::NetDeviceContainer ns3::PointToPointHelper::Install(std::string aName, ns3::Ptr<ns3::Node> b) [member function]
point-to-point/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
point-to-point/bindings/modulegen__gcc_ILP32.py:    ## point-to-point-helper.h (module 'point-to-point'): ns3::NetDeviceContainer ns3::PointToPointHelper::Install(std::string aNode, std::string bNode) [member function]
point-to-point/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
point-to-point/bindings/modulegen__gcc_LP64.py:    ## point-to-point-helper.h (module 'point-to-point'): ns3::NetDeviceContainer ns3::PointToPointHelper::Install(ns3::NodeContainer c) [member function]
point-to-point/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
point-to-point/bindings/modulegen__gcc_LP64.py:    ## point-to-point-helper.h (module 'point-to-point'): ns3::NetDeviceContainer ns3::PointToPointHelper::Install(ns3::Ptr<ns3::Node> a, ns3::Ptr<ns3::Node> b) [member function]
point-to-point/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
point-to-point/bindings/modulegen__gcc_LP64.py:    ## point-to-point-helper.h (module 'point-to-point'): ns3::NetDeviceContainer ns3::PointToPointHelper::Install(ns3::Ptr<ns3::Node> a, std::string bName) [member function]
point-to-point/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
point-to-point/bindings/modulegen__gcc_LP64.py:    ## point-to-point-helper.h (module 'point-to-point'): ns3::NetDeviceContainer ns3::PointToPointHelper::Install(std::string aName, ns3::Ptr<ns3::Node> b) [member function]
point-to-point/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
point-to-point/bindings/modulegen__gcc_LP64.py:    ## point-to-point-helper.h (module 'point-to-point'): ns3::NetDeviceContainer ns3::PointToPointHelper::Install(std::string aNode, std::string bNode) [member function]
point-to-point/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
point-to-point/doc/point-to-point.rst:  NetDeviceContainer devices = pointToPoint.Install (nodes);
flow-monitor/examples/wifi-olsr-flowmon.py:            internet.Install(ns.network.NodeContainer(node))
flow-monitor/examples/wifi-olsr-flowmon.py:            devices = wifi.Install(wifiPhy, wifiMac, node)
flow-monitor/examples/wifi-olsr-flowmon.py:        app = onOffHelper.Install(ns.network.NodeContainer(node))
flow-monitor/examples/wifi-olsr-flowmon.py:    monitor = flowmon_helper.InstallAll()
flow-monitor/helper/flow-monitor-helper.h:  Ptr<FlowMonitor> Install (NodeContainer nodes);
flow-monitor/helper/flow-monitor-helper.h:  Ptr<FlowMonitor> Install (Ptr<Node> node);
flow-monitor/helper/flow-monitor-helper.h:  Ptr<FlowMonitor> InstallAll ();
flow-monitor/helper/flow-monitor-helper.h:   * \brief Retrieve the FlowMonitor object created by the Install* methods
flow-monitor/helper/flow-monitor-helper.h:   * \brief Retrieve the FlowClassifier object for IPv4 created by the Install* methods
flow-monitor/helper/flow-monitor-helper.h:   * \brief Retrieve the FlowClassifier object for IPv6 created by the Install* methods
flow-monitor/helper/flow-monitor-helper.cc:FlowMonitorHelper::Install (Ptr<Node> node)
flow-monitor/helper/flow-monitor-helper.cc:FlowMonitorHelper::Install (NodeContainer nodes)
flow-monitor/helper/flow-monitor-helper.cc:          Install (node);
flow-monitor/helper/flow-monitor-helper.cc:FlowMonitorHelper::InstallAll ()
flow-monitor/helper/flow-monitor-helper.cc:          Install (node);
flow-monitor/bindings/modulegen__gcc_ILP32.py:    ## flow-monitor-helper.h (module 'flow-monitor'): ns3::Ptr<ns3::FlowMonitor> ns3::FlowMonitorHelper::Install(ns3::NodeContainer nodes) [member function]
flow-monitor/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
flow-monitor/bindings/modulegen__gcc_ILP32.py:    ## flow-monitor-helper.h (module 'flow-monitor'): ns3::Ptr<ns3::FlowMonitor> ns3::FlowMonitorHelper::Install(ns3::Ptr<ns3::Node> node) [member function]
flow-monitor/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
flow-monitor/bindings/modulegen__gcc_ILP32.py:    ## flow-monitor-helper.h (module 'flow-monitor'): ns3::Ptr<ns3::FlowMonitor> ns3::FlowMonitorHelper::InstallAll() [member function]
flow-monitor/bindings/modulegen__gcc_ILP32.py:    cls.add_method('InstallAll', 
flow-monitor/bindings/modulegen__gcc_LP64.py:    ## flow-monitor-helper.h (module 'flow-monitor'): ns3::Ptr<ns3::FlowMonitor> ns3::FlowMonitorHelper::Install(ns3::NodeContainer nodes) [member function]
flow-monitor/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
flow-monitor/bindings/modulegen__gcc_LP64.py:    ## flow-monitor-helper.h (module 'flow-monitor'): ns3::Ptr<ns3::FlowMonitor> ns3::FlowMonitorHelper::Install(ns3::Ptr<ns3::Node> node) [member function]
flow-monitor/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
flow-monitor/bindings/modulegen__gcc_LP64.py:    ## flow-monitor-helper.h (module 'flow-monitor'): ns3::Ptr<ns3::FlowMonitor> ns3::FlowMonitorHelper::InstallAll() [member function]
flow-monitor/bindings/modulegen__gcc_LP64.py:    cls.add_method('InstallAll', 
flow-monitor/doc/flow-monitor.rst:  flowMonitor = flowHelper.InstallAll();
lte/model/lte-enb-rrc.h:   * `LteHelper::InstallEnbDevice` (i.e. before the simulation starts).
lte/model/lte-anr.h: * taken care by LteHelper::InstallEnbDevice.
lte/model/lte-handover-algorithm.h: * taken care by LteHelper::InstallEnbDevice.
lte/model/a3-rsrp-handover-algorithm.h: *     NetDeviceContainer enbLteDevs = lteHelper->InstallEnbDevice (enbNodes);
lte/model/a3-rsrp-handover-algorithm.h: *       LteHelper::InstallEnbDevice does not have any effect to the devices
lte/model/a2-a4-rsrq-handover-algorithm.h: *     NetDeviceContainer enbLteDevs = lteHelper->InstallEnbDevice (enbNodes);
lte/model/a2-a4-rsrq-handover-algorithm.h: *       LteHelper::InstallEnbDevice does not have any effect to the devices
lte/test/lte-test-pss-ff-mac-scheduler.cc:  internet.Install (remoteHostContainer);
lte/test/lte-test-pss-ff-mac-scheduler.cc:  NetDeviceContainer internetDevices = p2ph.Install (pgw, remoteHost);
lte/test/lte-test-pss-ff-mac-scheduler.cc:  // Install Mobility Model
lte/test/lte-test-pss-ff-mac-scheduler.cc:  mobility.Install (enbNodes);
lte/test/lte-test-pss-ff-mac-scheduler.cc:  mobility.Install (ueNodes);
lte/test/lte-test-pss-ff-mac-scheduler.cc:  enbDevs = lteHelper->InstallEnbDevice (enbNodes);
lte/test/lte-test-pss-ff-mac-scheduler.cc:  ueDevs = lteHelper->InstallUeDevice (ueNodes);
lte/test/lte-test-pss-ff-mac-scheduler.cc:  // Install the IP stack on the UEs
lte/test/lte-test-pss-ff-mac-scheduler.cc:  internet.Install (ueNodes);
lte/test/lte-test-pss-ff-mac-scheduler.cc:  // Install downlind and uplink applications
lte/test/lte-test-pss-ff-mac-scheduler.cc:      serverApps.Add (dlPacketSinkHelper.Install (ueNodes.Get (u))); // receive packets from remotehost
lte/test/lte-test-pss-ff-mac-scheduler.cc:      serverApps.Add (ulPacketSinkHelper.Install (remoteHost));  // receive packets from UEs
lte/test/lte-test-pss-ff-mac-scheduler.cc:      clientApps.Add (dlClient.Install (remoteHost));
lte/test/lte-test-pss-ff-mac-scheduler.cc:      clientApps.Add (ulClient.Install (ueNodes.Get (u)));
lte/test/lte-test-pss-ff-mac-scheduler.cc:  internet.Install (remoteHostContainer);
lte/test/lte-test-pss-ff-mac-scheduler.cc:  NetDeviceContainer internetDevices = p2ph.Install (pgw, remoteHost);
lte/test/lte-test-pss-ff-mac-scheduler.cc:  // Install Mobility Model
lte/test/lte-test-pss-ff-mac-scheduler.cc:  mobility.Install (enbNodes);
lte/test/lte-test-pss-ff-mac-scheduler.cc:  mobility.Install (ueNodes);
lte/test/lte-test-pss-ff-mac-scheduler.cc:  enbDevs = lteHelper->InstallEnbDevice (enbNodes);
lte/test/lte-test-pss-ff-mac-scheduler.cc:  ueDevs = lteHelper->InstallUeDevice (ueNodes);
lte/test/lte-test-pss-ff-mac-scheduler.cc:  // Install the IP stack on the UEs
lte/test/lte-test-pss-ff-mac-scheduler.cc:  internet.Install (ueNodes);
lte/test/lte-test-pss-ff-mac-scheduler.cc:  // Install downlind and uplink applications
lte/test/lte-test-pss-ff-mac-scheduler.cc:      serverApps.Add (dlPacketSinkHelper.Install (ueNodes.Get (u))); // receive packets from remotehost
lte/test/lte-test-pss-ff-mac-scheduler.cc:      serverApps.Add (ulPacketSinkHelper.Install (remoteHost));  // receive packets from UEs
lte/test/lte-test-pss-ff-mac-scheduler.cc:      clientApps.Add (dlClient.Install (remoteHost));
lte/test/lte-test-pss-ff-mac-scheduler.cc:      clientApps.Add (ulClient.Install (ueNodes.Get (u)));
lte/test/lte-test-mimo.cc:  // Install Mobility Model
lte/test/lte-test-mimo.cc:  mobility.Install (enbNodes);
lte/test/lte-test-mimo.cc:  BuildingsHelper::Install (enbNodes);
lte/test/lte-test-mimo.cc:  mobility.Install (ueNodes);
lte/test/lte-test-mimo.cc:  BuildingsHelper::Install (ueNodes);
lte/test/lte-test-mimo.cc:  enbDevs = lteHelper->InstallEnbDevice (enbNodes);
lte/test/lte-test-mimo.cc:  ueDevs = lteHelper->InstallUeDevice (ueNodes);
lte/test/lte-test-pathloss-model.cc:  // Install Mobility Model
lte/test/lte-test-pathloss-model.cc:  mobility.Install (allNodes);
lte/test/lte-test-pathloss-model.cc:  BuildingsHelper::Install (allNodes);
lte/test/lte-test-pathloss-model.cc:  enbDevs = lteHelper->InstallEnbDevice (enbNodes);
lte/test/lte-test-pathloss-model.cc:  ueDevs = lteHelper->InstallUeDevice (ueNodes);
lte/test/epc-test-s1u-downlink.cc:  internet.Install (remoteHostContainer);
lte/test/epc-test-s1u-downlink.cc:  NetDeviceContainer internetDevices = p2ph.Install (pgw, remoteHost);  
lte/test/epc-test-s1u-downlink.cc:      NetDeviceContainer cellDevices = csmaCell.Install (cell);
lte/test/epc-test-s1u-downlink.cc:      internet.Install (ues);
lte/test/epc-test-s1u-downlink.cc:          ApplicationContainer apps = packetSinkHelper.Install (ue);
lte/test/epc-test-s1u-downlink.cc:          apps = client.Install (remoteHost);
lte/test/lte-test-fdbet-ff-mac-scheduler.cc:  // Install Mobility Model
lte/test/lte-test-fdbet-ff-mac-scheduler.cc:  mobility.Install (enbNodes);
lte/test/lte-test-fdbet-ff-mac-scheduler.cc:  mobility.Install (ueNodes);
lte/test/lte-test-fdbet-ff-mac-scheduler.cc:  enbDevs = lteHelper->InstallEnbDevice (enbNodes);
lte/test/lte-test-fdbet-ff-mac-scheduler.cc:  ueDevs = lteHelper->InstallUeDevice (ueNodes);
lte/test/lte-test-fdbet-ff-mac-scheduler.cc:  // Install Mobility Model
lte/test/lte-test-fdbet-ff-mac-scheduler.cc:  mobility.Install (enbNodes);
lte/test/lte-test-fdbet-ff-mac-scheduler.cc:  mobility.Install (ueNodes);
lte/test/lte-test-fdbet-ff-mac-scheduler.cc:  enbDevs = lteHelper->InstallEnbDevice (enbNodes);
lte/test/lte-test-fdbet-ff-mac-scheduler.cc:  ueDevs = lteHelper->InstallUeDevice (ueNodes);
lte/test/lte-test-tdbet-ff-mac-scheduler.cc:  // Install Mobility Model
lte/test/lte-test-tdbet-ff-mac-scheduler.cc:  mobility.Install (enbNodes);
lte/test/lte-test-tdbet-ff-mac-scheduler.cc:  mobility.Install (ueNodes);
lte/test/lte-test-tdbet-ff-mac-scheduler.cc:  enbDevs = lteHelper->InstallEnbDevice (enbNodes);
lte/test/lte-test-tdbet-ff-mac-scheduler.cc:  ueDevs = lteHelper->InstallUeDevice (ueNodes);
lte/test/lte-test-tdbet-ff-mac-scheduler.cc:  // Install Mobility Model
lte/test/lte-test-tdbet-ff-mac-scheduler.cc:  mobility.Install (enbNodes);
lte/test/lte-test-tdbet-ff-mac-scheduler.cc:  mobility.Install (ueNodes);
lte/test/lte-test-tdbet-ff-mac-scheduler.cc:  enbDevs = lteHelper->InstallEnbDevice (enbNodes);
lte/test/lte-test-tdbet-ff-mac-scheduler.cc:  ueDevs = lteHelper->InstallUeDevice (ueNodes);
lte/test/test-lte-epc-e2e-data.cc:  internet.Install (remoteHostContainer);
lte/test/test-lte-epc-e2e-data.cc:  NetDeviceContainer internetDevices = p2ph.Install (pgw, remoteHost);  
lte/test/test-lte-epc-e2e-data.cc:  enbMobility.Install (enbs);
lte/test/test-lte-epc-e2e-data.cc:  NetDeviceContainer enbLteDevs = lteHelper->InstallEnbDevice (enbs);
lte/test/test-lte-epc-e2e-data.cc:      ueMobility.Install (ues);
lte/test/test-lte-epc-e2e-data.cc:      NetDeviceContainer ueLteDevs = lteHelper->InstallUeDevice (ues);
lte/test/test-lte-epc-e2e-data.cc:      internet.Install (ues);
lte/test/test-lte-epc-e2e-data.cc:                ApplicationContainer apps = packetSinkHelper.Install (ue);
lte/test/test-lte-epc-e2e-data.cc:                apps = client.Install (remoteHost);
lte/test/test-lte-epc-e2e-data.cc:                ApplicationContainer apps = packetSinkHelper.Install (remoteHost);
lte/test/test-lte-epc-e2e-data.cc:                apps = client.Install (ue);
lte/test/epc-test-s1u-uplink.cc:  internet.Install (remoteHostContainer);
lte/test/epc-test-s1u-uplink.cc:  NetDeviceContainer internetDevices = p2ph.Install (pgw, remoteHost);  
lte/test/epc-test-s1u-uplink.cc:      NetDeviceContainer cellDevices = csmaCell.Install (cell);
lte/test/epc-test-s1u-uplink.cc:      internet.Install (ues);
lte/test/epc-test-s1u-uplink.cc:          ApplicationContainer sinkApp = packetSinkHelper.Install (remoteHost);
lte/test/lte-test-phy-error-model.cc:  // Install Mobility Model
lte/test/lte-test-phy-error-model.cc:  mobility.Install (enbNodes);
lte/test/lte-test-phy-error-model.cc:  BuildingsHelper::Install (enbNodes);
lte/test/lte-test-phy-error-model.cc:  mobility.Install (ueNodes);
lte/test/lte-test-phy-error-model.cc:  BuildingsHelper::Install (ueNodes);
lte/test/lte-test-phy-error-model.cc:  enbDevs = lena->InstallEnbDevice (enbNodes);
lte/test/lte-test-phy-error-model.cc:  ueDevs = lena->InstallUeDevice (ueNodes);
lte/test/lte-test-phy-error-model.cc:  // Install Mobility Model
lte/test/lte-test-phy-error-model.cc:  mobility.Install (enbNodes);
lte/test/lte-test-phy-error-model.cc:  BuildingsHelper::Install (enbNodes);
lte/test/lte-test-phy-error-model.cc:  mobility.Install (ueNodes);
lte/test/lte-test-phy-error-model.cc:  BuildingsHelper::Install (ueNodes);
lte/test/lte-test-phy-error-model.cc:  enbDevs = lena->InstallEnbDevice (enbNodes);
lte/test/lte-test-phy-error-model.cc:  ueDevs = lena->InstallUeDevice (ueNodes);
lte/test/test-lte-rrc.cc:  mobility.Install (enbNodes);
lte/test/test-lte-rrc.cc:  mobility.Install (ueNodes);
lte/test/test-lte-rrc.cc:  enbDevs = m_lteHelper->InstallEnbDevice (enbNodes);
lte/test/test-lte-rrc.cc:  ueDevs = m_lteHelper->InstallUeDevice (ueNodes);
lte/test/lte-simple-helper.cc:LteSimpleHelper::InstallEnbDevice (NodeContainer c)
lte/test/lte-simple-helper.cc:      Ptr<NetDevice> device = InstallSingleEnbDevice (node);
lte/test/lte-simple-helper.cc:LteSimpleHelper::InstallUeDevice (NodeContainer c)
lte/test/lte-simple-helper.cc:      Ptr<NetDevice> device = InstallSingleUeDevice (node);
lte/test/lte-simple-helper.cc:LteSimpleHelper::InstallSingleEnbDevice (Ptr<Node> n)
lte/test/lte-simple-helper.cc:LteSimpleHelper::InstallSingleUeDevice (Ptr<Node> n)
lte/test/lte-test-cqa-ff-mac-scheduler.cc:  internet.Install (remoteHostContainer);
lte/test/lte-test-cqa-ff-mac-scheduler.cc:  NetDeviceContainer internetDevices = p2ph.Install (pgw, remoteHost);
lte/test/lte-test-cqa-ff-mac-scheduler.cc:  // Install Mobility Model
lte/test/lte-test-cqa-ff-mac-scheduler.cc:  mobility.Install (enbNodes);
lte/test/lte-test-cqa-ff-mac-scheduler.cc:  mobility.Install (ueNodes);
lte/test/lte-test-cqa-ff-mac-scheduler.cc:  enbDevs = lteHelper->InstallEnbDevice (enbNodes);
lte/test/lte-test-cqa-ff-mac-scheduler.cc:  ueDevs = lteHelper->InstallUeDevice (ueNodes);
lte/test/lte-test-cqa-ff-mac-scheduler.cc:  // Install the IP stack on the UEs
lte/test/lte-test-cqa-ff-mac-scheduler.cc:  internet.Install (ueNodes);
lte/test/lte-test-cqa-ff-mac-scheduler.cc:  // Install downlind and uplink applications
lte/test/lte-test-cqa-ff-mac-scheduler.cc:      serverApps.Add (dlPacketSinkHelper.Install (ueNodes.Get (u))); // receive packets from remotehost
lte/test/lte-test-cqa-ff-mac-scheduler.cc:      serverApps.Add (ulPacketSinkHelper.Install (remoteHost));  // receive packets from UEs
lte/test/lte-test-cqa-ff-mac-scheduler.cc:      clientApps.Add (dlClient.Install (remoteHost));
lte/test/lte-test-cqa-ff-mac-scheduler.cc:      clientApps.Add (ulClient.Install (ueNodes.Get (u)));
lte/test/lte-test-cqa-ff-mac-scheduler.cc:  internet.Install (remoteHostContainer);
lte/test/lte-test-cqa-ff-mac-scheduler.cc:  NetDeviceContainer internetDevices = p2ph.Install (pgw, remoteHost);
lte/test/lte-test-cqa-ff-mac-scheduler.cc:  // Install Mobility Model
lte/test/lte-test-cqa-ff-mac-scheduler.cc:  mobility.Install (enbNodes);
lte/test/lte-test-cqa-ff-mac-scheduler.cc:  mobility.Install (ueNodes);
lte/test/lte-test-cqa-ff-mac-scheduler.cc:  enbDevs = lteHelper->InstallEnbDevice (enbNodes);
lte/test/lte-test-cqa-ff-mac-scheduler.cc:  ueDevs = lteHelper->InstallUeDevice (ueNodes);
lte/test/lte-test-cqa-ff-mac-scheduler.cc:  // Install the IP stack on the UEs
lte/test/lte-test-cqa-ff-mac-scheduler.cc:  internet.Install (ueNodes);
lte/test/lte-test-cqa-ff-mac-scheduler.cc:  // Install downlind and uplink applications
lte/test/lte-test-cqa-ff-mac-scheduler.cc:      serverApps.Add (dlPacketSinkHelper.Install (ueNodes.Get (u))); // receive packets from remotehost
lte/test/lte-test-cqa-ff-mac-scheduler.cc:      serverApps.Add (ulPacketSinkHelper.Install (remoteHost));  // receive packets from UEs
lte/test/lte-test-cqa-ff-mac-scheduler.cc:      clientApps.Add (dlClient.Install (remoteHost));
lte/test/lte-test-cqa-ff-mac-scheduler.cc:      clientApps.Add (ulClient.Install (ueNodes.Get (u)));
lte/test/lte-test-pf-ff-mac-scheduler.cc:  // Install Mobility Model
lte/test/lte-test-pf-ff-mac-scheduler.cc:  mobility.Install (enbNodes);
lte/test/lte-test-pf-ff-mac-scheduler.cc:  mobility.Install (ueNodes);
lte/test/lte-test-pf-ff-mac-scheduler.cc:  enbDevs = lteHelper->InstallEnbDevice (enbNodes);
lte/test/lte-test-pf-ff-mac-scheduler.cc:  ueDevs = lteHelper->InstallUeDevice (ueNodes);
lte/test/lte-test-pf-ff-mac-scheduler.cc:  // Install Mobility Model
lte/test/lte-test-pf-ff-mac-scheduler.cc:  mobility.Install (enbNodes);
lte/test/lte-test-pf-ff-mac-scheduler.cc:  mobility.Install (ueNodes);
lte/test/lte-test-pf-ff-mac-scheduler.cc:  enbDevs = lteHelper->InstallEnbDevice (enbNodes);
lte/test/lte-test-pf-ff-mac-scheduler.cc:  ueDevs = lteHelper->InstallUeDevice (ueNodes);
lte/test/test-lte-handover-delay.cc:  inetStackHelper.Install (remoteHosts);
lte/test/test-lte-handover-delay.cc:  NetDeviceContainer inetDevs = p2pHelper.Install (epcHelper->GetPgwNode (),
lte/test/test-lte-handover-delay.cc:  mobilityHelper.Install (enbNodes);
lte/test/test-lte-handover-delay.cc:  mobilityHelper.Install (ueNodes);
lte/test/test-lte-handover-delay.cc:  enbDevs = lteHelper->InstallEnbDevice (enbNodes);
lte/test/test-lte-handover-delay.cc:  ueDevs = lteHelper->InstallUeDevice (ueNodes);
lte/test/test-lte-handover-delay.cc:  inetStackHelper.Install(ueNodes);
lte/test/test-lte-x2-handover-measures.cc:  // Install Mobility Model in eNBs
lte/test/test-lte-x2-handover-measures.cc:  enbMobility.Install (enbNodes);
lte/test/test-lte-x2-handover-measures.cc:  // Install Mobility Model in UE
lte/test/test-lte-x2-handover-measures.cc:  ueMobility.Install (ueNodes);
lte/test/test-lte-x2-handover-measures.cc:  enbDevices = m_lteHelper->InstallEnbDevice (enbNodes);
lte/test/test-lte-x2-handover-measures.cc:  ueDevices = m_lteHelper->InstallUeDevice (ueNodes);
lte/test/test-lte-x2-handover-measures.cc:      internet.Install (remoteHostContainer);
lte/test/test-lte-x2-handover-measures.cc:      NetDeviceContainer internetDevices = p2ph.Install (pgw, remoteHost);
lte/test/test-lte-x2-handover-measures.cc:      // Install the IP stack on the UEs
lte/test/test-lte-x2-handover-measures.cc:      internet.Install (ueNodes);
lte/test/test-lte-x2-handover-measures.cc:      // Install and start applications on UEs and remote host
lte/test/test-lte-x2-handover-measures.cc:                      clientApps.Add (dlClientHelper.Install (remoteHost));
lte/test/test-lte-x2-handover-measures.cc:                      ApplicationContainer sinkContainer = dlPacketSinkHelper.Install (ue);
lte/test/test-lte-x2-handover-measures.cc:                      clientApps.Add (ulClientHelper.Install (ue));
lte/test/test-lte-x2-handover-measures.cc:                      ApplicationContainer sinkContainer = ulPacketSinkHelper.Install (remoteHost);
lte/test/test-lte-x2-handover-measures.cc:                      clientApps.Add (dlClientHelper.Install (remoteHost));
lte/test/test-lte-x2-handover-measures.cc:                      ApplicationContainer sinkContainer = dlPacketSinkHelper.Install (ue);
lte/test/test-lte-x2-handover-measures.cc:                      clientApps.Add (ulClientHelper.Install (ue));
lte/test/test-lte-x2-handover-measures.cc:                      ApplicationContainer sinkContainer = ulPacketSinkHelper.Install (remoteHost);
lte/test/lte-test-harq.cc:  // Install Mobility Model
lte/test/lte-test-harq.cc:  mobility.Install (enbNodes);
lte/test/lte-test-harq.cc:  BuildingsHelper::Install (enbNodes);
lte/test/lte-test-harq.cc:  mobility.Install (ueNodes);
lte/test/lte-test-harq.cc:  BuildingsHelper::Install (ueNodes);
lte/test/lte-test-harq.cc:  enbDevs = lena->InstallEnbDevice (enbNodes);
lte/test/lte-test-harq.cc:  ueDevs = lena->InstallUeDevice (ueNodes);
lte/test/lte-test-rr-ff-mac-scheduler.cc:  // Install Mobility Model
lte/test/lte-test-rr-ff-mac-scheduler.cc:  mobility.Install (enbNodes);
lte/test/lte-test-rr-ff-mac-scheduler.cc:  mobility.Install (ueNodes);
lte/test/lte-test-rr-ff-mac-scheduler.cc:  enbDevs = lteHelper->InstallEnbDevice (enbNodes);
lte/test/lte-test-rr-ff-mac-scheduler.cc:  ueDevs = lteHelper->InstallUeDevice (ueNodes);
lte/test/lte-test-interference.cc:  mobility.Install (allNodes);
lte/test/lte-test-interference.cc:  enbDevs = lteHelper->InstallEnbDevice (enbNodes);
lte/test/lte-test-interference.cc:  ueDevs1 = lteHelper->InstallUeDevice (ueNodes1);
lte/test/lte-test-interference.cc:  ueDevs2 = lteHelper->InstallUeDevice (ueNodes2);
lte/test/lte-test-tdmt-ff-mac-scheduler.cc:  // Install Mobility Model
lte/test/lte-test-tdmt-ff-mac-scheduler.cc:  mobility.Install (enbNodes);
lte/test/lte-test-tdmt-ff-mac-scheduler.cc:  mobility.Install (ueNodes);
lte/test/lte-test-tdmt-ff-mac-scheduler.cc:  enbDevs = lteHelper->InstallEnbDevice (enbNodes);
lte/test/lte-test-tdmt-ff-mac-scheduler.cc:  ueDevs = lteHelper->InstallUeDevice (ueNodes);
lte/test/lte-test-rlc-um-e2e.cc:  // Install LTE Devices to the nodes
lte/test/lte-test-rlc-um-e2e.cc:  NetDeviceContainer enbLteDevs = lteSimpleHelper->InstallEnbDevice (enbNodes);
lte/test/lte-test-rlc-um-e2e.cc:  NetDeviceContainer ueLteDevs = lteSimpleHelper->InstallUeDevice (ueNodes);
lte/test/lte-test-rlc-um-e2e.cc:  // Note: Just one eNB and UE are supported. Everything is done in InstallEnbDevice and InstallUeDevice
lte/test/test-lte-antenna.cc:  // Install Mobility Model
lte/test/test-lte-antenna.cc:  mobility.Install (allNodes);
lte/test/test-lte-antenna.cc:  enbDevs = lteHelper->InstallEnbDevice (enbNodes);
lte/test/test-lte-antenna.cc:  ueDevs = lteHelper->InstallUeDevice (ueNodes);
lte/test/lte-test-tdtbfq-ff-mac-scheduler.cc:  internet.Install (remoteHostContainer);
lte/test/lte-test-tdtbfq-ff-mac-scheduler.cc:  NetDeviceContainer internetDevices = p2ph.Install (pgw, remoteHost);
lte/test/lte-test-tdtbfq-ff-mac-scheduler.cc:  // Install Mobility Model
lte/test/lte-test-tdtbfq-ff-mac-scheduler.cc:  mobility.Install (enbNodes);
lte/test/lte-test-tdtbfq-ff-mac-scheduler.cc:  mobility.Install (ueNodes);
lte/test/lte-test-tdtbfq-ff-mac-scheduler.cc:  enbDevs = lteHelper->InstallEnbDevice (enbNodes);
lte/test/lte-test-tdtbfq-ff-mac-scheduler.cc:  ueDevs = lteHelper->InstallUeDevice (ueNodes);
lte/test/lte-test-tdtbfq-ff-mac-scheduler.cc:  // Install the IP stack on the UEs
lte/test/lte-test-tdtbfq-ff-mac-scheduler.cc:  internet.Install (ueNodes);
lte/test/lte-test-tdtbfq-ff-mac-scheduler.cc:  // Install downlind and uplink applications
lte/test/lte-test-tdtbfq-ff-mac-scheduler.cc:      serverApps.Add (dlPacketSinkHelper.Install (ueNodes.Get (u))); // receive packets from remotehost
lte/test/lte-test-tdtbfq-ff-mac-scheduler.cc:      serverApps.Add (ulPacketSinkHelper.Install (remoteHost));  // receive packets from UEs
lte/test/lte-test-tdtbfq-ff-mac-scheduler.cc:      clientApps.Add (dlClient.Install (remoteHost));
lte/test/lte-test-tdtbfq-ff-mac-scheduler.cc:      clientApps.Add (ulClient.Install (ueNodes.Get (u)));
lte/test/lte-test-tdtbfq-ff-mac-scheduler.cc:  internet.Install (remoteHostContainer);
lte/test/lte-test-tdtbfq-ff-mac-scheduler.cc:  NetDeviceContainer internetDevices = p2ph.Install (pgw, remoteHost);
lte/test/lte-test-tdtbfq-ff-mac-scheduler.cc:  // Install Mobility Model
lte/test/lte-test-tdtbfq-ff-mac-scheduler.cc:  mobility.Install (enbNodes);
lte/test/lte-test-tdtbfq-ff-mac-scheduler.cc:  mobility.Install (ueNodes);
lte/test/lte-test-tdtbfq-ff-mac-scheduler.cc:  enbDevs = lteHelper->InstallEnbDevice (enbNodes);
lte/test/lte-test-tdtbfq-ff-mac-scheduler.cc:  ueDevs = lteHelper->InstallUeDevice (ueNodes);
lte/test/lte-test-tdtbfq-ff-mac-scheduler.cc:  // Install the IP stack on the UEs
lte/test/lte-test-tdtbfq-ff-mac-scheduler.cc:  internet.Install (ueNodes);
lte/test/lte-test-tdtbfq-ff-mac-scheduler.cc:  // Install downlind and uplink applications
lte/test/lte-test-tdtbfq-ff-mac-scheduler.cc:      serverApps.Add (dlPacketSinkHelper.Install (ueNodes.Get (u))); // receive packets from remotehost
lte/test/lte-test-tdtbfq-ff-mac-scheduler.cc:      serverApps.Add (ulPacketSinkHelper.Install (remoteHost));  // receive packets from UEs
lte/test/lte-test-tdtbfq-ff-mac-scheduler.cc:      clientApps.Add (dlClient.Install (remoteHost));
lte/test/lte-test-tdtbfq-ff-mac-scheduler.cc:      clientApps.Add (ulClient.Install (ueNodes.Get (u)));
lte/test/test-lte-x2-handover.cc:  mobility.Install (enbNodes);  
lte/test/test-lte-x2-handover.cc:  mobility.Install (ueNodes);
lte/test/test-lte-x2-handover.cc:  enbDevices = m_lteHelper->InstallEnbDevice (enbNodes);
lte/test/test-lte-x2-handover.cc:  ueDevices = m_lteHelper->InstallUeDevice (ueNodes);
lte/test/test-lte-x2-handover.cc:      internet.Install (remoteHostContainer);
lte/test/test-lte-x2-handover.cc:      NetDeviceContainer internetDevices = p2ph.Install (pgw, remoteHost);
lte/test/test-lte-x2-handover.cc:      // Install the IP stack on the UEs      
lte/test/test-lte-x2-handover.cc:      internet.Install (ueNodes);
lte/test/test-lte-x2-handover.cc:      // Install and start applications on UEs and remote host
lte/test/test-lte-x2-handover.cc:                      clientApps.Add (dlClientHelper.Install (remoteHost));
lte/test/test-lte-x2-handover.cc:                      ApplicationContainer sinkContainer = dlPacketSinkHelper.Install (ue);
lte/test/test-lte-x2-handover.cc:                      clientApps.Add (ulClientHelper.Install (ue));
lte/test/test-lte-x2-handover.cc:                      ApplicationContainer sinkContainer = ulPacketSinkHelper.Install (remoteHost);
lte/test/test-lte-x2-handover.cc:                      clientApps.Add (dlClientHelper.Install (remoteHost));
lte/test/test-lte-x2-handover.cc:                      ApplicationContainer sinkContainer = dlPacketSinkHelper.Install (ue);
lte/test/test-lte-x2-handover.cc:                      clientApps.Add (ulClientHelper.Install (ue));
lte/test/test-lte-x2-handover.cc:                      ApplicationContainer sinkContainer = ulPacketSinkHelper.Install (remoteHost);
lte/test/lte-test-fdtbfq-ff-mac-scheduler.cc:  internet.Install (remoteHostContainer);
lte/test/lte-test-fdtbfq-ff-mac-scheduler.cc:  NetDeviceContainer internetDevices = p2ph.Install (pgw, remoteHost);
lte/test/lte-test-fdtbfq-ff-mac-scheduler.cc:  // Install Mobility Model
lte/test/lte-test-fdtbfq-ff-mac-scheduler.cc:  mobility.Install (enbNodes);
lte/test/lte-test-fdtbfq-ff-mac-scheduler.cc:  mobility.Install (ueNodes);
lte/test/lte-test-fdtbfq-ff-mac-scheduler.cc:  enbDevs = lteHelper->InstallEnbDevice (enbNodes);
lte/test/lte-test-fdtbfq-ff-mac-scheduler.cc:  ueDevs = lteHelper->InstallUeDevice (ueNodes);
lte/test/lte-test-fdtbfq-ff-mac-scheduler.cc:  // Install the IP stack on the UEs
lte/test/lte-test-fdtbfq-ff-mac-scheduler.cc:  internet.Install (ueNodes);
lte/test/lte-test-fdtbfq-ff-mac-scheduler.cc:  // Install downlind and uplink applications
lte/test/lte-test-fdtbfq-ff-mac-scheduler.cc:      serverApps.Add (dlPacketSinkHelper.Install (ueNodes.Get (u))); // receive packets from remotehost
lte/test/lte-test-fdtbfq-ff-mac-scheduler.cc:      serverApps.Add (ulPacketSinkHelper.Install (remoteHost));  // receive packets from UEs
lte/test/lte-test-fdtbfq-ff-mac-scheduler.cc:      clientApps.Add (dlClient.Install (remoteHost));
lte/test/lte-test-fdtbfq-ff-mac-scheduler.cc:      clientApps.Add (ulClient.Install (ueNodes.Get (u)));
lte/test/lte-test-fdtbfq-ff-mac-scheduler.cc:  internet.Install (remoteHostContainer);
lte/test/lte-test-fdtbfq-ff-mac-scheduler.cc:  NetDeviceContainer internetDevices = p2ph.Install (pgw, remoteHost);
lte/test/lte-test-fdtbfq-ff-mac-scheduler.cc:  // Install Mobility Model
lte/test/lte-test-fdtbfq-ff-mac-scheduler.cc:  mobility.Install (enbNodes);
lte/test/lte-test-fdtbfq-ff-mac-scheduler.cc:  mobility.Install (ueNodes);
lte/test/lte-test-fdtbfq-ff-mac-scheduler.cc:  enbDevs = lteHelper->InstallEnbDevice (enbNodes);
lte/test/lte-test-fdtbfq-ff-mac-scheduler.cc:  ueDevs = lteHelper->InstallUeDevice (ueNodes);
lte/test/lte-test-fdtbfq-ff-mac-scheduler.cc:  // Install the IP stack on the UEs
lte/test/lte-test-fdtbfq-ff-mac-scheduler.cc:  internet.Install (ueNodes);
lte/test/lte-test-fdtbfq-ff-mac-scheduler.cc:  // Install downlind and uplink applications
lte/test/lte-test-fdtbfq-ff-mac-scheduler.cc:      serverApps.Add (dlPacketSinkHelper.Install (ueNodes.Get (u))); // receive packets from remotehost
lte/test/lte-test-fdtbfq-ff-mac-scheduler.cc:      serverApps.Add (ulPacketSinkHelper.Install (remoteHost));  // receive packets from UEs
lte/test/lte-test-fdtbfq-ff-mac-scheduler.cc:      clientApps.Add (dlClient.Install (remoteHost));
lte/test/lte-test-fdtbfq-ff-mac-scheduler.cc:      clientApps.Add (ulClient.Install (ueNodes.Get (u)));
lte/test/lte-test-tta-ff-mac-scheduler.cc:  // Install Mobility Model
lte/test/lte-test-tta-ff-mac-scheduler.cc:  mobility.Install (enbNodes);
lte/test/lte-test-tta-ff-mac-scheduler.cc:  mobility.Install (ueNodes);
lte/test/lte-test-tta-ff-mac-scheduler.cc:  enbDevs = lteHelper->InstallEnbDevice (enbNodes);
lte/test/lte-test-tta-ff-mac-scheduler.cc:  ueDevs = lteHelper->InstallUeDevice (ueNodes);
lte/test/lte-test-fdmt-ff-mac-scheduler.cc:  // Install Mobility Model
lte/test/lte-test-fdmt-ff-mac-scheduler.cc:  mobility.Install (enbNodes);
lte/test/lte-test-fdmt-ff-mac-scheduler.cc:  mobility.Install (ueNodes);
lte/test/lte-test-fdmt-ff-mac-scheduler.cc:  enbDevs = lteHelper->InstallEnbDevice (enbNodes);
lte/test/lte-test-fdmt-ff-mac-scheduler.cc:  ueDevs = lteHelper->InstallUeDevice (ueNodes);
lte/test/lte-test-fading.cc:  // Install Mobility Model
lte/test/lte-test-fading.cc:  mobility.Install (enbNodes);
lte/test/lte-test-fading.cc:  mobility.Install (henbNodes);
lte/test/lte-test-fading.cc:  mobility.Install (ueNodes);
lte/test/lte-test-fading.cc:  mobility.Install (hueNodes);
lte/test/lte-test-fading.cc:  enbDevs = lteHelper->InstallEnbDevice (enbNodes);
lte/test/lte-test-fading.cc:  ueDevs = lteHelper->InstallUeDevice (ueNodes);
lte/test/lte-test-fading.cc:  henbDevs = lteHelper->InstallEnbDevice (henbNodes);
lte/test/lte-test-fading.cc:  hueDevs = lteHelper->InstallUeDevice (hueNodes);
lte/test/lte-simple-helper.h:  NetDeviceContainer InstallEnbDevice (NodeContainer c);
lte/test/lte-simple-helper.h:  NetDeviceContainer InstallUeDevice (NodeContainer c);
lte/test/lte-simple-helper.h:  Ptr<NetDevice> InstallSingleEnbDevice (Ptr<Node> n);
lte/test/lte-simple-helper.h:  Ptr<NetDevice> InstallSingleUeDevice (Ptr<Node> n);
lte/test/test-lte-handover-target.cc:  enbMobility.Install (enbNodes);
lte/test/test-lte-handover-target.cc:  ueMobility.Install (ueNodes);
lte/test/test-lte-handover-target.cc:  internet.Install (remoteHostContainer);
lte/test/test-lte-handover-target.cc:  NetDeviceContainer internetDevices = p2ph.Install (pgw, remoteHost);
lte/test/test-lte-handover-target.cc:  enbDevs = lteHelper->InstallEnbDevice (enbNodes);
lte/test/test-lte-handover-target.cc:  ueDevs = lteHelper->InstallUeDevice (ueNodes);
lte/test/test-lte-handover-target.cc:  // Install the IP stack on the UEs
lte/test/test-lte-handover-target.cc:  internet.Install (ueNodes);
lte/test/lte-test-rlc-am-e2e.cc:  // Install LTE Devices to the nodes
lte/test/lte-test-rlc-am-e2e.cc:  NetDeviceContainer enbLteDevs = lteSimpleHelper->InstallEnbDevice (enbNodes);
lte/test/lte-test-rlc-am-e2e.cc:  NetDeviceContainer ueLteDevs = lteSimpleHelper->InstallUeDevice (ueNodes);
lte/test/lte-test-rlc-am-e2e.cc:  // Note: Just one eNB and UE is supported. Everything is done in InstallEnbDevice and InstallUeDevice
lte/test/lte-test-link-adaptation.cc:  // Install Mobility Model
lte/test/lte-test-link-adaptation.cc:  mobility.Install (allNodes);
lte/test/lte-test-link-adaptation.cc:  enbDevs = lteHelper->InstallEnbDevice (enbNodes);
lte/test/lte-test-link-adaptation.cc:  ueDevs = lteHelper->InstallUeDevice (ueNodes);
lte/test/lte-test-ue-measurements.cc:  mobility.Install (allNodes);
lte/test/lte-test-ue-measurements.cc:  enbDevs = lteHelper->InstallEnbDevice (enbNodes);
lte/test/lte-test-ue-measurements.cc:  ueDevs1 = lteHelper->InstallUeDevice (ueNodes1);
lte/test/lte-test-ue-measurements.cc:  ueDevs2 = lteHelper->InstallUeDevice (ueNodes2);
lte/test/lte-test-ue-measurements.cc:  mobility.Install (enbNodes);
lte/test/lte-test-ue-measurements.cc:  mobility.Install (ueNodes);
lte/test/lte-test-ue-measurements.cc:  enbDevs = lteHelper->InstallEnbDevice (enbNodes);
lte/test/lte-test-ue-measurements.cc:  ueDevs = lteHelper->InstallUeDevice (ueNodes);
lte/test/lte-test-ue-measurements.cc:  mobility.Install (enbNodes);
lte/test/lte-test-ue-measurements.cc:  mobility.Install (ueNodes);
lte/test/lte-test-ue-measurements.cc:  enbDevs = lteHelper->InstallEnbDevice (enbNodes);
lte/test/lte-test-ue-measurements.cc:  ueDevs = lteHelper->InstallUeDevice (ueNodes);
lte/test/lte-test-ue-measurements.cc:  mobility.Install (enbNodes);
lte/test/lte-test-ue-measurements.cc:  mobility.Install (ueNodes);
lte/test/lte-test-ue-measurements.cc:  internet.Install (remoteHostContainer);
lte/test/lte-test-ue-measurements.cc:  NetDeviceContainer internetDevices = p2ph.Install (pgw, remoteHost);
lte/test/lte-test-ue-measurements.cc:  enbDevs = lteHelper->InstallEnbDevice (enbNodes);
lte/test/lte-test-ue-measurements.cc:  ueDevs = lteHelper->InstallUeDevice (ueNodes);
lte/test/lte-test-ue-measurements.cc:  // Install the IP stack on the UEs
lte/test/lte-test-ue-measurements.cc:  internet.Install (ueNodes);
lte/test/lte-test-cell-selection.cc:  mobility.Install (enbNodes);
lte/test/lte-test-cell-selection.cc:  mobility.Install (ueNodes);
lte/test/lte-test-cell-selection.cc:  enbDevs.Add (lteHelper->InstallEnbDevice (enbNodes.Get (0)));
lte/test/lte-test-cell-selection.cc:  enbDevs.Add (lteHelper->InstallEnbDevice (enbNodes.Get (1)));
lte/test/lte-test-cell-selection.cc:  enbDevs.Add (lteHelper->InstallEnbDevice (enbNodes.Get (2)));
lte/test/lte-test-cell-selection.cc:  enbDevs.Add (lteHelper->InstallEnbDevice (enbNodes.Get (3)));
lte/test/lte-test-cell-selection.cc:      NetDeviceContainer devs = lteHelper->InstallUeDevice (*itNode);
lte/test/lte-test-cell-selection.cc:      internet.Install (remoteHostContainer);
lte/test/lte-test-cell-selection.cc:      NetDeviceContainer internetDevices = p2ph.Install (pgw, remoteHost);
lte/test/lte-test-cell-selection.cc:      // Install the IP stack on the UEs
lte/test/lte-test-cell-selection.cc:      internet.Install (ueNodes);
lte/examples/lena-fading.cc:  // Install Mobility Model
lte/examples/lena-fading.cc:  mobility.Install (enbNodes);
lte/examples/lena-fading.cc:  BuildingsHelper::Install (enbNodes);
lte/examples/lena-fading.cc:  mobility.Install (ueNodes);
lte/examples/lena-fading.cc:  BuildingsHelper::Install (ueNodes);
lte/examples/lena-fading.cc:  enbDevs = lteHelper->InstallEnbDevice (enbNodes);
lte/examples/lena-fading.cc:  ueDevs = lteHelper->InstallUeDevice (ueNodes);
lte/examples/lena-rem-sector-antenna.cc:  mobility.Install (enbNodes);
lte/examples/lena-rem-sector-antenna.cc:  BuildingsHelper::Install (enbNodes);
lte/examples/lena-rem-sector-antenna.cc:  mobility.Install (ueNodes.at(plantedEnb));
lte/examples/lena-rem-sector-antenna.cc:      mobility.Install (ueNodes.at(plantedEnb));
lte/examples/lena-rem-sector-antenna.cc:  mobility.Install (enbNodes);
lte/examples/lena-rem-sector-antenna.cc:      mobility.Install (ueNodes.at(i));
lte/examples/lena-rem-sector-antenna.cc:      BuildingsHelper::Install (ueNodes.at(i));
lte/examples/lena-rem-sector-antenna.cc:  enbDevs = lteHelper->InstallEnbDevice (oneSectorNodes);
lte/examples/lena-rem-sector-antenna.cc:  enbDevs.Add ( lteHelper->InstallEnbDevice (threeSectorNodes.Get (0)));
lte/examples/lena-rem-sector-antenna.cc:  enbDevs.Add ( lteHelper->InstallEnbDevice (threeSectorNodes.Get (1)));
lte/examples/lena-rem-sector-antenna.cc:  enbDevs.Add ( lteHelper->InstallEnbDevice (threeSectorNodes.Get (2)));
lte/examples/lena-rem-sector-antenna.cc:      NetDeviceContainer ueDev = lteHelper->InstallUeDevice (ueNodes.at(i));
lte/examples/lena-rem-sector-antenna.cc:  remHelper->Install ();
lte/examples/lena-profiling.cc:              mobility.Install (ueNodes.at(plantedEnb));
lte/examples/lena-profiling.cc:      mobility.Install (enbNodes);
lte/examples/lena-profiling.cc:      BuildingsHelper::Install (enbNodes);
lte/examples/lena-profiling.cc:          mobility.Install (ueNodes.at(i));
lte/examples/lena-profiling.cc:          BuildingsHelper::Install (ueNodes.at(i));
lte/examples/lena-profiling.cc:      mobility.Install (enbNodes);
lte/examples/lena-profiling.cc:      BuildingsHelper::Install (enbNodes);
lte/examples/lena-profiling.cc:                  mobility.Install (ueNodes.at(plantedEnb));
lte/examples/lena-profiling.cc:                  BuildingsHelper::Install (ueNodes.at(plantedEnb));
lte/examples/lena-profiling.cc:  enbDevs = lteHelper->InstallEnbDevice (enbNodes);
lte/examples/lena-profiling.cc:      NetDeviceContainer ueDev = lteHelper->InstallUeDevice (ueNodes.at(i));
lte/examples/lena-pathloss-traces.cc:  enbMobility.Install (enbNodes);
lte/examples/lena-pathloss-traces.cc:  ue1mobility.Install (ueNodes1);
lte/examples/lena-pathloss-traces.cc:  ue2mobility.Install (ueNodes2);
lte/examples/lena-pathloss-traces.cc:  enbDevs = lteHelper->InstallEnbDevice (enbNodes);
lte/examples/lena-pathloss-traces.cc:  ueDevs1 = lteHelper->InstallUeDevice (ueNodes1);
lte/examples/lena-pathloss-traces.cc:  ueDevs2 = lteHelper->InstallUeDevice (ueNodes2);
lte/examples/lena-simple-epc.cc:  internet.Install (remoteHostContainer);
lte/examples/lena-simple-epc.cc:  NetDeviceContainer internetDevices = p2ph.Install (pgw, remoteHost);
lte/examples/lena-simple-epc.cc:  // Install Mobility Model
lte/examples/lena-simple-epc.cc:  mobility.Install(enbNodes);
lte/examples/lena-simple-epc.cc:  mobility.Install(ueNodes);
lte/examples/lena-simple-epc.cc:  // Install LTE Devices to the nodes
lte/examples/lena-simple-epc.cc:  NetDeviceContainer enbLteDevs = lteHelper->InstallEnbDevice (enbNodes);
lte/examples/lena-simple-epc.cc:  NetDeviceContainer ueLteDevs = lteHelper->InstallUeDevice (ueNodes);
lte/examples/lena-simple-epc.cc:  // Install the IP stack on the UEs
lte/examples/lena-simple-epc.cc:  internet.Install (ueNodes);
lte/examples/lena-simple-epc.cc:  // Install and start applications on UEs and remote host
lte/examples/lena-simple-epc.cc:      serverApps.Add (dlPacketSinkHelper.Install (ueNodes.Get(u)));
lte/examples/lena-simple-epc.cc:      serverApps.Add (ulPacketSinkHelper.Install (remoteHost));
lte/examples/lena-simple-epc.cc:      serverApps.Add (packetSinkHelper.Install (ueNodes.Get(u)));
lte/examples/lena-simple-epc.cc:      clientApps.Add (dlClient.Install (remoteHost));
lte/examples/lena-simple-epc.cc:      clientApps.Add (ulClient.Install (ueNodes.Get(u)));
lte/examples/lena-simple-epc.cc:          clientApps.Add (client.Install (ueNodes.Get(u+1)));
lte/examples/lena-simple-epc.cc:          clientApps.Add (client.Install (ueNodes.Get(0)));
lte/examples/lena-x2-handover-measures.cc:  internet.Install (remoteHostContainer);
lte/examples/lena-x2-handover-measures.cc:  NetDeviceContainer internetDevices = p2ph.Install (pgw, remoteHost);
lte/examples/lena-x2-handover-measures.cc:  // Install Mobility Model in eNB
lte/examples/lena-x2-handover-measures.cc:  enbMobility.Install (enbNodes);
lte/examples/lena-x2-handover-measures.cc:  // Install Mobility Model in UE
lte/examples/lena-x2-handover-measures.cc:  ueMobility.Install (ueNodes);
lte/examples/lena-x2-handover-measures.cc:  // Install LTE Devices in eNB and UEs
lte/examples/lena-x2-handover-measures.cc:  NetDeviceContainer enbLteDevs = lteHelper->InstallEnbDevice (enbNodes);
lte/examples/lena-x2-handover-measures.cc:  NetDeviceContainer ueLteDevs = lteHelper->InstallUeDevice (ueNodes);
lte/examples/lena-x2-handover-measures.cc:  // Install the IP stack on the UEs
lte/examples/lena-x2-handover-measures.cc:  internet.Install (ueNodes);
lte/examples/lena-x2-handover-measures.cc:  // Install and start applications on UEs and remote host
lte/examples/lena-x2-handover-measures.cc:          clientApps.Add (dlClientHelper.Install (remoteHost));
lte/examples/lena-x2-handover-measures.cc:          serverApps.Add (dlPacketSinkHelper.Install (ue));
lte/examples/lena-x2-handover-measures.cc:          clientApps.Add (ulClientHelper.Install (ue));
lte/examples/lena-x2-handover-measures.cc:          serverApps.Add (ulPacketSinkHelper.Install (remoteHost));
lte/examples/lena-rlc-traces.cc:  // Install Mobility Model
lte/examples/lena-rlc-traces.cc:  mobility.Install (enbNodes);
lte/examples/lena-rlc-traces.cc:  mobility.Install (ueNodes);
lte/examples/lena-rlc-traces.cc:  enbDevs = lteHelper->InstallEnbDevice (enbNodes);
lte/examples/lena-rlc-traces.cc:  ueDevs = lteHelper->InstallUeDevice (ueNodes);
lte/examples/lena-x2-handover.cc:  internet.Install (remoteHostContainer);
lte/examples/lena-x2-handover.cc:  NetDeviceContainer internetDevices = p2ph.Install (pgw, remoteHost);
lte/examples/lena-x2-handover.cc:  // Install Mobility Model
lte/examples/lena-x2-handover.cc:  mobility.Install (enbNodes);
lte/examples/lena-x2-handover.cc:  mobility.Install (ueNodes);
lte/examples/lena-x2-handover.cc:  // Install LTE Devices in eNB and UEs
lte/examples/lena-x2-handover.cc:  NetDeviceContainer enbLteDevs = lteHelper->InstallEnbDevice (enbNodes);
lte/examples/lena-x2-handover.cc:  NetDeviceContainer ueLteDevs = lteHelper->InstallUeDevice (ueNodes);
lte/examples/lena-x2-handover.cc:  // Install the IP stack on the UEs
lte/examples/lena-x2-handover.cc:  internet.Install (ueNodes);
lte/examples/lena-x2-handover.cc:  // Install and start applications on UEs and remote host
lte/examples/lena-x2-handover.cc:          clientApps.Add (dlClientHelper.Install (remoteHost));
lte/examples/lena-x2-handover.cc:          serverApps.Add (dlPacketSinkHelper.Install (ue));
lte/examples/lena-x2-handover.cc:          clientApps.Add (ulClientHelper.Install (ue));
lte/examples/lena-x2-handover.cc:          serverApps.Add (ulPacketSinkHelper.Install (remoteHost));
lte/examples/lena-intercell-interference.cc:  enbMobility.Install (enbNodes);
lte/examples/lena-intercell-interference.cc:  ue1mobility.Install (ueNodes1);
lte/examples/lena-intercell-interference.cc:  ue2mobility.Install (ueNodes2);
lte/examples/lena-intercell-interference.cc:  enbDevs = lteHelper->InstallEnbDevice (enbNodes);
lte/examples/lena-intercell-interference.cc:  ueDevs1 = lteHelper->InstallUeDevice (ueNodes1);
lte/examples/lena-intercell-interference.cc:  ueDevs2 = lteHelper->InstallUeDevice (ueNodes2);
lte/examples/lena-cqi-threshold.cc:  // Install Mobility Model
lte/examples/lena-cqi-threshold.cc:  mobility.Install (enbNodes);
lte/examples/lena-cqi-threshold.cc:  BuildingsHelper::Install (enbNodes);
lte/examples/lena-cqi-threshold.cc:  mobility.Install (ueNodes);
lte/examples/lena-cqi-threshold.cc:  BuildingsHelper::Install (ueNodes);
lte/examples/lena-cqi-threshold.cc:  enbDevs = lteHelper->InstallEnbDevice (enbNodes);
lte/examples/lena-cqi-threshold.cc:  ueDevs = lteHelper->InstallUeDevice (ueNodes);
lte/examples/lena-rem.cc:  // Install Mobility Model
lte/examples/lena-rem.cc:  mobility.Install (enbNodes);
lte/examples/lena-rem.cc:  BuildingsHelper::Install (enbNodes);
lte/examples/lena-rem.cc:  mobility.Install (ueNodes);
lte/examples/lena-rem.cc:  BuildingsHelper::Install (ueNodes);
lte/examples/lena-rem.cc:  enbDevs = lteHelper->InstallEnbDevice (enbNodes);
lte/examples/lena-rem.cc:  ueDevs = lteHelper->InstallUeDevice (ueNodes);
lte/examples/lena-rem.cc:  remHelper->Install ();
lte/examples/lena-simple.cc:  // Install Mobility Model
lte/examples/lena-simple.cc:  mobility.Install (enbNodes);
lte/examples/lena-simple.cc:  BuildingsHelper::Install (enbNodes);
lte/examples/lena-simple.cc:  mobility.Install (ueNodes);
lte/examples/lena-simple.cc:  BuildingsHelper::Install (ueNodes);
lte/examples/lena-simple.cc:  enbDevs = lteHelper->InstallEnbDevice (enbNodes);
lte/examples/lena-simple.cc:  ueDevs = lteHelper->InstallUeDevice (ueNodes);
lte/examples/lena-dual-stripe.cc:  mobility.Install (macroEnbs);
lte/examples/lena-dual-stripe.cc:  BuildingsHelper::Install (macroEnbs);
lte/examples/lena-dual-stripe.cc:  NetDeviceContainer macroEnbDevs = lteHexGridEnbTopologyHelper->SetPositionAndInstallEnbDevice (macroEnbs);
lte/examples/lena-dual-stripe.cc:  mobility.Install (homeEnbs);
lte/examples/lena-dual-stripe.cc:  BuildingsHelper::Install (homeEnbs);
lte/examples/lena-dual-stripe.cc:  NetDeviceContainer homeEnbDevs  = lteHelper->InstallEnbDevice (homeEnbs);
lte/examples/lena-dual-stripe.cc:  mobility.Install (homeUes);
lte/examples/lena-dual-stripe.cc:  BuildingsHelper::Install (homeUes);
lte/examples/lena-dual-stripe.cc:  NetDeviceContainer homeUeDevs = lteHelper->InstallUeDevice (homeUes);
lte/examples/lena-dual-stripe.cc:      mobility.Install (macroUes);
lte/examples/lena-dual-stripe.cc:      mobility.Install (macroUes);
lte/examples/lena-dual-stripe.cc:  BuildingsHelper::Install (macroUes);
lte/examples/lena-dual-stripe.cc:  NetDeviceContainer macroUeDevs = lteHelper->InstallUeDevice (macroUes);
lte/examples/lena-dual-stripe.cc:      internet.Install (remoteHostContainer);
lte/examples/lena-dual-stripe.cc:      NetDeviceContainer internetDevices = p2ph.Install (pgw, remoteHost);
lte/examples/lena-dual-stripe.cc:      // Install the IP stack on the UEs
lte/examples/lena-dual-stripe.cc:      internet.Install (ues);
lte/examples/lena-dual-stripe.cc:      // Install and start applications on UEs and remote host
lte/examples/lena-dual-stripe.cc:                      clientApps.Add (dlClientHelper.Install (remoteHost));
lte/examples/lena-dual-stripe.cc:                      serverApps.Add (dlPacketSinkHelper.Install (ue));
lte/examples/lena-dual-stripe.cc:                      clientApps.Add (ulClientHelper.Install (ue));
lte/examples/lena-dual-stripe.cc:                      serverApps.Add (ulPacketSinkHelper.Install (remoteHost));
lte/examples/lena-dual-stripe.cc:                      clientApps.Add (dlClientHelper.Install (remoteHost));
lte/examples/lena-dual-stripe.cc:                      serverApps.Add (dlPacketSinkHelper.Install (ue));
lte/examples/lena-dual-stripe.cc:                      clientApps.Add (ulClientHelper.Install (ue));
lte/examples/lena-dual-stripe.cc:                      serverApps.Add (ulPacketSinkHelper.Install (remoteHost));
lte/examples/lena-dual-stripe.cc:      remHelper->Install ();
lte/helper/lte-hex-grid-enb-topology-helper.h:  NetDeviceContainer SetPositionAndInstallEnbDevice (NodeContainer c);
lte/helper/radio-environment-map-helper.h:  void Install ();
lte/helper/radio-environment-map-helper.h:  void DelayedInstall ();
lte/helper/lte-hex-grid-enb-topology-helper.cc:LteHexGridEnbTopologyHelper::SetPositionAndInstallEnbDevice (NodeContainer c)
lte/helper/lte-hex-grid-enb-topology-helper.cc:      enbDevs.Add (m_lteHelper->InstallEnbDevice (node));
lte/helper/radio-environment-map-helper.cc:RadioEnvironmentMapHelper::Install ()
lte/helper/radio-environment-map-helper.cc:                       &RadioEnvironmentMapHelper::DelayedInstall,
lte/helper/radio-environment-map-helper.cc:RadioEnvironmentMapHelper::DelayedInstall ()
lte/helper/radio-environment-map-helper.cc:      p.bmm->AggregateObject (buildingInfo); // operation usually done by BuildingsHelper::Install
lte/helper/point-to-point-epc-helper.cc~:  internet.Install (m_sgwPgw);
lte/helper/point-to-point-epc-helper.cc~:  internet.Install (enb);
lte/helper/point-to-point-epc-helper.cc~:  NetDeviceContainer enbSgwDevices = p2ph.Install (enb, m_sgwPgw);
lte/helper/point-to-point-epc-helper.cc~:  //packetSocket.Install (enb); 
lte/helper/point-to-point-epc-helper.cc~:  NetDeviceContainer enbDevices = p2ph.Install (enb1, enb2);
lte/helper/lte-helper.cc:LteHelper::InstallEnbDevice (NodeContainer c)
lte/helper/lte-helper.cc:      Ptr<NetDevice> device = InstallSingleEnbDevice (node);
lte/helper/lte-helper.cc:LteHelper::InstallEnbDevice (NodeContainer c,std::string nodeType) 
lte/helper/lte-helper.cc:      Ptr<NetDevice> device = InstallSingleEnbDevice (node);
lte/helper/lte-helper.cc:cout<<"jin lte InstallEnbDevice.2.."<<endl;
lte/helper/lte-helper.cc:LteHelper::InstallUeDevice (NodeContainer c,std::string nodeType) 
lte/helper/lte-helper.cc:      Ptr<NetDevice> device = InstallSingleUeDevice (node);
lte/helper/lte-helper.cc:LteHelper::InstallUeDevice (NodeContainer c)
lte/helper/lte-helper.cc:      Ptr<NetDevice> device = InstallSingleUeDevice (node);
lte/helper/lte-helper.cc:LteHelper::InstallSingleEnbDevice (Ptr<Node> n)
lte/helper/lte-helper.cc:  NS_ASSERT_MSG (mm, "MobilityModel needs to be set on node before calling LteHelper::InstallUeDevice ()");
lte/helper/lte-helper.cc:cout <<"jin InstallSIngenbDevice: n="<<n<<"  dev->GetCellId ()="<<dev->GetCellId ()<<endl;
lte/helper/lte-helper.cc:cout<<"jin InstallSingle eNB device test2"<<endl;
lte/helper/lte-helper.cc:LteHelper::InstallSingleUeDevice (Ptr<Node> n)
lte/helper/lte-helper.cc:  NS_ASSERT_MSG (mm, "MobilityModel needs to be set on node before calling LteHelper::InstallUeDevice ()");
lte/helper/lte-helper.h:  NetDeviceContainer InstallEnbDevice (NodeContainer c);
lte/helper/lte-helper.h:  NetDeviceContainer InstallEnbDevice (NodeContainer c,std::string nodeType); 
lte/helper/lte-helper.h:  NetDeviceContainer InstallUeDevice (NodeContainer c);
lte/helper/lte-helper.h:  NetDeviceContainer InstallUeDevice (NodeContainer c,std::string nodeType); 
lte/helper/lte-helper.h:  * have been assigned. The Install() method should have previously been
lte/helper/lte-helper.h:  Ptr<NetDevice> InstallSingleEnbDevice (Ptr<Node> n);
lte/helper/lte-helper.h:  Ptr<NetDevice> InstallSingleUeDevice (Ptr<Node> n);
lte/helper/point-to-point-epc-helper.cc:  internet.Install (m_sgwPgw);
lte/helper/point-to-point-epc-helper.cc:  internet.Install (enb);
lte/helper/point-to-point-epc-helper.cc:  NetDeviceContainer enbSgwDevices = p2ph.Install (enb, m_sgwPgw);
lte/helper/point-to-point-epc-helper.cc:  //packetSocket.Install (enb); 
lte/helper/point-to-point-epc-helper.cc:  NetDeviceContainer enbDevices = p2ph.Install (enb1, enb2);
lte/helper/lte-helper.cc~:LteHelper::InstallEnbDevice (NodeContainer c)
lte/helper/lte-helper.cc~:      Ptr<NetDevice> device = InstallSingleEnbDevice (node);
lte/helper/lte-helper.cc~:LteHelper::InstallEnbDevice (NodeContainer c,std::string nodeType) 
lte/helper/lte-helper.cc~:      Ptr<NetDevice> device = InstallSingleEnbDevice (node);
lte/helper/lte-helper.cc~:cout<<"jin lte InstallEnbDevice.2.."<<endl;
lte/helper/lte-helper.cc~:LteHelper::InstallUeDevice (NodeContainer c,std::string nodeType) 
lte/helper/lte-helper.cc~:      Ptr<NetDevice> device = InstallSingleUeDevice (node);
lte/helper/lte-helper.cc~:LteHelper::InstallUeDevice (NodeContainer c)
lte/helper/lte-helper.cc~:      Ptr<NetDevice> device = InstallSingleUeDevice (node);
lte/helper/lte-helper.cc~:LteHelper::InstallSingleEnbDevice (Ptr<Node> n)
lte/helper/lte-helper.cc~:cout<<"jin is it here in InstallSingleEnbDevice  ???"<<endl;
lte/helper/lte-helper.cc~:  NS_ASSERT_MSG (mm, "MobilityModel needs to be set on node before calling LteHelper::InstallUeDevice ()");
lte/helper/lte-helper.cc~:cout <<"jin InstallSIngenbDevice: n="<<n<<"  dev->GetCellId ()="<<dev->GetCellId ()<<endl;
lte/helper/lte-helper.cc~:cout<<"jin InstallSingle eNB device test2"<<endl;
lte/helper/lte-helper.cc~:LteHelper::InstallSingleUeDevice (Ptr<Node> n)
lte/helper/lte-helper.cc~:  NS_ASSERT_MSG (mm, "MobilityModel needs to be set on node before calling LteHelper::InstallUeDevice ()");
lte/bindings/modulegen__gcc_ILP32.py:    ## radio-environment-map-helper.h (module 'lte'): void ns3::RadioEnvironmentMapHelper::Install() [member function]
lte/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
lte/bindings/modulegen__gcc_ILP32.py:    ## lte-helper.h (module 'lte'): ns3::NetDeviceContainer ns3::LteHelper::InstallEnbDevice(ns3::NodeContainer c) [member function]
lte/bindings/modulegen__gcc_ILP32.py:    cls.add_method('InstallEnbDevice', 
lte/bindings/modulegen__gcc_ILP32.py:    ## lte-helper.h (module 'lte'): ns3::NetDeviceContainer ns3::LteHelper::InstallUeDevice(ns3::NodeContainer c) [member function]
lte/bindings/modulegen__gcc_ILP32.py:    cls.add_method('InstallUeDevice', 
lte/bindings/modulegen__gcc_ILP32.py:    ## lte-hex-grid-enb-topology-helper.h (module 'lte'): ns3::NetDeviceContainer ns3::LteHexGridEnbTopologyHelper::SetPositionAndInstallEnbDevice(ns3::NodeContainer c) [member function]
lte/bindings/modulegen__gcc_ILP32.py:    cls.add_method('SetPositionAndInstallEnbDevice', 
lte/bindings/modulegen__gcc_LP64.py:    ## radio-environment-map-helper.h (module 'lte'): void ns3::RadioEnvironmentMapHelper::Install() [member function]
lte/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
lte/bindings/modulegen__gcc_LP64.py:    ## lte-helper.h (module 'lte'): ns3::NetDeviceContainer ns3::LteHelper::InstallEnbDevice(ns3::NodeContainer c) [member function]
lte/bindings/modulegen__gcc_LP64.py:    cls.add_method('InstallEnbDevice', 
lte/bindings/modulegen__gcc_LP64.py:    ## lte-helper.h (module 'lte'): ns3::NetDeviceContainer ns3::LteHelper::InstallUeDevice(ns3::NodeContainer c) [member function]
lte/bindings/modulegen__gcc_LP64.py:    cls.add_method('InstallUeDevice', 
lte/bindings/modulegen__gcc_LP64.py:    ## lte-hex-grid-enb-topology-helper.h (module 'lte'): ns3::NetDeviceContainer ns3::LteHexGridEnbTopologyHelper::SetPositionAndInstallEnbDevice(ns3::NodeContainer c) [member function]
lte/bindings/modulegen__gcc_LP64.py:    cls.add_method('SetPositionAndInstallEnbDevice', 
lte/doc/source/figures/helpers.seqdiag:SimProgram ->> LteHelper [label="InstallEnbDevice"] 
lte/doc/source/figures/helpers.seqdiag:SimProgram ->> LteHelper [label="InstallUeDevice"] 
lte/doc/source/lte-user.rst:      mobility.Install (enbNodes);
lte/doc/source/lte-user.rst:      mobility.Install (ueNodes);
lte/doc/source/lte-user.rst:#. Install an LTE protocol stack on the eNB(s)::
lte/doc/source/lte-user.rst:      enbDevs = lteHelper->InstallEnbDevice (enbNodes);
lte/doc/source/lte-user.rst:#. Install an LTE protocol stack on the UEs::
lte/doc/source/lte-user.rst:      ueDevs = lteHelper->InstallUeDevice (ueNodes);
lte/doc/source/lte-user.rst:    mobility.Install (ueNodes);
lte/doc/source/lte-user.rst:    BuildingsHelper::Install (ueNodes);
lte/doc/source/lte-user.rst:    ueDevs = lteHelper->InstallUeDevice (ueNodes);
lte/doc/source/lte-user.rst:  remHelper->Install ();
lte/doc/source/lte-user.rst:  internet.Install (remoteHostContainer);
lte/doc/source/lte-user.rst:  NetDeviceContainer internetDevices = p2ph.Install (pgw, remoteHost);  
lte/doc/source/lte-user.rst:      NetDeviceContainer ueLteDevs = lteHelper->InstallUeDevice (ueNodes);
lte/doc/source/lte-user.rst:      internet.Install (ueNodes);
lte/doc/source/lte-user.rst:       ApplicationContainer serverApps = packetSinkHelper.Install (ue);
lte/doc/source/lte-user.rst:       ApplicationContainer clientApps = client.Install (remoteHost);
lte/doc/source/lte-user.rst:``LteHelper::InstallEnbDevice`` and ``LteHelper::InstallUeDevice`` functions
lte/doc/source/lte-user.rst:   NetDeviceContainer csgEnbDevs = lteHelper->InstallEnbDevice (csgEnbNodes);
lte/doc/source/lte-user.rst:   NetDeviceContainer csgUeDevs = lteHelper->InstallUeDevice (csgUeNodes);
lte/doc/source/lte-user.rst:Finally, the ``InstallEnbDevice`` function of ``LteHelper`` will instantiate one
lte/doc/source/lte-user.rst:   NetDeviceContainer enbLteDevs = lteHelper->InstallEnbDevice (enbNodes); 
test/mobility-test-suite.cc:  mobility.Install (c);
test/mobility-test-suite.cc:  mobility2.Install (c2);
test/ns3tcp/ns3tcp-no-delay-test-suite.cc:  devices = pointToPoint.Install (n0, n1);
test/ns3tcp/ns3tcp-no-delay-test-suite.cc:  internet.InstallAll ();
test/ns3tcp/ns3tcp-no-delay-test-suite.cc:  ApplicationContainer apps = sink.Install (n1);
test/ns3tcp/ns3tcp-socket-test-suite.cc:  devices = pointToPoint.Install (n0, n1);
test/ns3tcp/ns3tcp-socket-test-suite.cc:  internet.InstallAll ();
test/ns3tcp/ns3tcp-socket-test-suite.cc:  ApplicationContainer apps = sink.Install (n1);
test/ns3tcp/ns3tcp-socket-test-suite.cc:  devices = csma.Install (nodes);
test/ns3tcp/ns3tcp-socket-test-suite.cc:  internet.InstallAll ();
test/ns3tcp/ns3tcp-socket-test-suite.cc:  ApplicationContainer apps = sink.Install (n1);
test/ns3tcp/ns3tcp-interop-test-suite.cc:  // Install the point-to-point devices on both nodes and connec them up.
test/ns3tcp/ns3tcp-interop-test-suite.cc:  devices = pointToPoint.Install (nodes);
test/ns3tcp/ns3tcp-interop-test-suite.cc:  // Install two variants of the internet stack.  The first, on node zero 
test/ns3tcp/ns3tcp-interop-test-suite.cc:  stack.Install (nodes.Get (0));
test/ns3tcp/ns3tcp-interop-test-suite.cc:  stack.Install (nodes.Get (1));
test/ns3tcp/ns3tcp-interop-test-suite.cc:  ApplicationContainer sinkApps = packetSinkHelper.Install (nodes.Get (0));
test/ns3tcp/ns3tcp-interop-test-suite.cc:  ApplicationContainer sourceApps = onOffHelper.Install (nodes.Get (1));
test/ns3tcp/ns3tcp-loss-test-suite.cc:  internet.InstallAll ();
test/ns3tcp/ns3tcp-loss-test-suite.cc:  NetDeviceContainer dev0 = p2p.Install (s1r1);
test/ns3tcp/ns3tcp-loss-test-suite.cc:  NetDeviceContainer dev1 = p2p.Install (r1k1);
test/ns3tcp/ns3tcp-loss-test-suite.cc:  ApplicationContainer apps = sink.Install (r1k1.Get (1));
test/ns3tcp/ns3tcp-state-test-suite.cc:  internet.InstallAll ();
test/ns3tcp/ns3tcp-state-test-suite.cc:  NetDeviceContainer dev0 = p2p.Install (n0n1);
test/ns3tcp/ns3tcp-state-test-suite.cc:  NetDeviceContainer dev1 = p2p.Install (n1n2);
test/ns3tcp/ns3tcp-state-test-suite.cc:  ApplicationContainer sinkApps = sink.Install (n1n2.Get (1));
test/ns3tcp/nsctcp-loss-test-suite.cc:  devices = pointToPoint.Install (n0, n1);
test/ns3tcp/nsctcp-loss-test-suite.cc:  internet.InstallAll ();
test/ns3tcp/nsctcp-loss-test-suite.cc:  ApplicationContainer apps = sink.Install (n1);
test/ns3tcp/nsctcp-loss-test-suite.cc:  devices = pointToPoint.Install (n0, n1);
test/ns3tcp/nsctcp-loss-test-suite.cc:  internet.InstallAll ();
test/ns3tcp/nsctcp-loss-test-suite.cc:  ApplicationContainer apps = sink.Install (n1);
test/ns3tcp/ns3tcp-cwnd-test-suite.cc:  // Install the point-to-point devices on both nodes and connec them up.
test/ns3tcp/ns3tcp-cwnd-test-suite.cc:  devices = pointToPoint.Install (nodes);
test/ns3tcp/ns3tcp-cwnd-test-suite.cc:  // Install two variants of the internet stack.  The first, on node zero 
test/ns3tcp/ns3tcp-cwnd-test-suite.cc:  stack.Install (nodes.Get (0));
test/ns3tcp/ns3tcp-cwnd-test-suite.cc:  stack.Install (nodes.Get (1));
test/ns3tcp/ns3tcp-cwnd-test-suite.cc:  ApplicationContainer sinkApps = packetSinkHelper.Install (nodes.Get (1));
test/ns3tcp/ns3tcp-cwnd-test-suite.cc:  NetDeviceContainer dev0 = p2p1.Install (n0n1);
test/ns3tcp/ns3tcp-cwnd-test-suite.cc:  NetDeviceContainer dev1 = p2p2.Install (n1n2);
test/ns3tcp/ns3tcp-cwnd-test-suite.cc:  NetDeviceContainer dev2 = p2p1.Install (n2n3);
test/ns3tcp/ns3tcp-cwnd-test-suite.cc:  internet.InstallAll ();
test/ns3tcp/ns3tcp-cwnd-test-suite.cc:  ApplicationContainer apps = sink.Install (n2n3.Get (1));
test/csma-system-test-suite.cc:      NetDeviceContainer link = csma.Install (NodeContainer (terminals.Get (i), csmaSwitch));
test/csma-system-test-suite.cc:  bridge.Install (switchNode, switchDevices);
test/csma-system-test-suite.cc:  internet.Install (terminals);
test/csma-system-test-suite.cc:  ApplicationContainer app = onoff.Install (terminals.Get (0));
test/csma-system-test-suite.cc:  app = sink.Install (terminals.Get (1));
test/csma-system-test-suite.cc:  NetDeviceContainer n0 = csma.Install (c0);
test/csma-system-test-suite.cc:  NetDeviceContainer n1 = csma.Install (c1);
test/csma-system-test-suite.cc:  internet.Install (c);
test/csma-system-test-suite.cc:  ApplicationContainer app = onoff.Install (c0.Get (0));
test/csma-system-test-suite.cc:  app = sink.Install (c0.Get (1));
test/csma-system-test-suite.cc:  app.Add (sink.Install (c1.Get (1)));
test/csma-system-test-suite.cc:  NetDeviceContainer nd0 = csma.Install (c0);  // First LAN
test/csma-system-test-suite.cc:  NetDeviceContainer nd1 = csma.Install (c1);  // Second LAN
test/csma-system-test-suite.cc:  internet.Install (c);
test/csma-system-test-suite.cc:  ApplicationContainer srcC = onoff.Install (c0.Get (0));
test/csma-system-test-suite.cc:  ApplicationContainer sinkC = sink.Install (c1.Get (2)); // Node n4 
test/csma-system-test-suite.cc:  NetDeviceContainer devices = csma.Install (nodes);
test/csma-system-test-suite.cc:  internet.Install (nodes);
test/csma-system-test-suite.cc:  ApplicationContainer app = onoff.Install (nodes.Get (0));
test/csma-system-test-suite.cc:  app = sink.Install (nodes.Get (1));
test/csma-system-test-suite.cc:  app = onoff.Install (nodes.Get (3));
test/csma-system-test-suite.cc:  app = sink.Install (nodes.Get (0));
test/csma-system-test-suite.cc:  packetSocket.Install (nodes);
test/csma-system-test-suite.cc:  NetDeviceContainer devs = csma.Install (nodes, channel);
test/csma-system-test-suite.cc:  ApplicationContainer apps = onoff.Install (nodes.Get (0));
test/csma-system-test-suite.cc:  apps = onoff.Install (nodes.Get (3));
test/csma-system-test-suite.cc:  apps = sink.Install (nodes.Get (0));
test/csma-system-test-suite.cc:  NetDeviceContainer devs = csma.Install (c);
test/csma-system-test-suite.cc:  ipStack.Install (c);
test/csma-system-test-suite.cc:  ApplicationContainer apps = onoff.Install (c.Get (0));
test/csma-system-test-suite.cc:  apps = sink.Install (c.Get (3));
test/csma-system-test-suite.cc:  apps = ping.Install (pingers);
test/csma-system-test-suite.cc:  NetDeviceContainer devs = csma.Install (c);
test/csma-system-test-suite.cc:  ipStack.Install (c);
test/csma-system-test-suite.cc:  ApplicationContainer apps = onoff.Install (c.Get (0));
test/csma-system-test-suite.cc:  apps = sink.Install (c.Get (3));
test/csma-system-test-suite.cc:      fillDevices.Add (csma.Install (newNodes, csmaChannel));
test/csma-system-test-suite.cc:  star.InstallStack (internet);
test/csma-system-test-suite.cc:  internet.Install (fillNodes);
test/csma-system-test-suite.cc:  ApplicationContainer hubApp = packetSinkHelper.Install (star.GetHub ());
test/csma-system-test-suite.cc:      spokeApps.Add (onOffHelper.Install (star.GetSpokeNode (i)));
test/csma-system-test-suite.cc:      fillApps.Add (onOffHelper.Install (fillNodes.Get (i)));
test/static-routing-test-suite.cc:  internet.Install (c);
test/static-routing-test-suite.cc:  NetDeviceContainer dAdB = p2p.Install (nAnB);
test/static-routing-test-suite.cc:  NetDeviceContainer dBdC = p2p.Install (nBnC);;
test/static-routing-test-suite.cc:  ApplicationContainer apps = onoff.Install (nA);
test/static-routing-test-suite.cc:  apps = sink.Install (nC);
test/ns3wifi/wifi-msdu-aggregator-test-suite.cc:  NetDeviceContainer apDev = wifi.Install (wifiPhy, wifiMac, ap);
test/ns3wifi/wifi-msdu-aggregator-test-suite.cc:  NetDeviceContainer staDev = wifi.Install (wifiPhy, wifiMac, sta);
test/ns3wifi/wifi-msdu-aggregator-test-suite.cc:  mobility.Install (sta);
test/ns3wifi/wifi-msdu-aggregator-test-suite.cc:  mobility.Install (ap);
test/ns3wifi/wifi-msdu-aggregator-test-suite.cc:  stack.Install (ap);
test/ns3wifi/wifi-msdu-aggregator-test-suite.cc:  stack.Install (sta);
test/ns3wifi/wifi-msdu-aggregator-test-suite.cc:  ApplicationContainer sinkApp = packetSink.Install (sta.Get (0));
test/ns3wifi/wifi-msdu-aggregator-test-suite.cc:  ApplicationContainer sourceApp = onoff.Install (ap.Get (0));
test/ns3wifi/wifi-interference-test-suite.cc:  NetDeviceContainer devices = wifi.Install (wifiPhy, wifiMac, c.Get (0));
test/ns3wifi/wifi-interference-test-suite.cc:  devices.Add (wifi.Install (wifiPhy, wifiMac, c.Get (1)));
test/ns3wifi/wifi-interference-test-suite.cc:  devices.Add (wifi.Install (wifiPhy, wifiMac, c.Get (2)));
test/ns3wifi/wifi-interference-test-suite.cc:  mobility.Install (c);
test/ns3wifi/wifi-interference-test-suite.cc:  internet.Install (c);
test/global-routing-test-suite.cc:  internet.Install (c);
test/global-routing-test-suite.cc:  NetDeviceContainer d0d2 = p2p.Install (n0n2);
test/global-routing-test-suite.cc:  NetDeviceContainer d1d6 = p2p.Install (n1n6);
test/global-routing-test-suite.cc:  NetDeviceContainer d1d2 = p2p.Install (n1n2);
test/global-routing-test-suite.cc:  NetDeviceContainer d5d6 = p2p.Install (n5n6);
test/global-routing-test-suite.cc:  NetDeviceContainer d2345 = csma.Install (n2345);
test/global-routing-test-suite.cc:  ApplicationContainer apps = onoff.Install (c.Get (1));
test/global-routing-test-suite.cc:  ApplicationContainer apps2 = onoff2.Install (c.Get (1));
test/global-routing-test-suite.cc:  internet.Install (c);
test/global-routing-test-suite.cc:  NetDeviceContainer dAdB = p2p.Install (nAnB);
test/global-routing-test-suite.cc:  NetDeviceContainer dBdC = p2p.Install (nBnC);;
test/global-routing-test-suite.cc:  ApplicationContainer apps = onoff.Install (nA);
test/global-routing-test-suite.cc:  apps = sink.Install (nC);
wifi/helper/yans-wifi-helper.h:   * them all to be able to call Install later.
wifi/helper/yans-wifi-helper.h:   * Every PHY created by a call to Install is associated to this channel.
wifi/helper/yans-wifi-helper.h:   * Every PHY created by a call to Install is associated to this channel.
wifi/helper/yans-wifi-helper.h:   * Set the error rate model and its attributes to use when Install is called.
wifi/helper/switching-manager-helper.cc:SwitchingManagerHelper::Install (NetDeviceContainer c) const
wifi/helper/switching-manager-helper.cc:SwitchingManagerHelper::Install (Ptr<NetDevice> device) const
wifi/helper/switching-manager-helper.cc:  return Install (NetDeviceContainer (device));
wifi/helper/switching-manager-helper.cc:SwitchingManagerHelper::Install (std::string deviceName) const
wifi/helper/switching-manager-helper.cc:  return Install (NetDeviceContainer (device));
wifi/helper/wifi-helper.cc:WifiHelper::Install (const WifiPhyHelper &phyHelper,
wifi/helper/wifi-helper.cc:WifiHelper::Install (const WifiPhyHelper &phy,
wifi/helper/wifi-helper.cc:  return Install (phy, mac, NodeContainer (node));
wifi/helper/wifi-helper.cc:WifiHelper::Install (const WifiPhyHelper &phy,
wifi/helper/wifi-helper.cc:  return Install (phy, mac, NodeContainer (node));
wifi/helper/wifi-helper.h:   * to create PHY objects from ns3::WifiHelper::Install.
wifi/helper/wifi-helper.h:   * to create MAC objects from ns3::WifiHelper::Install.
wifi/helper/wifi-helper.h:   * must be set before calling ns3::WifiHelper::Install
wifi/helper/wifi-helper.h:  virtual NetDeviceContainer Install (const WifiPhyHelper &phy,
wifi/helper/wifi-helper.h:  virtual NetDeviceContainer Install (const WifiPhyHelper &phy,
wifi/helper/wifi-helper.h:  virtual NetDeviceContainer Install (const WifiPhyHelper &phy,
wifi/helper/wifi-helper.h:  * have been assigned. The Install() method should have previously been
wifi/helper/switching-manager-helper.h:  SwitchingManagerContainer Install (NetDeviceContainer c) const;
wifi/helper/switching-manager-helper.h:  SwitchingManagerContainer Install (Ptr<NetDevice> device) const;
wifi/helper/switching-manager-helper.h:  SwitchingManagerContainer Install (std::string deviceName) const;
wifi/bindings/modulegen__gcc_ILP32.py:    ## wifi-helper.h (module 'wifi'): ns3::NetDeviceContainer ns3::WifiHelper::Install(ns3::WifiPhyHelper const & phy, ns3::WifiMacHelper const & mac, ns3::NodeContainer c) const [member function]
wifi/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
wifi/bindings/modulegen__gcc_ILP32.py:    ## wifi-helper.h (module 'wifi'): ns3::NetDeviceContainer ns3::WifiHelper::Install(ns3::WifiPhyHelper const & phy, ns3::WifiMacHelper const & mac, ns3::Ptr<ns3::Node> node) const [member function]
wifi/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
wifi/bindings/modulegen__gcc_ILP32.py:    ## wifi-helper.h (module 'wifi'): ns3::NetDeviceContainer ns3::WifiHelper::Install(ns3::WifiPhyHelper const & phy, ns3::WifiMacHelper const & mac, std::string nodeName) const [member function]
wifi/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
wifi/bindings/modulegen__gcc_LP64.py:    ## wifi-helper.h (module 'wifi'): ns3::NetDeviceContainer ns3::WifiHelper::Install(ns3::WifiPhyHelper const & phy, ns3::WifiMacHelper const & mac, ns3::NodeContainer c) const [member function]
wifi/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
wifi/bindings/modulegen__gcc_LP64.py:    ## wifi-helper.h (module 'wifi'): ns3::NetDeviceContainer ns3::WifiHelper::Install(ns3::WifiPhyHelper const & phy, ns3::WifiMacHelper const & mac, ns3::Ptr<ns3::Node> node) const [member function]
wifi/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
wifi/bindings/modulegen__gcc_LP64.py:    ## wifi-helper.h (module 'wifi'): ns3::NetDeviceContainer ns3::WifiHelper::Install(ns3::WifiPhyHelper const & phy, ns3::WifiMacHelper const & mac, std::string nodeName) const [member function]
wifi/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
wifi/doc/wifi.rst:this can be done with about 20 lines of code (see ``ns3::WifiHelper::Install``,
wifi/doc/wifi.rst:  NetDeviceContainer wifiContainer = WifiHelper::Install (wifiPhyHelper, wifiMacHelper, c);
wifi/doc/wifi.rst:  NetDeviceContainer devices = wifi.Install (wifiPhy, wifiMac, c);
wifi/doc/wifi.rst:  mobility.Install (c);
wifi/doc/wifi.rst:  NetDeviceContainer apDevice = wifi.Install (wifiPhy, wifiMac, ap);
wifi/doc/wifi.rst:  NetDeviceContainer staDevice = wifi.Install (wifiPhy, wifiMac, sta);
wifi/doc/wifi.rst:  mobility.Install (ap);
wifi/doc/wifi.rst:  mobility.Install (sta);
emu/examples/emu-udp-echo.cc:  internet.Install (n);
emu/examples/emu-udp-echo.cc:  NetDeviceContainer d = emu.Install (n);
emu/examples/emu-udp-echo.cc:  ApplicationContainer apps = server.Install (n.Get (1));
emu/examples/emu-udp-echo.cc:  apps = client.Install (n.Get (0));
emu/examples/emu-ping.cc:  internetStackHelper.Install (node);
emu/helper/emu-helper.h:   * EmuNetDevice created through EmuHelper::Install.
emu/helper/emu-helper.h:   * by EmuHelper::Install
emu/helper/emu-helper.h:  NetDeviceContainer Install (Ptr<Node> node) const;
emu/helper/emu-helper.h:  NetDeviceContainer Install (std::string nodeName) const;
emu/helper/emu-helper.h:  NetDeviceContainer Install (const NodeContainer &c) const;
emu/helper/emu-helper.h:  Ptr<NetDevice> InstallPriv (Ptr<Node> node) const;
emu/helper/emu-helper.cc:EmuHelper::Install (Ptr<Node> node) const
emu/helper/emu-helper.cc:  return NetDeviceContainer (InstallPriv (node));
emu/helper/emu-helper.cc:EmuHelper::Install (std::string nodeName) const
emu/helper/emu-helper.cc:  return NetDeviceContainer (InstallPriv (node));
emu/helper/emu-helper.cc:EmuHelper::Install (const NodeContainer &c) const
emu/helper/emu-helper.cc:      devs.Add (InstallPriv (*i));
emu/helper/emu-helper.cc:EmuHelper::InstallPriv (Ptr<Node> node) const
emu/bindings/modulegen__gcc_ILP32.py:    ## emu-helper.h (module 'emu'): ns3::NetDeviceContainer ns3::EmuHelper::Install(ns3::Ptr<ns3::Node> node) const [member function]
emu/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
emu/bindings/modulegen__gcc_ILP32.py:    ## emu-helper.h (module 'emu'): ns3::NetDeviceContainer ns3::EmuHelper::Install(std::string nodeName) const [member function]
emu/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
emu/bindings/modulegen__gcc_ILP32.py:    ## emu-helper.h (module 'emu'): ns3::NetDeviceContainer ns3::EmuHelper::Install(ns3::NodeContainer const & c) const [member function]
emu/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
emu/bindings/modulegen__gcc_LP64.py:    ## emu-helper.h (module 'emu'): ns3::NetDeviceContainer ns3::EmuHelper::Install(ns3::Ptr<ns3::Node> node) const [member function]
emu/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
emu/bindings/modulegen__gcc_LP64.py:    ## emu-helper.h (module 'emu'): ns3::NetDeviceContainer ns3::EmuHelper::Install(std::string nodeName) const [member function]
emu/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
emu/bindings/modulegen__gcc_LP64.py:    ## emu-helper.h (module 'emu'): ns3::NetDeviceContainer ns3::EmuHelper::Install(ns3::NodeContainer const & c) const [member function]
emu/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
emu/doc/emu.rst:  NetDeviceContainer d = emu.Install (n);
emu/doc/emu.rst:  ApplicationContainer apps = client.Install (n.Get (0));
internet/model/global-route-manager-impl.cc:          // Install default route to next hop router
internet/model/global-route-manager-impl.cc:          // Install default route to next hop
internet/test/ipv6-ripng-test.cc:  internetv6routers.Install (routers);
internet/test/ipv6-ripng-test.cc:  internetv6nodes.Install (nodes);
internet/test/ipv6-ripng-test.cc:  internetv6routers.Install (routers);
internet/test/ipv6-ripng-test.cc:  internetv6nodes.Install (nodes);
internet/test/ipv6-ripng-test.cc:  internetv6routers.Install (routers);
internet/test/ipv6-ripng-test.cc:  internetv6nodes.Install (listeners);
internet/test/ipv6-address-helper-test-suite.cc:  /* Install IPv4/IPv6 stack */
internet/test/ipv6-address-helper-test-suite.cc:  internetv6.SetIpv4StackInstall (false);
internet/test/ipv6-address-helper-test-suite.cc:  internetv6.Install (n);
internet/examples/main-simple.cc:  internet.Install (c);
internet/helper/ipv4-routing-helper.h: * ns3::InternetStackHelper::Install.
internet/helper/ipv6-static-routing-helper.h:   * This method will be called by ns3::InternetStackHelper::Install
internet/helper/ipv4-static-routing-helper.h:   * This method will be called by ns3::InternetStackHelper::Install
internet/helper/internet-stack-helper.cc:InternetStackHelper::SetIpv4StackInstall (bool enable)
internet/helper/internet-stack-helper.cc:void InternetStackHelper::SetIpv6StackInstall (bool enable)
internet/helper/internet-stack-helper.cc:void InternetStackHelper::Setc2cStackInstall (bool enable)	//iTETRIS
internet/helper/internet-stack-helper.cc:InternetStackHelper::Install (NodeContainer c) const
internet/helper/internet-stack-helper.cc:      Install (*i);
internet/helper/internet-stack-helper.cc:InternetStackHelper::InstallAll (void) const
internet/helper/internet-stack-helper.cc:  Install (NodeContainer::GetGlobal ());
internet/helper/internet-stack-helper.cc:InternetStackHelper::Install (Ptr<Node> node) const
internet/helper/internet-stack-helper.cc:        //  NS_FATAL_ERROR ("InternetStackHelper::Install (): Aggregating " 
internet/helper/internet-stack-helper.cc:          NS_FATAL_ERROR ("InternetStackHelper::Install (): Aggregating " 
internet/helper/internet-stack-helper.cc:	   NS_FATAL_ERROR ("InternetStackHelper::Install (): Aggregating "
internet/helper/internet-stack-helper.cc:	 //std::cout<<"InternetStackHelper::Install:"<< node->GetDevice(i)->GetTypeId()<<std::endl;
internet/helper/internet-stack-helper.cc:		 //std::cout<<"InternetStackHelper::Install Wifi found!!!"<<std::endl;
internet/helper/internet-stack-helper.cc:InternetStackHelper::Install (std::string nodeName) const
internet/helper/internet-stack-helper.cc:  Install (node);
internet/helper/ipv4-list-routing-helper.h:   * This method will be called by ns3::InternetStackHelper::Install
internet/helper/ipv6-routing-helper.h: * ns3::InternetStackHelper::Install.
internet/helper/internet-stack-helper.cc~:InternetStackHelper::SetIpv4StackInstall (bool enable)
internet/helper/internet-stack-helper.cc~:void InternetStackHelper::SetIpv6StackInstall (bool enable)
internet/helper/internet-stack-helper.cc~:void InternetStackHelper::Setc2cStackInstall (bool enable)	//iTETRIS
internet/helper/internet-stack-helper.cc~:InternetStackHelper::Install (NodeContainer c) const
internet/helper/internet-stack-helper.cc~:      Install (*i);
internet/helper/internet-stack-helper.cc~:InternetStackHelper::InstallAll (void) const
internet/helper/internet-stack-helper.cc~:  Install (NodeContainer::GetGlobal ());
internet/helper/internet-stack-helper.cc~:InternetStackHelper::Install (Ptr<Node> node) const
internet/helper/internet-stack-helper.cc~:        //  NS_FATAL_ERROR ("InternetStackHelper::Install (): Aggregating " 
internet/helper/internet-stack-helper.cc~:          NS_FATAL_ERROR ("InternetStackHelper::Install (): Aggregating " 
internet/helper/internet-stack-helper.cc~:	   NS_FATAL_ERROR ("InternetStackHelper::Install (): Aggregating "
internet/helper/internet-stack-helper.cc~:	 //std::cout<<"InternetStackHelper::Install:"<< node->GetDevice(i)->GetTypeId()<<std::endl;
internet/helper/internet-stack-helper.cc~:		 //std::cout<<"InternetStackHelper::Install Wifi found!!!"<<std::endl;
internet/helper/internet-stack-helper.cc~:InternetStackHelper::Install (std::string nodeName) const
internet/helper/internet-stack-helper.cc~:  Install (node);
internet/helper/internet-stack-helper.h:   * Set the routing helper to use during Install. The routing
internet/helper/internet-stack-helper.h:   * Set the routing helper to use during Install. The routing
internet/helper/internet-stack-helper.h:  void Install (std::string nodeName) const;
internet/helper/internet-stack-helper.h:  void Install (Ptr<Node> node) const;
internet/helper/internet-stack-helper.h:  void Install (NodeContainer c) const;
internet/helper/internet-stack-helper.h:  void InstallAll (void) const;
internet/helper/internet-stack-helper.h:  void SetIpv4StackInstall (bool enable);
internet/helper/internet-stack-helper.h:  void SetIpv6StackInstall (bool enable);
internet/helper/internet-stack-helper.h:  void Setc2cStackInstall (bool enable);				//iTETRIS
internet/helper/internet-stack-helper.h:  * have been assigned.  The Install() method should have previously been
internet/helper/ipv4-global-routing-helper.h:   * This method will be called by ns3::InternetStackHelper::Install
internet/helper/ipv6-list-routing-helper.h:   * This method will be called by ns3::InternetStackHelper::Install
internet/helper/ripng-helper.h:   * This method will be called by ns3::InternetStackHelper::Install
internet/helper/ripng-helper.h:   * have been assigned. The Install() method should have previously been
internet/helper/ripng-helper.h:   * \brief Install a default route in the node.
internet/bindings/modulegen__gcc_ILP32.py:    ## internet-stack-helper.h (module 'internet'): void ns3::InternetStackHelper::Install(std::string nodeName) const [member function]
internet/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
internet/bindings/modulegen__gcc_ILP32.py:    ## internet-stack-helper.h (module 'internet'): void ns3::InternetStackHelper::Install(ns3::Ptr<ns3::Node> node) const [member function]
internet/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
internet/bindings/modulegen__gcc_ILP32.py:    ## internet-stack-helper.h (module 'internet'): void ns3::InternetStackHelper::Install(ns3::NodeContainer c) const [member function]
internet/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
internet/bindings/modulegen__gcc_ILP32.py:    ## internet-stack-helper.h (module 'internet'): void ns3::InternetStackHelper::InstallAll() const [member function]
internet/bindings/modulegen__gcc_ILP32.py:    cls.add_method('InstallAll', 
internet/bindings/modulegen__gcc_ILP32.py:    ## internet-stack-helper.h (module 'internet'): void ns3::InternetStackHelper::SetIpv4StackInstall(bool enable) [member function]
internet/bindings/modulegen__gcc_ILP32.py:    cls.add_method('SetIpv4StackInstall', 
internet/bindings/modulegen__gcc_ILP32.py:    ## internet-stack-helper.h (module 'internet'): void ns3::InternetStackHelper::SetIpv6StackInstall(bool enable) [member function]
internet/bindings/modulegen__gcc_ILP32.py:    cls.add_method('SetIpv6StackInstall', 
internet/bindings/modulegen__gcc_LP64.py:    ## internet-stack-helper.h (module 'internet'): void ns3::InternetStackHelper::Install(std::string nodeName) const [member function]
internet/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
internet/bindings/modulegen__gcc_LP64.py:    ## internet-stack-helper.h (module 'internet'): void ns3::InternetStackHelper::Install(ns3::Ptr<ns3::Node> node) const [member function]
internet/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
internet/bindings/modulegen__gcc_LP64.py:    ## internet-stack-helper.h (module 'internet'): void ns3::InternetStackHelper::Install(ns3::NodeContainer c) const [member function]
internet/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
internet/bindings/modulegen__gcc_LP64.py:    ## internet-stack-helper.h (module 'internet'): void ns3::InternetStackHelper::InstallAll() const [member function]
internet/bindings/modulegen__gcc_LP64.py:    cls.add_method('InstallAll', 
internet/bindings/modulegen__gcc_LP64.py:    ## internet-stack-helper.h (module 'internet'): void ns3::InternetStackHelper::SetIpv4StackInstall(bool enable) [member function]
internet/bindings/modulegen__gcc_LP64.py:    cls.add_method('SetIpv4StackInstall', 
internet/bindings/modulegen__gcc_LP64.py:    ## internet-stack-helper.h (module 'internet'): void ns3::InternetStackHelper::SetIpv6StackInstall(bool enable) [member function]
internet/bindings/modulegen__gcc_LP64.py:    cls.add_method('SetIpv6StackInstall', 
internet/doc/tcp.rst:  ApplicationContainer sinkApp = sinkHelper.Install (serverNode);
internet/doc/tcp.rst:  internetStack.Install (n.Get(0));
internet/doc/tcp.rst:  internetStack.Install (n.Get(1));
internet/doc/tcp.rst:**before** calling the ``Install()`` function, as shown above.
internet/doc/internet-stack.rst:by hand, or via a helper function :cpp:func:`InternetStackHelper::Install ()`
internet/doc/internet-stack.rst:    InternetStackHelper::Install (Ptr<Node> node) const
internet/doc/internet-stack.rst:              NS_FATAL_ERROR ("InternetStackHelper::Install (): Aggregating " 
internet/doc/internet-stack.rst:              NS_FATAL_ERROR ("InternetStackHelper::Install (): Aggregating " 
internet/doc/routing-overview.rst:  internet.Install (c);
internet/doc/ipv6.rst::cpp:class:`ns3::InternetStackHelper` method `SetIpv6StackInstall (bool enable)` 
internet/doc/ipv6.rst:one should use :cpp:class:`ns3::InternetStackHelper` method `SetIpv4StackInstall (bool enable)` 
internet/doc/ipv6.rst:    internetV4only.SetIpv6StackInstall (false);
internet/doc/ipv6.rst:    internetV6only.SetIpv4StackInstall (false);
internet/doc/ipv6.rst:    internet.Install (n.Get (0));
internet/doc/ipv6.rst:    internetV6only.Install (n.Get (1));
internet/doc/ipv6.rst:    internetV4only.Install (n.Get (2));
internet/doc/ipv6.rst:    NetDeviceContainer ndc = csma.Install (net); 
internet/doc/ipv6.rst:    NetDeviceContainer ndc = csma.Install (net); 
internet/doc/ipv6.rst:    internetv6.Install (n);
internet/doc/ipv6.rst:    NetDeviceContainer d = csma.Install (n);
geo-routing/helper/geo-routing-helper.h:   * This method will be called by ns3::InternetStackHelper::Install
facilities/helper/IPCIU-facilities-helper.cc:IPCIUFacilitiesHelper::Install (NodeContainer c)
facilities/helper/IPCIU-facilities-helper.cc:      Install (*i);
facilities/helper/IPCIU-facilities-helper.cc:IPCIUFacilitiesHelper::Install (Ptr<Node> node)
facilities/helper/IPCIU-facilities-helper.cc:  ServiceList* services = m_ServiceListHelper->Install (node);
facilities/helper/IPCIU-facilities-helper.cc:IPCIUFacilitiesHelper::Install (std::string nodeName)
facilities/helper/IPCIU-facilities-helper.cc:  Install (node);
facilities/helper/c2c-facilities-helper.cc:C2CFacilitiesHelper::Install (NodeContainer c)
facilities/helper/c2c-facilities-helper.cc:      Install (*i);
facilities/helper/c2c-facilities-helper.cc:C2CFacilitiesHelper::Install (Ptr<Node> node)
facilities/helper/c2c-facilities-helper.cc:  ServiceList* services = m_ServiceListHelper->Install (node);
facilities/helper/c2c-facilities-helper.cc: ////std::cout<<"C2CFacilitiesHelper::Install finished..."<<std::endl;
facilities/helper/c2c-facilities-helper.cc:C2CFacilitiesHelper::Install (std::string nodeName)
facilities/helper/c2c-facilities-helper.cc:  Install (node);
facilities/helper/service-list-helper.h:   * the ns3::ServiceListHelper::Install method to create
facilities/helper/service-list-helper.h:  ServiceList* Install (Ptr<Node> node);
facilities/helper/mw-facilities-helper.cc:MWFacilitiesHelper::Install (NodeContainer c)
facilities/helper/mw-facilities-helper.cc:      Install (*i);
facilities/helper/mw-facilities-helper.cc:MWFacilitiesHelper::Install (Ptr<Node> node)
facilities/helper/mw-facilities-helper.cc:MWFacilitiesHelper::Install (std::string nodeName)
facilities/helper/mw-facilities-helper.cc:  Install (node);
facilities/helper/service-list-helper.cc:ServiceListHelper::Install (Ptr<Node> node)
facilities/helper/service-list-helper.cc:      ApplicationContainer thisAppCont = apphelper->Install (node);
facilities/helper/service-list-helper.cc:      ApplicationContainer thisAppCont = apphelper->Install (node);
facilities/helper/service-list-helper.cc:      AppCont.Add(thisAppCont);  // Install returns an applicationcontainer holding the pointer to the newly installed app.This nodecontainer is everytime appended to the applicationcontainer of the previously created applications.
facilities/helper/mw-facilities-helper.h:  void Install (std::string nodeName);
facilities/helper/mw-facilities-helper.h:  void Install (Ptr<Node> node);
facilities/helper/mw-facilities-helper.h:  void Install (NodeContainer c) ;
facilities/helper/IPCIU-facilities-helper.h:   * Set the service list helper to Install all the needed applications on a node. 
facilities/helper/IPCIU-facilities-helper.h:  void Install (std::string nodeName);
facilities/helper/IPCIU-facilities-helper.h:  void Install (Ptr<Node> node);
facilities/helper/IPCIU-facilities-helper.h:  void Install (NodeContainer c) ;
facilities/helper/c2c-facilities-helper.h:   * Set the service list helper to Install all the needed applications on a node. 
facilities/helper/c2c-facilities-helper.h:   * Add the service list helper to Install the default applications on a node. 
facilities/helper/c2c-facilities-helper.h:  void Install (std::string nodeName);
facilities/helper/c2c-facilities-helper.h:  void Install (Ptr<Node> node);
facilities/helper/c2c-facilities-helper.h:  void Install (NodeContainer c) ;
virtual-net-device/examples/virtual-net-device.cc:  internet.Install (c);
virtual-net-device/examples/virtual-net-device.cc:  NetDeviceContainer d0d2 = p2p.Install (n0n2);
virtual-net-device/examples/virtual-net-device.cc:  NetDeviceContainer d1d2 = p2p.Install (n1n2);
virtual-net-device/examples/virtual-net-device.cc:  NetDeviceContainer d3d2 = p2p.Install (n3n2);
virtual-net-device/examples/virtual-net-device.cc:  ApplicationContainer apps = onoff.Install (c.Get (0));
virtual-net-device/examples/virtual-net-device.cc:  apps = sink.Install (c.Get (3));
virtual-net-device/examples/virtual-net-device.cc:  apps = onoff.Install (c.Get (3));
virtual-net-device/examples/virtual-net-device.cc:  apps = sink.Install (c.Get (1));
mpi/examples/simple-distributed-empty-node.cc:  routerDevices = routerLink.Install (routerNodes);
mpi/examples/simple-distributed-empty-node.cc:      NetDeviceContainer temp = leafLink.Install (leftLeafNodes.Get (i), routerNodes.Get (0));
mpi/examples/simple-distributed-empty-node.cc:      NetDeviceContainer temp = leafLink.Install (rightLeafNodes.Get (i), routerNodes.Get (1));
mpi/examples/simple-distributed-empty-node.cc:      stack.SetRoutingHelper (list); // has effect on the next Install ()
mpi/examples/simple-distributed-empty-node.cc:  stack.InstallAll ();
mpi/examples/simple-distributed-empty-node.cc:          sinkApp.Add (sinkHelper.Install (rightLeafNodes.Get (i)));
mpi/examples/simple-distributed-empty-node.cc:          clientApps.Add (clientHelper.Install (leftLeafNodes.Get (i)));
mpi/examples/third-distributed.cc:  p2pDevices = pointToPoint.Install (p2pNodes);
mpi/examples/third-distributed.cc:  csmaDevices = csma.Install (csmaNodes);
mpi/examples/third-distributed.cc:  staDevices = wifi.Install (phy, mac, wifiStaNodes);
mpi/examples/third-distributed.cc:  apDevices = wifi.Install (phy, mac, wifiApNode);
mpi/examples/third-distributed.cc:  mobility.Install (wifiStaNodes);
mpi/examples/third-distributed.cc:  mobility.Install (wifiApNode);
mpi/examples/third-distributed.cc:  stack.Install (csmaNodes);
mpi/examples/third-distributed.cc:  stack.Install (wifiApNode);
mpi/examples/third-distributed.cc:  stack.Install (wifiStaNodes);
mpi/examples/third-distributed.cc:      ApplicationContainer serverApps = echoServer.Install (csmaNodes.Get (nCsma));
mpi/examples/third-distributed.cc:        echoClient.Install (wifiStaNodes.Get (nWifi - 1));
mpi/examples/simple-distributed.cc:  routerDevices = routerLink.Install (routerNodes);
mpi/examples/simple-distributed.cc:      NetDeviceContainer temp = leafLink.Install (leftLeafNodes.Get (i), routerNodes.Get (0));
mpi/examples/simple-distributed.cc:      NetDeviceContainer temp = leafLink.Install (rightLeafNodes.Get (i), routerNodes.Get (1));
mpi/examples/simple-distributed.cc:      stack.SetRoutingHelper (list); // has effect on the next Install ()
mpi/examples/simple-distributed.cc:  stack.InstallAll ();
mpi/examples/simple-distributed.cc:          sinkApp.Add (sinkHelper.Install (rightLeafNodes.Get (i)));
mpi/examples/simple-distributed.cc:          clientApps.Add (clientHelper.Install (leftLeafNodes.Get (i)));
mpi/examples/nms-p2p-nix-distributed.cc:      stack.SetRoutingHelper (list); // has effect on the next Install ()
mpi/examples/nms-p2p-nix-distributed.cc:          stack.Install (nodes_net0[z][i]);
mpi/examples/nms-p2p-nix-distributed.cc:          ndc0[i] = p2p_1gb5ms.Install (nodes_net0[z][i]);
mpi/examples/nms-p2p-nix-distributed.cc:          stack.Install (nodes_net1[z][i]);
mpi/examples/nms-p2p-nix-distributed.cc:          ndc1[i] = p2p_1gb5ms.Install (nodes_net1[z][i]);
mpi/examples/nms-p2p-nix-distributed.cc:      ndc0_1 = p2p_1gb5ms.Install (net0_1);
mpi/examples/nms-p2p-nix-distributed.cc:          stack.Install (nodes_net2[z][i]);
mpi/examples/nms-p2p-nix-distributed.cc:          ndc2[i] = p2p_1gb5ms.Install (nodes_net2[z][i]);
mpi/examples/nms-p2p-nix-distributed.cc:              stack.Install (nodes_net2LAN[z][i][j]);
mpi/examples/nms-p2p-nix-distributed.cc:              ndc2LAN[i][j] = p2p_100mb1ms.Install (nodes_net2LAN[z][i][j]);
mpi/examples/nms-p2p-nix-distributed.cc:          stack.Install (nodes_net3[z][i]);
mpi/examples/nms-p2p-nix-distributed.cc:          ndc3[i] = p2p_1gb5ms.Install (nodes_net3[z][i]);
mpi/examples/nms-p2p-nix-distributed.cc:              stack.Install (nodes_net3LAN[z][i][j]);
mpi/examples/nms-p2p-nix-distributed.cc:              ndc3LAN[i][j] = p2p_100mb1ms.Install (nodes_net3LAN[z][i][j]);
mpi/examples/nms-p2p-nix-distributed.cc:      stack.Install (nodes_netLR[z]);
mpi/examples/nms-p2p-nix-distributed.cc:      ndcLR = p2p_1gb5ms.Install (nodes_netLR[z]);
mpi/examples/nms-p2p-nix-distributed.cc:      ndc0_4 = p2p_1gb5ms.Install (net0_4);
mpi/examples/nms-p2p-nix-distributed.cc:      ndc0_5 = p2p_1gb5ms.Install (net0_5);
mpi/examples/nms-p2p-nix-distributed.cc:      ndc2_4a = p2p_1gb5ms.Install (net2_4a);
mpi/examples/nms-p2p-nix-distributed.cc:      ndc2_4b = p2p_1gb5ms.Install (net2_4b);
mpi/examples/nms-p2p-nix-distributed.cc:      ndc3_5a = p2p_1gb5ms.Install (net3_5a);
mpi/examples/nms-p2p-nix-distributed.cc:      ndc3_5b = p2p_1gb5ms.Install (net3_5b);
mpi/examples/nms-p2p-nix-distributed.cc:          ndc_ring[z] = p2p_2gb200ms.Install (nodes_ring[z]);
mpi/examples/nms-p2p-nix-distributed.cc:          ApplicationContainer sinkApp = sinkHelper.Install (nodes_net1[0][2].Get (0));
mpi/examples/nms-p2p-nix-distributed.cc:          clientApp.Add (client.Install (nodes_net2LAN[0][0][0].Get (0)));
mpi/examples/nms-p2p-nix-distributed.cc:            sinkHelper.Install (nodes_net1[1][0].Get (0));
mpi/examples/nms-p2p-nix-distributed.cc:          clientApp.Add (client.Install (nodes_net2LAN[0][0][0].Get (0)));
mpi/examples/nms-p2p-nix-distributed.cc:                        sinkHelper.Install (nodes_net2LAN[z][i][j].Get (0));
mpi/examples/nms-p2p-nix-distributed.cc:                        sinkHelper.Install (nodes_net2LAN[z][i][j].Get (0));
mpi/examples/nms-p2p-nix-distributed.cc:                      clientApp.Add (client.Install (nodes_net1[x][r1].Get (0)));
mpi/examples/nms-p2p-nix-distributed.cc:                      clientApp.Add (client.Install (nodes_net1[x][r1].Get (0)));
mpi/examples/nms-p2p-nix-distributed.cc:                        sinkHelper.Install (nodes_net3LAN[z][i][j].Get (0));
mpi/examples/nms-p2p-nix-distributed.cc:                        sinkHelper.Install (nodes_net3LAN[z][i][j].Get (0));
mpi/examples/nms-p2p-nix-distributed.cc:                      clientApp.Add (client.Install (nodes_net1[x][r1].Get (0)));
mpi/examples/nms-p2p-nix-distributed.cc:                      clientApp.Add (client.Install (nodes_net1[x][r1].Get (0)));
wave/test/ocb-test-suite.cc:  wifi.Install (wifiPhy, wifiStaMac, mobile_node);
wave/test/ocb-test-suite.cc:  wifi.Install (wifiPhy, wifiApMac, static_node);
wave/test/ocb-test-suite.cc:  wifi.Install (wifiPhy, wifiMac, mobile_node);
wave/test/ocb-test-suite.cc:  wifi.Install (wifiPhy, wifiMac, static_node);
wave/test/ocb-test-suite.cc:  wifi80211p.Install (wifiPhy, wifi80211pMac, mobile_node);
wave/test/ocb-test-suite.cc:  wifi80211p.Install (wifiPhy, wifi80211pMac, static_node);
wave/test/ocb-test-suite.cc:  mobility.Install (mobile_node);
wave/test/ocb-test-suite.cc:  mobility.Install (static_node);
wave/test/ocb-test-suite.cc:  packetSocket.Install (static_node);
wave/test/ocb-test-suite.cc:  packetSocket.Install (mobile_node);
wave/test/ocb-test-suite.cc:  ApplicationContainer apps = onoff.Install (mobile_node);
wave/examples/wave-simple-80211p.cc: *  devices = wifi80211p.Install (wifiPhy, wifi80211pMac, nodes);
wave/examples/wave-simple-80211p.cc:  NetDeviceContainer devices = wifi80211p.Install (wifiPhy, wifi80211pMac, c);
wave/examples/wave-simple-80211p.cc:  mobility.Install (c);
wave/examples/wave-simple-80211p.cc:  internet.Install (c);
wave/helper/wifi-80211p-helper.h:  virtual NetDeviceContainer Install (const WifiPhyHelper &phy, const WifiMacHelper &macHelper,NodeContainer c) const;
wave/helper/wifi-80211p-helper.cc:Wifi80211pHelper::Install (const WifiPhyHelper &phyHelper, const WifiMacHelper &macHelper, NodeContainer c) const
wave/helper/wifi-80211p-helper.cc:  return WifiHelper::Install (phyHelper, macHelper, c);
wave/bindings/modulegen__gcc_ILP32.py:    ## wifi-helper.h (module 'wifi'): ns3::NetDeviceContainer ns3::WifiHelper::Install(ns3::WifiPhyHelper const & phy, ns3::WifiMacHelper const & mac, ns3::NodeContainer c) const [member function]
wave/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
wave/bindings/modulegen__gcc_ILP32.py:    ## wifi-helper.h (module 'wifi'): ns3::NetDeviceContainer ns3::WifiHelper::Install(ns3::WifiPhyHelper const & phy, ns3::WifiMacHelper const & mac, ns3::Ptr<ns3::Node> node) const [member function]
wave/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
wave/bindings/modulegen__gcc_ILP32.py:    ## wifi-helper.h (module 'wifi'): ns3::NetDeviceContainer ns3::WifiHelper::Install(ns3::WifiPhyHelper const & phy, ns3::WifiMacHelper const & mac, std::string nodeName) const [member function]
wave/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
wave/bindings/modulegen__gcc_ILP32.py:    ## wifi-80211p-helper.h (module 'wave'): ns3::NetDeviceContainer ns3::Wifi80211pHelper::Install(ns3::WifiPhyHelper const & phy, ns3::WifiMacHelper const & macHelper, ns3::NodeContainer c) const [member function]
wave/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
wave/bindings/modulegen__gcc_LP64.py:    ## wifi-helper.h (module 'wifi'): ns3::NetDeviceContainer ns3::WifiHelper::Install(ns3::WifiPhyHelper const & phy, ns3::WifiMacHelper const & mac, ns3::NodeContainer c) const [member function]
wave/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
wave/bindings/modulegen__gcc_LP64.py:    ## wifi-helper.h (module 'wifi'): ns3::NetDeviceContainer ns3::WifiHelper::Install(ns3::WifiPhyHelper const & phy, ns3::WifiMacHelper const & mac, ns3::Ptr<ns3::Node> node) const [member function]
wave/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
wave/bindings/modulegen__gcc_LP64.py:    ## wifi-helper.h (module 'wifi'): ns3::NetDeviceContainer ns3::WifiHelper::Install(ns3::WifiPhyHelper const & phy, ns3::WifiMacHelper const & mac, std::string nodeName) const [member function]
wave/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
wave/bindings/modulegen__gcc_LP64.py:    ## wifi-80211p-helper.h (module 'wave'): ns3::NetDeviceContainer ns3::Wifi80211pHelper::Install(ns3::WifiPhyHelper const & phy, ns3::WifiMacHelper const & macHelper, ns3::NodeContainer c) const [member function]
wave/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
wave/doc/wave.rst:    devices = 80211pHelper.Install (wifiPhy, wifi80211pMac, nodes);
energy/test/rv-battery-model-test.cc:  NetDeviceContainer devices = wifi.Install (wifiPhy, wifiMac, c);
energy/test/rv-battery-model-test.cc:  EnergySourceContainer sources = rvModelHelper.Install (c);
energy/test/rv-battery-model-test.cc:  DeviceEnergyModelContainer deviceModels = radioEnergyHelper.Install (devices, sources);
energy/test/rv-battery-model-test.cc:  NetDeviceContainer devices = wifi.Install (wifiPhy, wifiMac, c);
energy/test/rv-battery-model-test.cc:  EnergySourceContainer sources = rvModelHelper.Install (c);
energy/test/rv-battery-model-test.cc:  DeviceEnergyModelContainer deviceModels = radioEnergyHelper.Install (devices, sources);
energy/test/basic-energy-model-test.cc:  NetDeviceContainer devices = wifi.Install (wifiPhy, wifiMac, c);
energy/test/basic-energy-model-test.cc:  EnergySourceContainer sources = basicSourceHelper.Install (c);
energy/test/basic-energy-model-test.cc:  DeviceEnergyModelContainer deviceModels = radioEnergyHelper.Install (devices, sources);
energy/helper/wifi-radio-energy-model-helper.h:   * Implements DeviceEnergyModel::Install.
energy/helper/wifi-radio-energy-model-helper.h:  virtual Ptr<DeviceEnergyModel> DoInstall (Ptr<NetDevice> device,
energy/helper/rv-battery-model-helper.h:  virtual Ptr<EnergySource> DoInstall (Ptr<Node> node) const;
energy/helper/rv-battery-model-helper.cc:RvBatteryModelHelper::DoInstall (Ptr<Node> node) const
energy/helper/energy-model-helper.cc:EnergySourceHelper::Install (Ptr<Node> node) const
energy/helper/energy-model-helper.cc:  return Install (NodeContainer (node));
energy/helper/energy-model-helper.cc:EnergySourceHelper::Install (NodeContainer c) const
energy/helper/energy-model-helper.cc:      Ptr<EnergySource> src = DoInstall (*i);
energy/helper/energy-model-helper.cc:EnergySourceHelper::Install (std::string nodeName) const
energy/helper/energy-model-helper.cc:  return Install (node);
energy/helper/energy-model-helper.cc:EnergySourceHelper::InstallAll (void) const
energy/helper/energy-model-helper.cc:  return Install (NodeContainer::GetGlobal ());
energy/helper/energy-model-helper.cc:DeviceEnergyModelHelper::Install (Ptr<NetDevice> device,
energy/helper/energy-model-helper.cc:  DeviceEnergyModelContainer container (DoInstall (device, source));
energy/helper/energy-model-helper.cc:DeviceEnergyModelHelper::Install (NetDeviceContainer deviceContainer,
energy/helper/energy-model-helper.cc:      Ptr<DeviceEnergyModel> model = DoInstall (*dev, *src);
energy/helper/energy-model-helper.h:  EnergySourceContainer Install (Ptr<Node> node) const;
energy/helper/energy-model-helper.h:  EnergySourceContainer Install (NodeContainer c) const;
energy/helper/energy-model-helper.h:  EnergySourceContainer Install (std::string nodeName) const;
energy/helper/energy-model-helper.h:  EnergySourceContainer InstallAll (void) const;
energy/helper/energy-model-helper.h:  virtual Ptr<EnergySource> DoInstall (Ptr<Node> node) const = 0;
energy/helper/energy-model-helper.h:   * Installs an DeviceEnergyModel with a specified EnergySource onto a
energy/helper/energy-model-helper.h:  DeviceEnergyModelContainer Install (Ptr<NetDevice> device,
energy/helper/energy-model-helper.h:   * Installs DeviceEnergyModels with specified EnergySources onto a list of
energy/helper/energy-model-helper.h:  DeviceEnergyModelContainer Install (NetDeviceContainer deviceContainer,
energy/helper/energy-model-helper.h:  virtual Ptr<DeviceEnergyModel> DoInstall (Ptr<NetDevice> device,
energy/helper/basic-energy-source-helper.cc:BasicEnergySourceHelper::DoInstall (Ptr<Node> node) const
energy/helper/basic-energy-source-helper.h:  virtual Ptr<EnergySource> DoInstall (Ptr<Node> node) const;
energy/helper/wifi-radio-energy-model-helper.cc:WifiRadioEnergyModelHelper::DoInstall (Ptr<NetDevice> device,
energy/bindings/modulegen__gcc_ILP32.py:    ## energy-model-helper.h (module 'energy'): ns3::DeviceEnergyModelContainer ns3::DeviceEnergyModelHelper::Install(ns3::Ptr<ns3::NetDevice> device, ns3::Ptr<ns3::EnergySource> source) const [member function]
energy/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
energy/bindings/modulegen__gcc_ILP32.py:    ## energy-model-helper.h (module 'energy'): ns3::DeviceEnergyModelContainer ns3::DeviceEnergyModelHelper::Install(ns3::NetDeviceContainer deviceContainer, ns3::EnergySourceContainer sourceContainer) const [member function]
energy/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
energy/bindings/modulegen__gcc_ILP32.py:    ## energy-model-helper.h (module 'energy'): ns3::Ptr<ns3::DeviceEnergyModel> ns3::DeviceEnergyModelHelper::DoInstall(ns3::Ptr<ns3::NetDevice> device, ns3::Ptr<ns3::EnergySource> source) const [member function]
energy/bindings/modulegen__gcc_ILP32.py:    cls.add_method('DoInstall', 
energy/bindings/modulegen__gcc_ILP32.py:    ## energy-model-helper.h (module 'energy'): ns3::EnergySourceContainer ns3::EnergySourceHelper::Install(ns3::Ptr<ns3::Node> node) const [member function]
energy/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
energy/bindings/modulegen__gcc_ILP32.py:    ## energy-model-helper.h (module 'energy'): ns3::EnergySourceContainer ns3::EnergySourceHelper::Install(ns3::NodeContainer c) const [member function]
energy/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
energy/bindings/modulegen__gcc_ILP32.py:    ## energy-model-helper.h (module 'energy'): ns3::EnergySourceContainer ns3::EnergySourceHelper::Install(std::string nodeName) const [member function]
energy/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
energy/bindings/modulegen__gcc_ILP32.py:    ## energy-model-helper.h (module 'energy'): ns3::EnergySourceContainer ns3::EnergySourceHelper::InstallAll() const [member function]
energy/bindings/modulegen__gcc_ILP32.py:    cls.add_method('InstallAll', 
energy/bindings/modulegen__gcc_ILP32.py:    ## energy-model-helper.h (module 'energy'): ns3::Ptr<ns3::EnergySource> ns3::EnergySourceHelper::DoInstall(ns3::Ptr<ns3::Node> node) const [member function]
energy/bindings/modulegen__gcc_ILP32.py:    cls.add_method('DoInstall', 
energy/bindings/modulegen__gcc_ILP32.py:    ## rv-battery-model-helper.h (module 'energy'): ns3::Ptr<ns3::EnergySource> ns3::RvBatteryModelHelper::DoInstall(ns3::Ptr<ns3::Node> node) const [member function]
energy/bindings/modulegen__gcc_ILP32.py:    cls.add_method('DoInstall', 
energy/bindings/modulegen__gcc_ILP32.py:    ## wifi-radio-energy-model-helper.h (module 'energy'): ns3::Ptr<ns3::DeviceEnergyModel> ns3::WifiRadioEnergyModelHelper::DoInstall(ns3::Ptr<ns3::NetDevice> device, ns3::Ptr<ns3::EnergySource> source) const [member function]
energy/bindings/modulegen__gcc_ILP32.py:    cls.add_method('DoInstall', 
energy/bindings/modulegen__gcc_ILP32.py:    ## basic-energy-source-helper.h (module 'energy'): ns3::Ptr<ns3::EnergySource> ns3::BasicEnergySourceHelper::DoInstall(ns3::Ptr<ns3::Node> node) const [member function]
energy/bindings/modulegen__gcc_ILP32.py:    cls.add_method('DoInstall', 
energy/bindings/modulegen__gcc_LP64.py:    ## energy-model-helper.h (module 'energy'): ns3::DeviceEnergyModelContainer ns3::DeviceEnergyModelHelper::Install(ns3::Ptr<ns3::NetDevice> device, ns3::Ptr<ns3::EnergySource> source) const [member function]
energy/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
energy/bindings/modulegen__gcc_LP64.py:    ## energy-model-helper.h (module 'energy'): ns3::DeviceEnergyModelContainer ns3::DeviceEnergyModelHelper::Install(ns3::NetDeviceContainer deviceContainer, ns3::EnergySourceContainer sourceContainer) const [member function]
energy/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
energy/bindings/modulegen__gcc_LP64.py:    ## energy-model-helper.h (module 'energy'): ns3::Ptr<ns3::DeviceEnergyModel> ns3::DeviceEnergyModelHelper::DoInstall(ns3::Ptr<ns3::NetDevice> device, ns3::Ptr<ns3::EnergySource> source) const [member function]
energy/bindings/modulegen__gcc_LP64.py:    cls.add_method('DoInstall', 
energy/bindings/modulegen__gcc_LP64.py:    ## energy-model-helper.h (module 'energy'): ns3::EnergySourceContainer ns3::EnergySourceHelper::Install(ns3::Ptr<ns3::Node> node) const [member function]
energy/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
energy/bindings/modulegen__gcc_LP64.py:    ## energy-model-helper.h (module 'energy'): ns3::EnergySourceContainer ns3::EnergySourceHelper::Install(ns3::NodeContainer c) const [member function]
energy/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
energy/bindings/modulegen__gcc_LP64.py:    ## energy-model-helper.h (module 'energy'): ns3::EnergySourceContainer ns3::EnergySourceHelper::Install(std::string nodeName) const [member function]
energy/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
energy/bindings/modulegen__gcc_LP64.py:    ## energy-model-helper.h (module 'energy'): ns3::EnergySourceContainer ns3::EnergySourceHelper::InstallAll() const [member function]
energy/bindings/modulegen__gcc_LP64.py:    cls.add_method('InstallAll', 
energy/bindings/modulegen__gcc_LP64.py:    ## energy-model-helper.h (module 'energy'): ns3::Ptr<ns3::EnergySource> ns3::EnergySourceHelper::DoInstall(ns3::Ptr<ns3::Node> node) const [member function]
energy/bindings/modulegen__gcc_LP64.py:    cls.add_method('DoInstall', 
energy/bindings/modulegen__gcc_LP64.py:    ## rv-battery-model-helper.h (module 'energy'): ns3::Ptr<ns3::EnergySource> ns3::RvBatteryModelHelper::DoInstall(ns3::Ptr<ns3::Node> node) const [member function]
energy/bindings/modulegen__gcc_LP64.py:    cls.add_method('DoInstall', 
energy/bindings/modulegen__gcc_LP64.py:    ## wifi-radio-energy-model-helper.h (module 'energy'): ns3::Ptr<ns3::DeviceEnergyModel> ns3::WifiRadioEnergyModelHelper::DoInstall(ns3::Ptr<ns3::NetDevice> device, ns3::Ptr<ns3::EnergySource> source) const [member function]
energy/bindings/modulegen__gcc_LP64.py:    cls.add_method('DoInstall', 
energy/bindings/modulegen__gcc_LP64.py:    ## basic-energy-source-helper.h (module 'energy'): ns3::Ptr<ns3::EnergySource> ns3::BasicEnergySourceHelper::DoInstall(ns3::Ptr<ns3::Node> node) const [member function]
energy/bindings/modulegen__gcc_LP64.py:    cls.add_method('DoInstall', 
topology-read/examples/topology-example-sim.cc:  stack.SetRoutingHelper (listRH);  // has effect on the next Install ()
topology-read/examples/topology-example-sim.cc:  stack.Install (nodes);
topology-read/examples/topology-example-sim.cc:      ndc[i] = p2p.Install (nc[i]);
topology-read/examples/topology-example-sim.cc:  ApplicationContainer apps = onoff.Install (clientNodes);
topology-read/examples/topology-example-sim.cc:  apps = sink.Install (randomServerNode);
lr-wpan/helper/lr-wpan-helper.cc:LrWpanHelper::Install (NodeContainer c)
lr-wpan/helper/lr-wpan-helper.h:  NetDeviceContainer Install (NodeContainer c);
lr-wpan/helper/lr-wpan-helper.h:   * assigned. The Install() method should have previously been
lr-wpan/bindings/modulegen__gcc_ILP32.py:    ## lr-wpan-helper.h (module 'lr-wpan'): ns3::NetDeviceContainer ns3::LrWpanHelper::Install(ns3::NodeContainer c) [member function]
lr-wpan/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
lr-wpan/bindings/modulegen__gcc_LP64.py:    ## lr-wpan-helper.h (module 'lr-wpan'): ns3::NetDeviceContainer ns3::LrWpanHelper::Install(ns3::NodeContainer c) [member function]
lr-wpan/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
buildings/test/buildings-shadowing-test.cc:  mm->AggregateObject (buildingInfo); // operation usually done by BuildingsHelper::Install
buildings/test/buildings-pathloss-test.cc:  mm->AggregateObject (buildingInfo); // operation usually done by BuildingsHelper::Install
buildings/test/buildings-helper-test.cc:  mobility.Install (nodes);
buildings/test/buildings-helper-test.cc:  bmm->AggregateObject (buildingInfo); // operation usually done by BuildingsHelper::Install
buildings/test/building-position-allocator-test.cc:  mobility.Install (nodes);
buildings/test/building-position-allocator-test.cc:  BuildingsHelper::Install (nodes);
buildings/test/building-position-allocator-test.cc:  mobility.Install (nodes);
buildings/test/building-position-allocator-test.cc:  BuildingsHelper::Install (nodes);
buildings/test/building-position-allocator-test.cc:  mobility.Install (copyNodes);
buildings/test/building-position-allocator-test.cc:  BuildingsHelper::Install (copyNodes);
buildings/examples/buildings-pathloss-profiler.cc:  mmEnb->AggregateObject (buildingInfoEnb); // operation usually done by BuildingsHelper::Install
buildings/examples/buildings-pathloss-profiler.cc:      mmUe->AggregateObject (buildingInfoUe); // operation usually done by BuildingsHelper::Install
buildings/helper/buildings-helper.h:  * Install the MobilityBuildingInfo to a node
buildings/helper/buildings-helper.h:  static void Install (Ptr<Node> node);     // for any nodes
buildings/helper/buildings-helper.h:  * Install the MobilityBuildingInfo to the set of nodes in a NodeContainer
buildings/helper/buildings-helper.h:  static void Install (NodeContainer c);     // for any nodes
buildings/helper/buildings-helper.cc:BuildingsHelper::Install (NodeContainer c)
buildings/helper/buildings-helper.cc:      Install (*i);
buildings/helper/buildings-helper.cc:BuildingsHelper::Install (Ptr<Node> node)
buildings/bindings/modulegen__gcc_ILP32.py:    ## buildings-helper.h (module 'buildings'): static void ns3::BuildingsHelper::Install(ns3::Ptr<ns3::Node> node) [member function]
buildings/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
buildings/bindings/modulegen__gcc_ILP32.py:    ## buildings-helper.h (module 'buildings'): static void ns3::BuildingsHelper::Install(ns3::NodeContainer c) [member function]
buildings/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
buildings/bindings/modulegen__gcc_LP64.py:    ## buildings-helper.h (module 'buildings'): static void ns3::BuildingsHelper::Install(ns3::Ptr<ns3::Node> node) [member function]
buildings/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
buildings/bindings/modulegen__gcc_LP64.py:    ## buildings-helper.h (module 'buildings'): static void ns3::BuildingsHelper::Install(ns3::NodeContainer c) [member function]
buildings/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
buildings/doc/source/buildings-user.rst:``BuildingsHelper::Install()``, so as to let the mobility model include
buildings/doc/source/buildings-user.rst:    mobility.Install (ueNodes);
buildings/doc/source/buildings-user.rst:    BuildingsHelper::Install (ueNodes);
buildings/doc/source/buildings-user.rst:    mobility.Install (ueNodes);
buildings/doc/source/buildings-user.rst:    BuildingsHelper::Install (ueNodes);
applications/test/udp-client-server-test.cc:  internet.Install (n);
applications/test/udp-client-server-test.cc:  ApplicationContainer apps = server.Install (n.Get (1));
applications/test/udp-client-server-test.cc:  apps = client.Install (n.Get (0));
applications/test/udp-client-server-test.cc:  internet.Install (n);
applications/test/udp-client-server-test.cc:  ApplicationContainer apps = server.Install (n.Get (1));
applications/test/udp-client-server-test.cc:  apps = client.Install (n.Get (0));
applications/test/udp-client-server-test.cc:  internet.Install (nodes);
applications/test/udp-client-server-test.cc:  ApplicationContainer serverApps = echoServer.Install (nodes.Get (1));
applications/test/udp-client-server-test.cc:  ApplicationContainer clientApps = echoClient.Install (nodes.Get (0));
applications/helper/Lte-App-helper.cc~:LTEAppHelper::Install (NodeContainer c) const
applications/helper/Lte-App-helper.cc~:      apps.Add (InstallPriv (*i));
applications/helper/Lte-App-helper.cc~:LTEAppHelper::InstallPriv (Ptr<Node> node) const
applications/helper/Lte-App-helper.cc~:LTEAppHelper::Install (Ptr<Node> node) const
applications/helper/Lte-App-helper.cc~:  return ApplicationContainer (InstallPriv (node));
applications/helper/Lte-App-helper.cc~:LTEAppHelper::Install (std::string nodeName) const
applications/helper/Lte-App-helper.cc~:  return ApplicationContainer (InstallPriv (node));
applications/helper/Lte-App-helper.cc~:LTEAppHelper::Install (NodeContainer c) const
applications/helper/Lte-App-helper.cc~:      apps.Add (InstallPriv (*i));
applications/helper/Lte-App-helper.cc~:LTEAppHelper::InstallPriv (Ptr<Node> node) const
applications/helper/on-off-helper.cc:OnOffHelper::Install (Ptr<Node> node) const
applications/helper/on-off-helper.cc:  return ApplicationContainer (InstallPriv (node));
applications/helper/on-off-helper.cc:OnOffHelper::Install (std::string nodeName) const
applications/helper/on-off-helper.cc:  return ApplicationContainer (InstallPriv (node));
applications/helper/on-off-helper.cc:OnOffHelper::Install (NodeContainer c) const
applications/helper/on-off-helper.cc:      apps.Add (InstallPriv (*i));
applications/helper/on-off-helper.cc:OnOffHelper::InstallPriv (Ptr<Node> node) const
applications/helper/bulk-send-helper.cc:BulkSendHelper::Install (Ptr<Node> node) const
applications/helper/bulk-send-helper.cc:  return ApplicationContainer (InstallPriv (node));
applications/helper/bulk-send-helper.cc:BulkSendHelper::Install (std::string nodeName) const
applications/helper/bulk-send-helper.cc:  return ApplicationContainer (InstallPriv (node));
applications/helper/bulk-send-helper.cc:BulkSendHelper::Install (NodeContainer c) const
applications/helper/bulk-send-helper.cc:      apps.Add (InstallPriv (*i));
applications/helper/bulk-send-helper.cc:BulkSendHelper::InstallPriv (Ptr<Node> node) const
applications/helper/on-off-helper.h:   * Install an ns3::OnOffApplication on each node of the input container
applications/helper/on-off-helper.h:  ApplicationContainer Install (NodeContainer c) const;
applications/helper/on-off-helper.h:   * Install an ns3::OnOffApplication on the node configured with all the 
applications/helper/on-off-helper.h:  ApplicationContainer Install (Ptr<Node> node) const;
applications/helper/on-off-helper.h:   * Install an ns3::OnOffApplication on the node configured with all the 
applications/helper/on-off-helper.h:  ApplicationContainer Install (std::string nodeName) const;
applications/helper/on-off-helper.h:  * have been assigned.  The Install() method should have previously been
applications/helper/on-off-helper.h:   * Install an ns3::OnOffApplication on the node configured with all the 
applications/helper/on-off-helper.h:  Ptr<Application> InstallPriv (Ptr<Node> node) const;
applications/helper/v4ping-helper.cc:V4PingHelper::Install (Ptr<Node> node) const
applications/helper/v4ping-helper.cc:  return ApplicationContainer (InstallPriv (node));
applications/helper/v4ping-helper.cc:V4PingHelper::Install (std::string nodeName) const
applications/helper/v4ping-helper.cc:  return ApplicationContainer (InstallPriv (node));
applications/helper/v4ping-helper.cc:V4PingHelper::Install (NodeContainer c) const
applications/helper/v4ping-helper.cc:      apps.Add (InstallPriv (*i));
applications/helper/v4ping-helper.cc:V4PingHelper::InstallPriv (Ptr<Node> node) const
applications/helper/C2C-IP-helper.h:   * Install C2C-IP-App on each Node in the provided NodeContainer.
applications/helper/C2C-IP-helper.h: ApplicationContainer Install (NodeContainer nodes) const;
applications/helper/C2C-IP-helper.h:   * Install C2C-IP-App on the provided Node.  The Node is specified
applications/helper/C2C-IP-helper.h: ApplicationContainer Install (Ptr<Node> node) const;
applications/helper/C2C-IP-helper.h:   * Install C2C-IP-App on the provided Node.  The Node is specified
applications/helper/C2C-IP-helper.h:  ApplicationContainer Install (std::string nodeName) const;
applications/helper/C2C-IP-helper.h:  Ptr<Application> InstallPriv (Ptr<Node> node) const;
applications/helper/bulk-send-helper.h:   * Install an ns3::BulkSendApplication on each node of the input container
applications/helper/bulk-send-helper.h:  ApplicationContainer Install (NodeContainer c) const;
applications/helper/bulk-send-helper.h:   * Install an ns3::BulkSendApplication on the node configured with all the
applications/helper/bulk-send-helper.h:  ApplicationContainer Install (Ptr<Node> node) const;
applications/helper/bulk-send-helper.h:   * Install an ns3::BulkSendApplication on the node configured with all the
applications/helper/bulk-send-helper.h:  ApplicationContainer Install (std::string nodeName) const;
applications/helper/bulk-send-helper.h:   * Install an ns3::BulkSendApplication on the node configured with all the
applications/helper/bulk-send-helper.h:  Ptr<Application> InstallPriv (Ptr<Node> node) const;
applications/helper/DENMhelper.cc:DENMHelper::Install (Ptr<Node> node) const
applications/helper/DENMhelper.cc:  return ApplicationContainer (InstallPriv (node));
applications/helper/DENMhelper.cc:DENMHelper::Install (std::string nodeName) const
applications/helper/DENMhelper.cc:  return ApplicationContainer (InstallPriv (node));
applications/helper/DENMhelper.cc:DENMHelper::Install (NodeContainer c) const
applications/helper/DENMhelper.cc:      apps.Add (InstallPriv (*i));
applications/helper/DENMhelper.cc:DENMHelper::InstallPriv (Ptr<Node> node) const
applications/helper/udp-client-server-helper.cc:UdpServerHelper::Install (NodeContainer c)
applications/helper/udp-client-server-helper.cc:UdpClientHelper::Install (NodeContainer c)
applications/helper/udp-client-server-helper.cc:UdpTraceClientHelper::Install (NodeContainer c)
applications/helper/udp-echo-helper.cc:UdpEchoServerHelper::Install (Ptr<Node> node) const
applications/helper/udp-echo-helper.cc:  return ApplicationContainer (InstallPriv (node));
applications/helper/udp-echo-helper.cc:UdpEchoServerHelper::Install (std::string nodeName) const
applications/helper/udp-echo-helper.cc:  return ApplicationContainer (InstallPriv (node));
applications/helper/udp-echo-helper.cc:UdpEchoServerHelper::Install (NodeContainer c) const
applications/helper/udp-echo-helper.cc:      apps.Add (InstallPriv (*i));
applications/helper/udp-echo-helper.cc:UdpEchoServerHelper::InstallPriv (Ptr<Node> node) const
applications/helper/udp-echo-helper.cc:UdpEchoClientHelper::Install (Ptr<Node> node) const
applications/helper/udp-echo-helper.cc:  return ApplicationContainer (InstallPriv (node));
applications/helper/udp-echo-helper.cc:UdpEchoClientHelper::Install (std::string nodeName) const
applications/helper/udp-echo-helper.cc:  return ApplicationContainer (InstallPriv (node));
applications/helper/udp-echo-helper.cc:UdpEchoClientHelper::Install (NodeContainer c) const
applications/helper/udp-echo-helper.cc:      apps.Add (InstallPriv (*i));
applications/helper/udp-echo-helper.cc:UdpEchoClientHelper::InstallPriv (Ptr<Node> node) const
applications/helper/udp-echo-helper.h:  ApplicationContainer Install (Ptr<Node> node) const;
applications/helper/udp-echo-helper.h:  ApplicationContainer Install (std::string nodeName) const;
applications/helper/udp-echo-helper.h:  ApplicationContainer Install (NodeContainer c) const;
applications/helper/udp-echo-helper.h:   * Install an ns3::UdpEchoServer on the node configured with all the
applications/helper/udp-echo-helper.h:  Ptr<Application> InstallPriv (Ptr<Node> node) const;
applications/helper/udp-echo-helper.h:  ApplicationContainer Install (Ptr<Node> node) const;
applications/helper/udp-echo-helper.h:  ApplicationContainer Install (std::string nodeName) const;
applications/helper/udp-echo-helper.h:  ApplicationContainer Install (NodeContainer c) const;
applications/helper/udp-echo-helper.h:   * Install an ns3::UdpEchoClient on the node configured with all the
applications/helper/udp-echo-helper.h:  Ptr<Application> InstallPriv (Ptr<Node> node) const;
applications/helper/wimax-app-helper.h:   * Install Wimax-App on each Node in the provided NodeContainer.
applications/helper/wimax-app-helper.h: ApplicationContainer Install (NodeContainer nodes) const;
applications/helper/wimax-app-helper.h:   * Install Wimax-App on the provided Node.  The Node is specified
applications/helper/wimax-app-helper.h: ApplicationContainer Install (Ptr<Node> node) const;
applications/helper/wimax-app-helper.h:   * Install Wimax-App on the provided Node.  The Node is specified
applications/helper/wimax-app-helper.h:  ApplicationContainer Install (std::string nodeName) const;
applications/helper/wimax-app-helper.h:  Ptr<Application> InstallPriv (Ptr<Node> node) const;
applications/helper/Lte-App-helper.h~:   * Install LTE-App on each Node in the provided NodeContainer.
applications/helper/Lte-App-helper.h~: ApplicationContainer Install (NodeContainer nodes) const;
applications/helper/Lte-App-helper.h~:   * Install LTE-App on the provided Node.  The Node is specified
applications/helper/Lte-App-helper.h~: ApplicationContainer Install (Ptr<Node> node) const;
applications/helper/Lte-App-helper.h~:   * Install LTE-App on the provided Node.  The Node is specified
applications/helper/Lte-App-helper.h~: ApplicationContainer Install (std::string nodeName) const;
applications/helper/Lte-App-helper.h~:  Ptr<Application> InstallPriv (Ptr<Node> node) const;
applications/helper/wimax-app-helper.cc:WimaxAppHelper::Install (Ptr<Node> node) const
applications/helper/wimax-app-helper.cc:  return ApplicationContainer (InstallPriv (node));
applications/helper/wimax-app-helper.cc:WimaxAppHelper::Install (std::string nodeName) const
applications/helper/wimax-app-helper.cc:  return ApplicationContainer (InstallPriv (node));
applications/helper/wimax-app-helper.cc:WimaxAppHelper::Install (NodeContainer c) const
applications/helper/wimax-app-helper.cc:      apps.Add (InstallPriv (*i));
applications/helper/wimax-app-helper.cc:WimaxAppHelper::InstallPriv (Ptr<Node> node) const
applications/helper/CAM-send-helper.cc:CAMsendHelper::Install (Ptr<Node> node) const
applications/helper/CAM-send-helper.cc:  return ApplicationContainer (InstallPriv (node));
applications/helper/CAM-send-helper.cc:CAMsendHelper::Install (std::string nodeName) const
applications/helper/CAM-send-helper.cc:  return ApplicationContainer (InstallPriv (node));
applications/helper/CAM-send-helper.cc:CAMsendHelper::Install (NodeContainer c) const
applications/helper/CAM-send-helper.cc:      apps.Add (InstallPriv (*i));
applications/helper/CAM-send-helper.cc:CAMsendHelper::InstallPriv (Ptr<Node> node) const
applications/helper/Lte-App-helper.h:   * Install LTE-App on each Node in the provided NodeContainer.
applications/helper/Lte-App-helper.h: ApplicationContainer Install (NodeContainer nodes) const;
applications/helper/Lte-App-helper.h:   * Install LTE-App on the provided Node.  The Node is specified
applications/helper/Lte-App-helper.h: ApplicationContainer Install (Ptr<Node> node) const;
applications/helper/Lte-App-helper.h:   * Install LTE-App on the provided Node.  The Node is specified
applications/helper/Lte-App-helper.h: ApplicationContainer Install (std::string nodeName) const;
applications/helper/Lte-App-helper.h:  Ptr<Application> InstallPriv (Ptr<Node> node) const;
applications/helper/radvd-helper.cc:ApplicationContainer RadvdHelper::Install (Ptr<Node> node)
applications/helper/ping6-helper.h:   * \brief Install the application in Nodes.
applications/helper/ping6-helper.h:  ApplicationContainer Install (NodeContainer c);
applications/helper/ping6-helper.cc:ApplicationContainer Ping6Helper::Install (NodeContainer c)
applications/helper/CAM-recv-helper.cc:CAMrecvHelper::Install (Ptr<Node> node) const
applications/helper/CAM-recv-helper.cc:  return ApplicationContainer (InstallPriv (node));
applications/helper/CAM-recv-helper.cc:CAMrecvHelper::Install (std::string nodeName) const
applications/helper/CAM-recv-helper.cc:  return ApplicationContainer (InstallPriv (node));
applications/helper/CAM-recv-helper.cc:CAMrecvHelper::Install (NodeContainer c) const
applications/helper/CAM-recv-helper.cc:      apps.Add (InstallPriv (*i));
applications/helper/CAM-recv-helper.cc:CAMrecvHelper::InstallPriv (Ptr<Node> node) const
applications/helper/CAM-send-helper.h:   * Install an ns3::CAMsend on each node of the input container
applications/helper/CAM-send-helper.h:  ApplicationContainer Install (NodeContainer c) const;
applications/helper/CAM-send-helper.h:   * Install an ns3::CAMsend on the node configured with all the
applications/helper/CAM-send-helper.h:  ApplicationContainer Install (Ptr<Node> node) const;
applications/helper/CAM-send-helper.h:   * Install an ns3::CAMsend on the node configured with all the
applications/helper/CAM-send-helper.h:  ApplicationContainer Install (std::string nodeName) const;
applications/helper/CAM-send-helper.h:   * Install an ns3::CAMsend on the node configured with all the
applications/helper/CAM-send-helper.h:  Ptr<Application> InstallPriv (Ptr<Node> node) const;
applications/helper/packet-sink-helper.cc:PacketSinkHelper::Install (Ptr<Node> node) const
applications/helper/packet-sink-helper.cc:  return ApplicationContainer (InstallPriv (node));
applications/helper/packet-sink-helper.cc:PacketSinkHelper::Install (std::string nodeName) const
applications/helper/packet-sink-helper.cc:  return ApplicationContainer (InstallPriv (node));
applications/helper/packet-sink-helper.cc:PacketSinkHelper::Install (NodeContainer c) const
applications/helper/packet-sink-helper.cc:      apps.Add (InstallPriv (*i));
applications/helper/packet-sink-helper.cc:PacketSinkHelper::InstallPriv (Ptr<Node> node) const
applications/helper/application-helper.h:   * Install an application to all the nodes in the input NodeContainer.
applications/helper/application-helper.h:  virtual ApplicationContainer Install (NodeContainer nodes) const=0;
applications/helper/application-helper.h:   * Install an application on the input Node
applications/helper/application-helper.h:  virtual ApplicationContainer Install (Ptr<Node> node) const =0;
applications/helper/DENMhelper.h:   * Install DENMApp on each Node in the provided NodeContainer.
applications/helper/DENMhelper.h: ApplicationContainer Install (NodeContainer nodes) const;
applications/helper/DENMhelper.h:   * Install DENM-App on the provided Node.  The Node is specified
applications/helper/DENMhelper.h: ApplicationContainer Install (Ptr<Node> node) const;
applications/helper/DENMhelper.h:   * Install DENM-App on the provided Node.  The Node is specified
applications/helper/DENMhelper.h:  ApplicationContainer Install (std::string nodeName) const;
applications/helper/DENMhelper.h:  Ptr<Application> InstallPriv (Ptr<Node> node) const;
applications/helper/CAM-recv-helper.h:   * Install an ns3::CAMrecvApplication on each node of the input container
applications/helper/CAM-recv-helper.h:  ApplicationContainer Install (NodeContainer c) const;
applications/helper/CAM-recv-helper.h:   * Install an ns3::CAMrecvApplication on each node of the input container
applications/helper/CAM-recv-helper.h:  ApplicationContainer Install (Ptr<Node> node) const;
applications/helper/CAM-recv-helper.h:   * Install an ns3::CAMrecvApplication on each node of the input container
applications/helper/CAM-recv-helper.h:  ApplicationContainer Install (std::string nodeName) const;
applications/helper/CAM-recv-helper.h:  Ptr<Application> InstallPriv (Ptr<Node> node) const;
applications/helper/radvd-helper.h:   * \brief Install the application in a Node.
applications/helper/radvd-helper.h:  ApplicationContainer Install (Ptr<Node> node);
applications/helper/udp-client-server-helper.h:  ApplicationContainer Install (NodeContainer c);
applications/helper/udp-client-server-helper.h:  ApplicationContainer Install (NodeContainer c);
applications/helper/udp-client-server-helper.h:  ApplicationContainer Install (NodeContainer c);
applications/helper/Dvbh-App-helper.cc:DvbhAppHelper::Install (Ptr<Node> node) const
applications/helper/Dvbh-App-helper.cc:  return ApplicationContainer (InstallPriv (node));
applications/helper/Dvbh-App-helper.cc:DvbhAppHelper::Install (std::string nodeName) const
applications/helper/Dvbh-App-helper.cc:  return ApplicationContainer (InstallPriv (node));
applications/helper/Dvbh-App-helper.cc:DvbhAppHelper::Install (NodeContainer c) const
applications/helper/Dvbh-App-helper.cc:      apps.Add (InstallPriv (*i));
applications/helper/Dvbh-App-helper.cc:DvbhAppHelper::InstallPriv (Ptr<Node> node) const
applications/helper/C2C-IP-helper.cc:C2CIPHelper::Install (Ptr<Node> node) const
applications/helper/C2C-IP-helper.cc:  return ApplicationContainer (InstallPriv (node));
applications/helper/C2C-IP-helper.cc:C2CIPHelper::Install (std::string nodeName) const
applications/helper/C2C-IP-helper.cc:  return ApplicationContainer (InstallPriv (node));
applications/helper/C2C-IP-helper.cc:C2CIPHelper::Install (NodeContainer c) const
applications/helper/C2C-IP-helper.cc:      apps.Add (InstallPriv (*i));
applications/helper/C2C-IP-helper.cc:C2CIPHelper::InstallPriv (Ptr<Node> node) const
applications/helper/C2C-IP-helper.cc: //std::cout<<"C2CIPHelper::InstallPriv App index: "<<app_index<<std::endl;
applications/helper/Lte-App-helper.cc:LTEAppHelper::Install (NodeContainer c) const
applications/helper/Lte-App-helper.cc:      apps.Add (InstallPriv (*i));
applications/helper/Lte-App-helper.cc:LTEAppHelper::InstallPriv (Ptr<Node> node) const
applications/helper/Lte-App-helper.cc:LTEAppHelper::Install (Ptr<Node> node) const
applications/helper/Lte-App-helper.cc:  return ApplicationContainer (InstallPriv (node));
applications/helper/Lte-App-helper.cc:LTEAppHelper::Install (std::string nodeName) const
applications/helper/Lte-App-helper.cc:  return ApplicationContainer (InstallPriv (node));
applications/helper/Lte-App-helper.cc:LTEAppHelper::Install (NodeContainer c) const
applications/helper/Lte-App-helper.cc:      apps.Add (InstallPriv (*i));
applications/helper/Lte-App-helper.cc:LTEAppHelper::InstallPriv (Ptr<Node> node) const
applications/helper/Dvbh-App-helper.h:   * Install DVBH-App on each Node in the provided NodeContainer.
applications/helper/Dvbh-App-helper.h: ApplicationContainer Install (NodeContainer nodes) const;
applications/helper/Dvbh-App-helper.h:   * Install DVBH-App on the provided Node.  The Node is specified
applications/helper/Dvbh-App-helper.h: ApplicationContainer Install (Ptr<Node> node) const;
applications/helper/Dvbh-App-helper.h:   * Install DVBH-App on the provided Node.  The Node is specified
applications/helper/Dvbh-App-helper.h:  ApplicationContainer Install (std::string nodeName) const;
applications/helper/Dvbh-App-helper.h:  Ptr<Application> InstallPriv (Ptr<Node> node) const;
applications/helper/packet-sink-helper.h:   * Install an ns3::PacketSinkApplication on each node of the input container
applications/helper/packet-sink-helper.h:  ApplicationContainer Install (NodeContainer c) const;
applications/helper/packet-sink-helper.h:   * Install an ns3::PacketSinkApplication on each node of the input container
applications/helper/packet-sink-helper.h:  ApplicationContainer Install (Ptr<Node> node) const;
applications/helper/packet-sink-helper.h:   * Install an ns3::PacketSinkApplication on each node of the input container
applications/helper/packet-sink-helper.h:  ApplicationContainer Install (std::string nodeName) const;
applications/helper/packet-sink-helper.h:   * Install an ns3::PacketSink on the node configured with all the
applications/helper/packet-sink-helper.h:  Ptr<Application> InstallPriv (Ptr<Node> node) const;
applications/helper/v4ping-helper.h:   * Install a Ping application on each Node in the provided NodeContainer.
applications/helper/v4ping-helper.h:  ApplicationContainer Install (NodeContainer nodes) const;
applications/helper/v4ping-helper.h:   * Install a Ping application on the provided Node.  The Node is specified
applications/helper/v4ping-helper.h:  ApplicationContainer Install (Ptr<Node> node) const;
applications/helper/v4ping-helper.h:   * Install a Ping application on the provided Node.  The Node is specified
applications/helper/v4ping-helper.h:  ApplicationContainer Install (std::string nodeName) const;
applications/helper/v4ping-helper.h:  Ptr<Application> InstallPriv (Ptr<Node> node) const;
applications/bindings/modulegen__gcc_ILP32.py:    ## bulk-send-helper.h (module 'applications'): ns3::ApplicationContainer ns3::BulkSendHelper::Install(ns3::NodeContainer c) const [member function]
applications/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
applications/bindings/modulegen__gcc_ILP32.py:    ## bulk-send-helper.h (module 'applications'): ns3::ApplicationContainer ns3::BulkSendHelper::Install(ns3::Ptr<ns3::Node> node) const [member function]
applications/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
applications/bindings/modulegen__gcc_ILP32.py:    ## bulk-send-helper.h (module 'applications'): ns3::ApplicationContainer ns3::BulkSendHelper::Install(std::string nodeName) const [member function]
applications/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
applications/bindings/modulegen__gcc_ILP32.py:    ## on-off-helper.h (module 'applications'): ns3::ApplicationContainer ns3::OnOffHelper::Install(ns3::NodeContainer c) const [member function]
applications/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
applications/bindings/modulegen__gcc_ILP32.py:    ## on-off-helper.h (module 'applications'): ns3::ApplicationContainer ns3::OnOffHelper::Install(ns3::Ptr<ns3::Node> node) const [member function]
applications/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
applications/bindings/modulegen__gcc_ILP32.py:    ## on-off-helper.h (module 'applications'): ns3::ApplicationContainer ns3::OnOffHelper::Install(std::string nodeName) const [member function]
applications/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
applications/bindings/modulegen__gcc_ILP32.py:    ## packet-sink-helper.h (module 'applications'): ns3::ApplicationContainer ns3::PacketSinkHelper::Install(ns3::NodeContainer c) const [member function]
applications/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
applications/bindings/modulegen__gcc_ILP32.py:    ## packet-sink-helper.h (module 'applications'): ns3::ApplicationContainer ns3::PacketSinkHelper::Install(ns3::Ptr<ns3::Node> node) const [member function]
applications/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
applications/bindings/modulegen__gcc_ILP32.py:    ## packet-sink-helper.h (module 'applications'): ns3::ApplicationContainer ns3::PacketSinkHelper::Install(std::string nodeName) const [member function]
applications/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
applications/bindings/modulegen__gcc_ILP32.py:    ## packet-socket-helper.h (module 'network'): void ns3::PacketSocketHelper::Install(ns3::Ptr<ns3::Node> node) const [member function]
applications/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
applications/bindings/modulegen__gcc_ILP32.py:    ## packet-socket-helper.h (module 'network'): void ns3::PacketSocketHelper::Install(std::string nodeName) const [member function]
applications/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
applications/bindings/modulegen__gcc_ILP32.py:    ## packet-socket-helper.h (module 'network'): void ns3::PacketSocketHelper::Install(ns3::NodeContainer c) const [member function]
applications/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
applications/bindings/modulegen__gcc_ILP32.py:    ## ping6-helper.h (module 'applications'): ns3::ApplicationContainer ns3::Ping6Helper::Install(ns3::NodeContainer c) [member function]
applications/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
applications/bindings/modulegen__gcc_ILP32.py:    ## radvd-helper.h (module 'applications'): ns3::ApplicationContainer ns3::RadvdHelper::Install(ns3::Ptr<ns3::Node> node) [member function]
applications/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
applications/bindings/modulegen__gcc_ILP32.py:    ## udp-client-server-helper.h (module 'applications'): ns3::ApplicationContainer ns3::UdpClientHelper::Install(ns3::NodeContainer c) [member function]
applications/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
applications/bindings/modulegen__gcc_ILP32.py:    ## udp-echo-helper.h (module 'applications'): ns3::ApplicationContainer ns3::UdpEchoClientHelper::Install(ns3::Ptr<ns3::Node> node) const [member function]
applications/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
applications/bindings/modulegen__gcc_ILP32.py:    ## udp-echo-helper.h (module 'applications'): ns3::ApplicationContainer ns3::UdpEchoClientHelper::Install(std::string nodeName) const [member function]
applications/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
applications/bindings/modulegen__gcc_ILP32.py:    ## udp-echo-helper.h (module 'applications'): ns3::ApplicationContainer ns3::UdpEchoClientHelper::Install(ns3::NodeContainer c) const [member function]
applications/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
applications/bindings/modulegen__gcc_ILP32.py:    ## udp-echo-helper.h (module 'applications'): ns3::ApplicationContainer ns3::UdpEchoServerHelper::Install(ns3::Ptr<ns3::Node> node) const [member function]
applications/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
applications/bindings/modulegen__gcc_ILP32.py:    ## udp-echo-helper.h (module 'applications'): ns3::ApplicationContainer ns3::UdpEchoServerHelper::Install(std::string nodeName) const [member function]
applications/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
applications/bindings/modulegen__gcc_ILP32.py:    ## udp-echo-helper.h (module 'applications'): ns3::ApplicationContainer ns3::UdpEchoServerHelper::Install(ns3::NodeContainer c) const [member function]
applications/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
applications/bindings/modulegen__gcc_ILP32.py:    ## udp-client-server-helper.h (module 'applications'): ns3::ApplicationContainer ns3::UdpServerHelper::Install(ns3::NodeContainer c) [member function]
applications/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
applications/bindings/modulegen__gcc_ILP32.py:    ## udp-client-server-helper.h (module 'applications'): ns3::ApplicationContainer ns3::UdpTraceClientHelper::Install(ns3::NodeContainer c) [member function]
applications/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
applications/bindings/modulegen__gcc_ILP32.py:    ## v4ping-helper.h (module 'applications'): ns3::ApplicationContainer ns3::V4PingHelper::Install(ns3::NodeContainer nodes) const [member function]
applications/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
applications/bindings/modulegen__gcc_ILP32.py:    ## v4ping-helper.h (module 'applications'): ns3::ApplicationContainer ns3::V4PingHelper::Install(ns3::Ptr<ns3::Node> node) const [member function]
applications/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
applications/bindings/modulegen__gcc_ILP32.py:    ## v4ping-helper.h (module 'applications'): ns3::ApplicationContainer ns3::V4PingHelper::Install(std::string nodeName) const [member function]
applications/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
applications/bindings/modulegen__gcc_LP64.py:    ## bulk-send-helper.h (module 'applications'): ns3::ApplicationContainer ns3::BulkSendHelper::Install(ns3::NodeContainer c) const [member function]
applications/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
applications/bindings/modulegen__gcc_LP64.py:    ## bulk-send-helper.h (module 'applications'): ns3::ApplicationContainer ns3::BulkSendHelper::Install(ns3::Ptr<ns3::Node> node) const [member function]
applications/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
applications/bindings/modulegen__gcc_LP64.py:    ## bulk-send-helper.h (module 'applications'): ns3::ApplicationContainer ns3::BulkSendHelper::Install(std::string nodeName) const [member function]
applications/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
applications/bindings/modulegen__gcc_LP64.py:    ## on-off-helper.h (module 'applications'): ns3::ApplicationContainer ns3::OnOffHelper::Install(ns3::NodeContainer c) const [member function]
applications/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
applications/bindings/modulegen__gcc_LP64.py:    ## on-off-helper.h (module 'applications'): ns3::ApplicationContainer ns3::OnOffHelper::Install(ns3::Ptr<ns3::Node> node) const [member function]
applications/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
applications/bindings/modulegen__gcc_LP64.py:    ## on-off-helper.h (module 'applications'): ns3::ApplicationContainer ns3::OnOffHelper::Install(std::string nodeName) const [member function]
applications/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
applications/bindings/modulegen__gcc_LP64.py:    ## packet-sink-helper.h (module 'applications'): ns3::ApplicationContainer ns3::PacketSinkHelper::Install(ns3::NodeContainer c) const [member function]
applications/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
applications/bindings/modulegen__gcc_LP64.py:    ## packet-sink-helper.h (module 'applications'): ns3::ApplicationContainer ns3::PacketSinkHelper::Install(ns3::Ptr<ns3::Node> node) const [member function]
applications/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
applications/bindings/modulegen__gcc_LP64.py:    ## packet-sink-helper.h (module 'applications'): ns3::ApplicationContainer ns3::PacketSinkHelper::Install(std::string nodeName) const [member function]
applications/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
applications/bindings/modulegen__gcc_LP64.py:    ## packet-socket-helper.h (module 'network'): void ns3::PacketSocketHelper::Install(ns3::Ptr<ns3::Node> node) const [member function]
applications/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
applications/bindings/modulegen__gcc_LP64.py:    ## packet-socket-helper.h (module 'network'): void ns3::PacketSocketHelper::Install(std::string nodeName) const [member function]
applications/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
applications/bindings/modulegen__gcc_LP64.py:    ## packet-socket-helper.h (module 'network'): void ns3::PacketSocketHelper::Install(ns3::NodeContainer c) const [member function]
applications/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
applications/bindings/modulegen__gcc_LP64.py:    ## ping6-helper.h (module 'applications'): ns3::ApplicationContainer ns3::Ping6Helper::Install(ns3::NodeContainer c) [member function]
applications/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
applications/bindings/modulegen__gcc_LP64.py:    ## radvd-helper.h (module 'applications'): ns3::ApplicationContainer ns3::RadvdHelper::Install(ns3::Ptr<ns3::Node> node) [member function]
applications/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
applications/bindings/modulegen__gcc_LP64.py:    ## udp-client-server-helper.h (module 'applications'): ns3::ApplicationContainer ns3::UdpClientHelper::Install(ns3::NodeContainer c) [member function]
applications/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
applications/bindings/modulegen__gcc_LP64.py:    ## udp-echo-helper.h (module 'applications'): ns3::ApplicationContainer ns3::UdpEchoClientHelper::Install(ns3::Ptr<ns3::Node> node) const [member function]
applications/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
applications/bindings/modulegen__gcc_LP64.py:    ## udp-echo-helper.h (module 'applications'): ns3::ApplicationContainer ns3::UdpEchoClientHelper::Install(std::string nodeName) const [member function]
applications/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
applications/bindings/modulegen__gcc_LP64.py:    ## udp-echo-helper.h (module 'applications'): ns3::ApplicationContainer ns3::UdpEchoClientHelper::Install(ns3::NodeContainer c) const [member function]
applications/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
applications/bindings/modulegen__gcc_LP64.py:    ## udp-echo-helper.h (module 'applications'): ns3::ApplicationContainer ns3::UdpEchoServerHelper::Install(ns3::Ptr<ns3::Node> node) const [member function]
applications/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
applications/bindings/modulegen__gcc_LP64.py:    ## udp-echo-helper.h (module 'applications'): ns3::ApplicationContainer ns3::UdpEchoServerHelper::Install(std::string nodeName) const [member function]
applications/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
applications/bindings/modulegen__gcc_LP64.py:    ## udp-echo-helper.h (module 'applications'): ns3::ApplicationContainer ns3::UdpEchoServerHelper::Install(ns3::NodeContainer c) const [member function]
applications/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
applications/bindings/modulegen__gcc_LP64.py:    ## udp-client-server-helper.h (module 'applications'): ns3::ApplicationContainer ns3::UdpServerHelper::Install(ns3::NodeContainer c) [member function]
applications/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
applications/bindings/modulegen__gcc_LP64.py:    ## udp-client-server-helper.h (module 'applications'): ns3::ApplicationContainer ns3::UdpTraceClientHelper::Install(ns3::NodeContainer c) [member function]
applications/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
applications/bindings/modulegen__gcc_LP64.py:    ## v4ping-helper.h (module 'applications'): ns3::ApplicationContainer ns3::V4PingHelper::Install(ns3::NodeContainer nodes) const [member function]
applications/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
applications/bindings/modulegen__gcc_LP64.py:    ## v4ping-helper.h (module 'applications'): ns3::ApplicationContainer ns3::V4PingHelper::Install(ns3::Ptr<ns3::Node> node) const [member function]
applications/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
applications/bindings/modulegen__gcc_LP64.py:    ## v4ping-helper.h (module 'applications'): ns3::ApplicationContainer ns3::V4PingHelper::Install(std::string nodeName) const [member function]
applications/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
fd-net-device/examples/fd-tap-ping6.cc:  // Install IPv6 stack.
fd-net-device/examples/fd-tap-ping6.cc:  internetv6.Install (net);
fd-net-device/examples/fd-tap-ping6.cc:  NetDeviceContainer devs = csma.Install (net);
fd-net-device/examples/fd-tap-ping6.cc:  NetDeviceContainer fdevs = helper.Install (r);
fd-net-device/examples/fd-tap-ping6.cc:  ApplicationContainer apps = ping6.Install (n);
fd-net-device/examples/fd-emu-ping.cc:  NetDeviceContainer devices = emu.Install (node);
fd-net-device/examples/fd-emu-ping.cc:  internetStackHelper.Install (node);
fd-net-device/examples/fd-emu-udp-echo.cc:  internet.Install (n);
fd-net-device/examples/fd-emu-udp-echo.cc:  NetDeviceContainer d = emu.Install (n);
fd-net-device/examples/fd-emu-udp-echo.cc:  ApplicationContainer apps = server.Install (n.Get (1));
fd-net-device/examples/fd-emu-udp-echo.cc:  apps = client.Install (n.Get (0));
fd-net-device/examples/realtime-fd2fd-onoff.cc:  NetDeviceContainer devices = fd.Install (nodes);
fd-net-device/examples/realtime-fd2fd-onoff.cc:  internetStackHelper.SetIpv4StackInstall(true);
fd-net-device/examples/realtime-fd2fd-onoff.cc:  internetStackHelper.Install (nodes);
fd-net-device/examples/realtime-fd2fd-onoff.cc:  ApplicationContainer sinkApp = sinkHelper.Install (serverNode);
fd-net-device/examples/realtime-fd2fd-onoff.cc:  ApplicationContainer clientApps = onoff.Install (clientNode);
fd-net-device/examples/realtime-dummy-network.cc:  stack.Install (nodes);
fd-net-device/examples/realtime-dummy-network.cc:  NetDeviceContainer devices = fd.Install (nodes);
fd-net-device/examples/fd-planetlab-ping.cc:  NetDeviceContainer devices = helper.Install (node);
fd-net-device/examples/fd-planetlab-ping.cc:  internetStackHelper.Install (node);
fd-net-device/examples/dummy-network.cc:  stack.Install (nodes);
fd-net-device/examples/dummy-network.cc:  NetDeviceContainer devices = fd.Install (nodes);
fd-net-device/examples/fd2fd-onoff.cc:  NetDeviceContainer devices = fd.Install (nodes);
fd-net-device/examples/fd2fd-onoff.cc:  internetStackHelper.SetIpv4StackInstall(true);
fd-net-device/examples/fd2fd-onoff.cc:  internetStackHelper.Install (nodes);
fd-net-device/examples/fd2fd-onoff.cc:  ApplicationContainer sinkApp = sinkHelper.Install (serverNode);
fd-net-device/examples/fd2fd-onoff.cc:  ApplicationContainer clientApps = onoff.Install (clientNode);
fd-net-device/examples/fd-tap-ping.cc:  NetDeviceContainer devices = helper.Install (node);
fd-net-device/examples/fd-tap-ping.cc:  internetStackHelper.Install (node);
fd-net-device/examples/fd-emu-onoff.cc:  NetDeviceContainer devices = emu.Install (node);
fd-net-device/examples/fd-emu-onoff.cc:  internetStackHelper.SetIpv4StackInstall(true);
fd-net-device/examples/fd-emu-onoff.cc:  internetStackHelper.Install (node);
fd-net-device/examples/fd-emu-onoff.cc:    ApplicationContainer sinkApp = sinkHelper.Install (node);
fd-net-device/examples/fd-emu-onoff.cc:    ApplicationContainer clientApps = onoff.Install (node);
fd-net-device/helper/emu-fd-net-device-helper.h:  Ptr<NetDevice> InstallPriv (Ptr<Node> node) const;
fd-net-device/helper/planetlab-fd-net-device-helper.h:  Ptr<NetDevice> InstallPriv (Ptr<Node> node) const;
fd-net-device/helper/planetlab-fd-net-device-helper.cc:PlanetLabFdNetDeviceHelper::InstallPriv (Ptr<Node> node) const
fd-net-device/helper/planetlab-fd-net-device-helper.cc:  Ptr<NetDevice> d = FdNetDeviceHelper::InstallPriv (node);
fd-net-device/helper/fd-net-device-helper.h:   * by FdNetDeviceHelper::Install
fd-net-device/helper/fd-net-device-helper.h:  virtual NetDeviceContainer Install (Ptr<Node> node) const;
fd-net-device/helper/fd-net-device-helper.h:  virtual NetDeviceContainer Install (std::string name) const;
fd-net-device/helper/fd-net-device-helper.h:  virtual NetDeviceContainer Install (const NodeContainer &c) const;
fd-net-device/helper/fd-net-device-helper.h:  virtual Ptr<NetDevice> InstallPriv (Ptr<Node> node) const;
fd-net-device/helper/emu-fd-net-device-helper.cc:EmuFdNetDeviceHelper::InstallPriv (Ptr<Node> node) const
fd-net-device/helper/emu-fd-net-device-helper.cc:  Ptr<NetDevice> d = FdNetDeviceHelper::InstallPriv (node);
fd-net-device/helper/tap-fd-net-device-helper.h:  Ptr<NetDevice> InstallPriv (Ptr<Node> node) const;
fd-net-device/helper/tap-fd-net-device-helper.cc:TapFdNetDeviceHelper::InstallPriv (Ptr<Node> node) const
fd-net-device/helper/tap-fd-net-device-helper.cc:  Ptr<NetDevice> d = FdNetDeviceHelper::InstallPriv (node);
fd-net-device/helper/fd-net-device-helper.cc:FdNetDeviceHelper::Install (Ptr<Node> node) const
fd-net-device/helper/fd-net-device-helper.cc:  return NetDeviceContainer (InstallPriv (node));
fd-net-device/helper/fd-net-device-helper.cc:FdNetDeviceHelper::Install (std::string nodeName) const
fd-net-device/helper/fd-net-device-helper.cc:  return NetDeviceContainer (InstallPriv (node));
fd-net-device/helper/fd-net-device-helper.cc:FdNetDeviceHelper::Install (const NodeContainer &c) const
fd-net-device/helper/fd-net-device-helper.cc:      devs.Add (InstallPriv (*i));
fd-net-device/helper/fd-net-device-helper.cc:FdNetDeviceHelper::InstallPriv (Ptr<Node> node) const
fd-net-device/bindings/modulegen__gcc_ILP32.py:    ## fd-net-device-helper.h (module 'fd-net-device'): ns3::NetDeviceContainer ns3::FdNetDeviceHelper::Install(ns3::Ptr<ns3::Node> node) const [member function]
fd-net-device/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
fd-net-device/bindings/modulegen__gcc_ILP32.py:    ## fd-net-device-helper.h (module 'fd-net-device'): ns3::NetDeviceContainer ns3::FdNetDeviceHelper::Install(std::string name) const [member function]
fd-net-device/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
fd-net-device/bindings/modulegen__gcc_ILP32.py:    ## fd-net-device-helper.h (module 'fd-net-device'): ns3::NetDeviceContainer ns3::FdNetDeviceHelper::Install(ns3::NodeContainer const & c) const [member function]
fd-net-device/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
fd-net-device/bindings/modulegen__gcc_ILP32.py:    ## fd-net-device-helper.h (module 'fd-net-device'): ns3::Ptr<ns3::NetDevice> ns3::FdNetDeviceHelper::InstallPriv(ns3::Ptr<ns3::Node> node) const [member function]
fd-net-device/bindings/modulegen__gcc_ILP32.py:    cls.add_method('InstallPriv', 
fd-net-device/bindings/modulegen__gcc_ILP32.py:    ## emu-fd-net-device-helper.h (module 'fd-net-device'): ns3::Ptr<ns3::NetDevice> ns3::EmuFdNetDeviceHelper::InstallPriv(ns3::Ptr<ns3::Node> node) const [member function]
fd-net-device/bindings/modulegen__gcc_ILP32.py:    cls.add_method('InstallPriv', 
fd-net-device/bindings/modulegen__gcc_ILP32.py:    ## tap-fd-net-device-helper.h (module 'fd-net-device'): ns3::Ptr<ns3::NetDevice> ns3::TapFdNetDeviceHelper::InstallPriv(ns3::Ptr<ns3::Node> node) const [member function]
fd-net-device/bindings/modulegen__gcc_ILP32.py:    cls.add_method('InstallPriv', 
fd-net-device/bindings/modulegen__gcc_LP64.py:    ## fd-net-device-helper.h (module 'fd-net-device'): ns3::NetDeviceContainer ns3::FdNetDeviceHelper::Install(ns3::Ptr<ns3::Node> node) const [member function]
fd-net-device/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
fd-net-device/bindings/modulegen__gcc_LP64.py:    ## fd-net-device-helper.h (module 'fd-net-device'): ns3::NetDeviceContainer ns3::FdNetDeviceHelper::Install(std::string name) const [member function]
fd-net-device/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
fd-net-device/bindings/modulegen__gcc_LP64.py:    ## fd-net-device-helper.h (module 'fd-net-device'): ns3::NetDeviceContainer ns3::FdNetDeviceHelper::Install(ns3::NodeContainer const & c) const [member function]
fd-net-device/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
fd-net-device/bindings/modulegen__gcc_LP64.py:    ## fd-net-device-helper.h (module 'fd-net-device'): ns3::Ptr<ns3::NetDevice> ns3::FdNetDeviceHelper::InstallPriv(ns3::Ptr<ns3::Node> node) const [member function]
fd-net-device/bindings/modulegen__gcc_LP64.py:    cls.add_method('InstallPriv', 
fd-net-device/bindings/modulegen__gcc_LP64.py:    ## emu-fd-net-device-helper.h (module 'fd-net-device'): ns3::Ptr<ns3::NetDevice> ns3::EmuFdNetDeviceHelper::InstallPriv(ns3::Ptr<ns3::Node> node) const [member function]
fd-net-device/bindings/modulegen__gcc_LP64.py:    cls.add_method('InstallPriv', 
fd-net-device/bindings/modulegen__gcc_LP64.py:    ## tap-fd-net-device-helper.h (module 'fd-net-device'): ns3::Ptr<ns3::NetDevice> ns3::TapFdNetDeviceHelper::InstallPriv(ns3::Ptr<ns3::Node> node) const [member function]
fd-net-device/bindings/modulegen__gcc_LP64.py:    cls.add_method('InstallPriv', 
fd-net-device/doc/fd-net-device.rst:   NetDeviceContainer devices = fd.Install (nodes);
fd-net-device/doc/fd-net-device.rst:Before invoking the ``Install`` method, the correct device name must be configured
fd-net-device/doc/fd-net-device.rst:  NetDeviceContainer devices = emu.Install (node);
fd-net-device/doc/fd-net-device.rst:  helper.Install (node);
fd-net-device/doc/fd-net-device.rst:  helper.Install (node);
fd-net-device/doc/fd-net-device.rst:    NetDeviceContainer devices = emu.Install (node);
messageMgmnt/helper/CAMmanage-helper.h:   * Install CAM on each Node in the provided NodeContainer.
messageMgmnt/helper/CAMmanage-helper.h:  ApplicationContainer Install (NodeContainer nodes) const;
messageMgmnt/helper/CAMmanage-helper.h:   * Install CAM on the provided Node.  The Node is specified
messageMgmnt/helper/CAMmanage-helper.h:  ApplicationContainer Install (Ptr<Node> node) const;
messageMgmnt/helper/CAMmanage-helper.h:   * Install CAM manager on the provided Node.  The Node is specified
messageMgmnt/helper/CAMmanage-helper.h:  ApplicationContainer Install (std::string nodeName) const;
messageMgmnt/helper/CAMmanage-helper.h:  Ptr<Application> InstallPriv (Ptr<Node> node) const;
messageMgmnt/helper/CAMmanage-helper.cc:CAMmanageHelper::Install (Ptr<Node> node) const
messageMgmnt/helper/CAMmanage-helper.cc:  return ApplicationContainer (InstallPriv (node));
messageMgmnt/helper/CAMmanage-helper.cc:CAMmanageHelper::Install (std::string nodeName) const
messageMgmnt/helper/CAMmanage-helper.cc:  return ApplicationContainer (InstallPriv (node));
messageMgmnt/helper/CAMmanage-helper.cc:CAMmanageHelper::Install (NodeContainer c) const
messageMgmnt/helper/CAMmanage-helper.cc:      apps.Add (InstallPriv (*i));
messageMgmnt/helper/CAMmanage-helper.cc:CAMmanageHelper::InstallPriv (Ptr<Node> node) const
c2c-node/helper/c2c-routing-helper.h: * ns3::InternetStackHelper::Install.
point-to-point-layout/model/point-to-point-star.cc:      NetDeviceContainer nd = p2pHelper.Install (m_hub.Get (0), m_spokes.Get (i));
point-to-point-layout/model/point-to-point-star.cc:PointToPointStarHelper::InstallStack (InternetStackHelper stack)
point-to-point-layout/model/point-to-point-star.cc:  stack.Install (m_hub);
point-to-point-layout/model/point-to-point-star.cc:  stack.Install (m_spokes);
point-to-point-layout/model/point-to-point-dumbbell.h:  void      InstallStack (InternetStackHelper stack);
point-to-point-layout/model/point-to-point-star.h:  void InstallStack (InternetStackHelper stack);
point-to-point-layout/model/point-to-point-grid.h:  void InstallStack (InternetStackHelper stack);
point-to-point-layout/model/point-to-point-grid.cc:                              Install (rowNodes.Get (x-1), rowNodes.Get (x)));
point-to-point-layout/model/point-to-point-grid.cc:                              Install ((m_nodes.at (y-1)).Get (x), rowNodes.Get (x)));
point-to-point-layout/model/point-to-point-grid.cc:PointToPointGridHelper::InstallStack (InternetStackHelper stack)
point-to-point-layout/model/point-to-point-grid.cc:          stack.Install (rowNodes.Get (j));
point-to-point-layout/model/point-to-point-dumbbell.cc:  m_routerDevices = bottleneckHelper.Install (m_routers);
point-to-point-layout/model/point-to-point-dumbbell.cc:      NetDeviceContainer c = leftHelper.Install (m_routers.Get (0),
point-to-point-layout/model/point-to-point-dumbbell.cc:      NetDeviceContainer c = rightHelper.Install (m_routers.Get (1),
point-to-point-layout/model/point-to-point-dumbbell.cc:void PointToPointDumbbellHelper::InstallStack (InternetStackHelper stack)
point-to-point-layout/model/point-to-point-dumbbell.cc:  stack.Install (m_routers);
point-to-point-layout/model/point-to-point-dumbbell.cc:  stack.Install (m_leftLeaf);
point-to-point-layout/model/point-to-point-dumbbell.cc:  stack.Install (m_rightLeaf);
point-to-point-layout/bindings/modulegen__gcc_ILP32.py:    ## point-to-point-dumbbell.h (module 'point-to-point-layout'): void ns3::PointToPointDumbbellHelper::InstallStack(ns3::InternetStackHelper stack) [member function]
point-to-point-layout/bindings/modulegen__gcc_ILP32.py:    cls.add_method('InstallStack', 
point-to-point-layout/bindings/modulegen__gcc_ILP32.py:    ## point-to-point-grid.h (module 'point-to-point-layout'): void ns3::PointToPointGridHelper::InstallStack(ns3::InternetStackHelper stack) [member function]
point-to-point-layout/bindings/modulegen__gcc_ILP32.py:    cls.add_method('InstallStack', 
point-to-point-layout/bindings/modulegen__gcc_ILP32.py:    ## point-to-point-helper.h (module 'point-to-point'): ns3::NetDeviceContainer ns3::PointToPointHelper::Install(ns3::NodeContainer c) [member function]
point-to-point-layout/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
point-to-point-layout/bindings/modulegen__gcc_ILP32.py:    ## point-to-point-helper.h (module 'point-to-point'): ns3::NetDeviceContainer ns3::PointToPointHelper::Install(ns3::Ptr<ns3::Node> a, ns3::Ptr<ns3::Node> b) [member function]
point-to-point-layout/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
point-to-point-layout/bindings/modulegen__gcc_ILP32.py:    ## point-to-point-helper.h (module 'point-to-point'): ns3::NetDeviceContainer ns3::PointToPointHelper::Install(ns3::Ptr<ns3::Node> a, std::string bName) [member function]
point-to-point-layout/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
point-to-point-layout/bindings/modulegen__gcc_ILP32.py:    ## point-to-point-helper.h (module 'point-to-point'): ns3::NetDeviceContainer ns3::PointToPointHelper::Install(std::string aName, ns3::Ptr<ns3::Node> b) [member function]
point-to-point-layout/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
point-to-point-layout/bindings/modulegen__gcc_ILP32.py:    ## point-to-point-helper.h (module 'point-to-point'): ns3::NetDeviceContainer ns3::PointToPointHelper::Install(std::string aNode, std::string bNode) [member function]
point-to-point-layout/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
point-to-point-layout/bindings/modulegen__gcc_ILP32.py:    ## point-to-point-star.h (module 'point-to-point-layout'): void ns3::PointToPointStarHelper::InstallStack(ns3::InternetStackHelper stack) [member function]
point-to-point-layout/bindings/modulegen__gcc_ILP32.py:    cls.add_method('InstallStack', 
point-to-point-layout/bindings/modulegen__gcc_ILP32.py:    ## internet-stack-helper.h (module 'internet'): void ns3::InternetStackHelper::Install(std::string nodeName) const [member function]
point-to-point-layout/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
point-to-point-layout/bindings/modulegen__gcc_ILP32.py:    ## internet-stack-helper.h (module 'internet'): void ns3::InternetStackHelper::Install(ns3::Ptr<ns3::Node> node) const [member function]
point-to-point-layout/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
point-to-point-layout/bindings/modulegen__gcc_ILP32.py:    ## internet-stack-helper.h (module 'internet'): void ns3::InternetStackHelper::Install(ns3::NodeContainer c) const [member function]
point-to-point-layout/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
point-to-point-layout/bindings/modulegen__gcc_ILP32.py:    ## internet-stack-helper.h (module 'internet'): void ns3::InternetStackHelper::InstallAll() const [member function]
point-to-point-layout/bindings/modulegen__gcc_ILP32.py:    cls.add_method('InstallAll', 
point-to-point-layout/bindings/modulegen__gcc_ILP32.py:    ## internet-stack-helper.h (module 'internet'): void ns3::InternetStackHelper::SetIpv4StackInstall(bool enable) [member function]
point-to-point-layout/bindings/modulegen__gcc_ILP32.py:    cls.add_method('SetIpv4StackInstall', 
point-to-point-layout/bindings/modulegen__gcc_ILP32.py:    ## internet-stack-helper.h (module 'internet'): void ns3::InternetStackHelper::SetIpv6StackInstall(bool enable) [member function]
point-to-point-layout/bindings/modulegen__gcc_ILP32.py:    cls.add_method('SetIpv6StackInstall', 
point-to-point-layout/bindings/modulegen__gcc_LP64.py:    ## point-to-point-dumbbell.h (module 'point-to-point-layout'): void ns3::PointToPointDumbbellHelper::InstallStack(ns3::InternetStackHelper stack) [member function]
point-to-point-layout/bindings/modulegen__gcc_LP64.py:    cls.add_method('InstallStack', 
point-to-point-layout/bindings/modulegen__gcc_LP64.py:    ## point-to-point-grid.h (module 'point-to-point-layout'): void ns3::PointToPointGridHelper::InstallStack(ns3::InternetStackHelper stack) [member function]
point-to-point-layout/bindings/modulegen__gcc_LP64.py:    cls.add_method('InstallStack', 
point-to-point-layout/bindings/modulegen__gcc_LP64.py:    ## point-to-point-helper.h (module 'point-to-point'): ns3::NetDeviceContainer ns3::PointToPointHelper::Install(ns3::NodeContainer c) [member function]
point-to-point-layout/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
point-to-point-layout/bindings/modulegen__gcc_LP64.py:    ## point-to-point-helper.h (module 'point-to-point'): ns3::NetDeviceContainer ns3::PointToPointHelper::Install(ns3::Ptr<ns3::Node> a, ns3::Ptr<ns3::Node> b) [member function]
point-to-point-layout/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
point-to-point-layout/bindings/modulegen__gcc_LP64.py:    ## point-to-point-helper.h (module 'point-to-point'): ns3::NetDeviceContainer ns3::PointToPointHelper::Install(ns3::Ptr<ns3::Node> a, std::string bName) [member function]
point-to-point-layout/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
point-to-point-layout/bindings/modulegen__gcc_LP64.py:    ## point-to-point-helper.h (module 'point-to-point'): ns3::NetDeviceContainer ns3::PointToPointHelper::Install(std::string aName, ns3::Ptr<ns3::Node> b) [member function]
point-to-point-layout/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
point-to-point-layout/bindings/modulegen__gcc_LP64.py:    ## point-to-point-helper.h (module 'point-to-point'): ns3::NetDeviceContainer ns3::PointToPointHelper::Install(std::string aNode, std::string bNode) [member function]
point-to-point-layout/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
point-to-point-layout/bindings/modulegen__gcc_LP64.py:    ## point-to-point-star.h (module 'point-to-point-layout'): void ns3::PointToPointStarHelper::InstallStack(ns3::InternetStackHelper stack) [member function]
point-to-point-layout/bindings/modulegen__gcc_LP64.py:    cls.add_method('InstallStack', 
point-to-point-layout/bindings/modulegen__gcc_LP64.py:    ## internet-stack-helper.h (module 'internet'): void ns3::InternetStackHelper::Install(std::string nodeName) const [member function]
point-to-point-layout/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
point-to-point-layout/bindings/modulegen__gcc_LP64.py:    ## internet-stack-helper.h (module 'internet'): void ns3::InternetStackHelper::Install(ns3::Ptr<ns3::Node> node) const [member function]
point-to-point-layout/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
point-to-point-layout/bindings/modulegen__gcc_LP64.py:    ## internet-stack-helper.h (module 'internet'): void ns3::InternetStackHelper::Install(ns3::NodeContainer c) const [member function]
point-to-point-layout/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
point-to-point-layout/bindings/modulegen__gcc_LP64.py:    ## internet-stack-helper.h (module 'internet'): void ns3::InternetStackHelper::InstallAll() const [member function]
point-to-point-layout/bindings/modulegen__gcc_LP64.py:    cls.add_method('InstallAll', 
point-to-point-layout/bindings/modulegen__gcc_LP64.py:    ## internet-stack-helper.h (module 'internet'): void ns3::InternetStackHelper::SetIpv4StackInstall(bool enable) [member function]
point-to-point-layout/bindings/modulegen__gcc_LP64.py:    cls.add_method('SetIpv4StackInstall', 
point-to-point-layout/bindings/modulegen__gcc_LP64.py:    ## internet-stack-helper.h (module 'internet'): void ns3::InternetStackHelper::SetIpv6StackInstall(bool enable) [member function]
point-to-point-layout/bindings/modulegen__gcc_LP64.py:    cls.add_method('SetIpv6StackInstall', 
spectrum/test/spectrum-ideal-phy-test.cc:  mobility.Install (c);
spectrum/test/spectrum-ideal-phy-test.cc:  NetDeviceContainer devices = deviceHelper.Install (c);
spectrum/test/spectrum-ideal-phy-test.cc:  packetSocket.Install (c);
spectrum/test/spectrum-ideal-phy-test.cc:  ApplicationContainer apps = onoff.Install (c.Get (0));
spectrum/examples/adhoc-aloha-ideal-phy-matrix-propagation-loss-model.cc:  mobility.Install (c);
spectrum/examples/adhoc-aloha-ideal-phy-matrix-propagation-loss-model.cc:  NetDeviceContainer devices = deviceHelper.Install (c);
spectrum/examples/adhoc-aloha-ideal-phy-matrix-propagation-loss-model.cc:  packetSocket.Install (c);
spectrum/examples/adhoc-aloha-ideal-phy-matrix-propagation-loss-model.cc:  ApplicationContainer apps = onoff.Install (c.Get (0));
spectrum/examples/adhoc-aloha-ideal-phy.cc:  mobility.Install (c);
spectrum/examples/adhoc-aloha-ideal-phy.cc:  NetDeviceContainer devices = deviceHelper.Install (c);
spectrum/examples/adhoc-aloha-ideal-phy.cc:  packetSocket.Install (c);
spectrum/examples/adhoc-aloha-ideal-phy.cc:  ApplicationContainer apps = onoff.Install (c.Get (0));
spectrum/examples/adhoc-aloha-ideal-phy-with-microwave-oven.cc:  mobility.Install (allNodes);
spectrum/examples/adhoc-aloha-ideal-phy-with-microwave-oven.cc:  NetDeviceContainer ofdmDevices = adhocAlohaOfdmHelper.Install (ofdmNodes);
spectrum/examples/adhoc-aloha-ideal-phy-with-microwave-oven.cc:  packetSocket.Install (ofdmNodes);
spectrum/examples/adhoc-aloha-ideal-phy-with-microwave-oven.cc:  ApplicationContainer apps = onoff.Install (ofdmNodes.Get (0));
spectrum/examples/adhoc-aloha-ideal-phy-with-microwave-oven.cc:  NetDeviceContainer waveformGeneratorDevices = waveformGeneratorHelper.Install (waveformGeneratorNodes);
spectrum/examples/adhoc-aloha-ideal-phy-with-microwave-oven.cc:  NetDeviceContainer spectrumAnalyzerDevices = spectrumAnalyzerHelper.Install (spectrumAnalyzerNodes);
spectrum/helper/spectrum-analyzer-helper.cc:SpectrumAnalyzerHelper::Install (NodeContainer c) const
spectrum/helper/spectrum-analyzer-helper.cc:SpectrumAnalyzerHelper::Install (Ptr<Node> node) const
spectrum/helper/spectrum-analyzer-helper.cc:  return Install (NodeContainer (node));
spectrum/helper/spectrum-analyzer-helper.cc:SpectrumAnalyzerHelper::Install (std::string nodeName) const
spectrum/helper/spectrum-analyzer-helper.cc:  return Install (node);
spectrum/helper/waveform-generator-helper.cc:WaveformGeneratorHelper::Install (NodeContainer c) const
spectrum/helper/waveform-generator-helper.cc:WaveformGeneratorHelper::Install (Ptr<Node> node) const
spectrum/helper/waveform-generator-helper.cc:  return Install (NodeContainer (node));
spectrum/helper/waveform-generator-helper.cc:WaveformGeneratorHelper::Install (std::string nodeName) const
spectrum/helper/waveform-generator-helper.cc:  return Install (node);
spectrum/helper/adhoc-aloha-noack-ideal-phy-helper.h:  NetDeviceContainer Install (NodeContainer c) const;
spectrum/helper/adhoc-aloha-noack-ideal-phy-helper.h:  NetDeviceContainer Install (Ptr<Node> node) const;
spectrum/helper/adhoc-aloha-noack-ideal-phy-helper.h:  NetDeviceContainer Install (std::string nodeName) const;
spectrum/helper/waveform-generator-helper.h:  NetDeviceContainer Install (NodeContainer c) const;
spectrum/helper/waveform-generator-helper.h:  NetDeviceContainer Install (Ptr<Node> node) const;
spectrum/helper/waveform-generator-helper.h:  NetDeviceContainer Install (std::string nodeName) const;
spectrum/helper/spectrum-analyzer-helper.h:  NetDeviceContainer Install (NodeContainer c) const;
spectrum/helper/spectrum-analyzer-helper.h:  NetDeviceContainer Install (Ptr<Node> node) const;
spectrum/helper/spectrum-analyzer-helper.h:  NetDeviceContainer Install (std::string nodeName) const;
spectrum/helper/adhoc-aloha-noack-ideal-phy-helper.cc:AdhocAlohaNoackIdealPhyHelper::Install (NodeContainer c) const
spectrum/helper/adhoc-aloha-noack-ideal-phy-helper.cc:AdhocAlohaNoackIdealPhyHelper::Install (Ptr<Node> node) const
spectrum/helper/adhoc-aloha-noack-ideal-phy-helper.cc:  return Install (NodeContainer (node));
spectrum/helper/adhoc-aloha-noack-ideal-phy-helper.cc:AdhocAlohaNoackIdealPhyHelper::Install (std::string nodeName) const
spectrum/helper/adhoc-aloha-noack-ideal-phy-helper.cc:  return Install (node);
spectrum/bindings/modulegen__gcc_ILP32.py:    ## adhoc-aloha-noack-ideal-phy-helper.h (module 'spectrum'): ns3::NetDeviceContainer ns3::AdhocAlohaNoackIdealPhyHelper::Install(ns3::NodeContainer c) const [member function]
spectrum/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
spectrum/bindings/modulegen__gcc_ILP32.py:    ## adhoc-aloha-noack-ideal-phy-helper.h (module 'spectrum'): ns3::NetDeviceContainer ns3::AdhocAlohaNoackIdealPhyHelper::Install(ns3::Ptr<ns3::Node> node) const [member function]
spectrum/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
spectrum/bindings/modulegen__gcc_ILP32.py:    ## adhoc-aloha-noack-ideal-phy-helper.h (module 'spectrum'): ns3::NetDeviceContainer ns3::AdhocAlohaNoackIdealPhyHelper::Install(std::string nodeName) const [member function]
spectrum/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
spectrum/bindings/modulegen__gcc_ILP32.py:    ## spectrum-analyzer-helper.h (module 'spectrum'): ns3::NetDeviceContainer ns3::SpectrumAnalyzerHelper::Install(ns3::NodeContainer c) const [member function]
spectrum/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
spectrum/bindings/modulegen__gcc_ILP32.py:    ## spectrum-analyzer-helper.h (module 'spectrum'): ns3::NetDeviceContainer ns3::SpectrumAnalyzerHelper::Install(ns3::Ptr<ns3::Node> node) const [member function]
spectrum/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
spectrum/bindings/modulegen__gcc_ILP32.py:    ## spectrum-analyzer-helper.h (module 'spectrum'): ns3::NetDeviceContainer ns3::SpectrumAnalyzerHelper::Install(std::string nodeName) const [member function]
spectrum/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
spectrum/bindings/modulegen__gcc_ILP32.py:    ## waveform-generator-helper.h (module 'spectrum'): ns3::NetDeviceContainer ns3::WaveformGeneratorHelper::Install(ns3::NodeContainer c) const [member function]
spectrum/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
spectrum/bindings/modulegen__gcc_ILP32.py:    ## waveform-generator-helper.h (module 'spectrum'): ns3::NetDeviceContainer ns3::WaveformGeneratorHelper::Install(ns3::Ptr<ns3::Node> node) const [member function]
spectrum/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
spectrum/bindings/modulegen__gcc_ILP32.py:    ## waveform-generator-helper.h (module 'spectrum'): ns3::NetDeviceContainer ns3::WaveformGeneratorHelper::Install(std::string nodeName) const [member function]
spectrum/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
spectrum/bindings/modulegen__gcc_LP64.py:    ## adhoc-aloha-noack-ideal-phy-helper.h (module 'spectrum'): ns3::NetDeviceContainer ns3::AdhocAlohaNoackIdealPhyHelper::Install(ns3::NodeContainer c) const [member function]
spectrum/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
spectrum/bindings/modulegen__gcc_LP64.py:    ## adhoc-aloha-noack-ideal-phy-helper.h (module 'spectrum'): ns3::NetDeviceContainer ns3::AdhocAlohaNoackIdealPhyHelper::Install(ns3::Ptr<ns3::Node> node) const [member function]
spectrum/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
spectrum/bindings/modulegen__gcc_LP64.py:    ## adhoc-aloha-noack-ideal-phy-helper.h (module 'spectrum'): ns3::NetDeviceContainer ns3::AdhocAlohaNoackIdealPhyHelper::Install(std::string nodeName) const [member function]
spectrum/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
spectrum/bindings/modulegen__gcc_LP64.py:    ## spectrum-analyzer-helper.h (module 'spectrum'): ns3::NetDeviceContainer ns3::SpectrumAnalyzerHelper::Install(ns3::NodeContainer c) const [member function]
spectrum/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
spectrum/bindings/modulegen__gcc_LP64.py:    ## spectrum-analyzer-helper.h (module 'spectrum'): ns3::NetDeviceContainer ns3::SpectrumAnalyzerHelper::Install(ns3::Ptr<ns3::Node> node) const [member function]
spectrum/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
spectrum/bindings/modulegen__gcc_LP64.py:    ## spectrum-analyzer-helper.h (module 'spectrum'): ns3::NetDeviceContainer ns3::SpectrumAnalyzerHelper::Install(std::string nodeName) const [member function]
spectrum/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
spectrum/bindings/modulegen__gcc_LP64.py:    ## waveform-generator-helper.h (module 'spectrum'): ns3::NetDeviceContainer ns3::WaveformGeneratorHelper::Install(ns3::NodeContainer c) const [member function]
spectrum/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
spectrum/bindings/modulegen__gcc_LP64.py:    ## waveform-generator-helper.h (module 'spectrum'): ns3::NetDeviceContainer ns3::WaveformGeneratorHelper::Install(ns3::Ptr<ns3::Node> node) const [member function]
spectrum/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
spectrum/bindings/modulegen__gcc_LP64.py:    ## waveform-generator-helper.h (module 'spectrum'): ns3::NetDeviceContainer ns3::WaveformGeneratorHelper::Install(std::string nodeName) const [member function]
spectrum/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
network/examples/red-tests.cc:      ApplicationContainer sinkApp = sinkHelper.Install (n3n4.Get (1));
network/examples/red-tests.cc:      clientApps1.Add (clientHelper1.Install (n0n2.Get (0)));
network/examples/red-tests.cc:      clientApps2.Add (clientHelper2.Install (n1n2.Get (0)));
network/examples/red-tests.cc:      ApplicationContainer sinkApp1 = sinkHelper1.Install (n3n4.Get (1));
network/examples/red-tests.cc:      ApplicationContainer sinkApp2 = sinkHelper2.Install (n3n5.Get (1));
network/examples/red-tests.cc:      ApplicationContainer sinkApp3 = sinkHelper3.Install (n0n2.Get (0));
network/examples/red-tests.cc:      ApplicationContainer sinkApp4 = sinkHelper4.Install (n1n2.Get (0));
network/examples/red-tests.cc:      clientApps1.Add (clientHelper1.Install (n0n2.Get (0)));
network/examples/red-tests.cc:      clientApps2.Add (clientHelper2.Install (n1n2.Get (0)));
network/examples/red-tests.cc:      clientApps3.Add (clientHelper3.Install (n3n4.Get (1)));
network/examples/red-tests.cc:      clientApps4.Add (clientHelper4.Install (n3n5.Get (1)));
network/examples/red-tests.cc:  NS_LOG_INFO ("Install internet stack on all nodes.");
network/examples/red-tests.cc:  internet.Install (c);
network/examples/red-tests.cc:  NetDeviceContainer devn0n2 = p2p.Install (n0n2);
network/examples/red-tests.cc:  NetDeviceContainer devn1n2 = p2p.Install (n1n2);
network/examples/red-tests.cc:  NetDeviceContainer devn2n3 = p2p.Install (n2n3);
network/examples/red-tests.cc:  NetDeviceContainer devn3n4 = p2p.Install (n3n4);
network/examples/red-tests.cc:  NetDeviceContainer devn3n5 = p2p.Install (n3n5);
network/examples/red-tests.cc:      flowmon = flowmonHelper.InstallAll ();
network/examples/droptail_vs_red.cc:  // Install Stack
network/examples/droptail_vs_red.cc:  d.InstallStack (stack);
network/examples/droptail_vs_red.cc:  // Install on/off app on all right side nodes
network/examples/droptail_vs_red.cc:      sinkApps.Add (packetSinkHelper.Install (d.GetLeft (i)));
network/examples/droptail_vs_red.cc:      clientApps.Add (clientHelper.Install (d.GetRight (i)));
network/helper/node-container.h~: * nodes.  The helper Install methods usually take a NodeContainer as a
network/helper/packet-socket-helper.h:  void Install (Ptr<Node> node) const;
network/helper/packet-socket-helper.h:  void Install (std::string nodeName) const;
network/helper/packet-socket-helper.h:  void Install (NodeContainer c) const;
network/helper/net-device-container.h: * helper.  The helper Install method takes a NodeContainer which holds 
network/helper/packet-socket-helper.cc:PacketSocketHelper::Install (NodeContainer c) const
network/helper/packet-socket-helper.cc:      Install (*i);
network/helper/packet-socket-helper.cc:PacketSocketHelper::Install (Ptr<Node> node) const
network/helper/packet-socket-helper.cc:PacketSocketHelper::Install (std::string nodeName) const
network/helper/packet-socket-helper.cc:  Install (node);
network/helper/application-container.h: * helper.  The helper Install method takes a NodeContainer which holds 
network/helper/node-container.h: * nodes.  The helper Install methods usually take a NodeContainer as a
network/bindings/modulegen__gcc_ILP32.py:    ## packet-socket-helper.h (module 'network'): void ns3::PacketSocketHelper::Install(ns3::Ptr<ns3::Node> node) const [member function]
network/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
network/bindings/modulegen__gcc_ILP32.py:    ## packet-socket-helper.h (module 'network'): void ns3::PacketSocketHelper::Install(std::string nodeName) const [member function]
network/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
network/bindings/modulegen__gcc_ILP32.py:    ## packet-socket-helper.h (module 'network'): void ns3::PacketSocketHelper::Install(ns3::NodeContainer c) const [member function]
network/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
network/bindings/modulegen__gcc_LP64.py:    ## packet-socket-helper.h (module 'network'): void ns3::PacketSocketHelper::Install(ns3::Ptr<ns3::Node> node) const [member function]
network/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
network/bindings/modulegen__gcc_LP64.py:    ## packet-socket-helper.h (module 'network'): void ns3::PacketSocketHelper::Install(std::string nodeName) const [member function]
network/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
network/bindings/modulegen__gcc_LP64.py:    ## packet-socket-helper.h (module 'network'): void ns3::PacketSocketHelper::Install(ns3::NodeContainer c) const [member function]
network/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
network/doc/queue.rst:  NetDeviceContainer devn0n2 = p2p.Install (n0n2);
network/doc/queue.rst:  NetDeviceContainer devn1n2 = p2p.Install (n1n2);
network/doc/queue.rst:  NetDeviceContainer devn2n3 = p2p.Install (n2n3);
netanim/test/netanim-test.cc:  devices = pointToPoint.Install (m_nodes);
netanim/test/netanim-test.cc:  stack.Install (m_nodes);
netanim/test/netanim-test.cc:  ApplicationContainer serverApps = echoServer.Install (m_nodes.Get (1));
netanim/test/netanim-test.cc:  ApplicationContainer clientApps = echoClient.Install (m_nodes.Get (0));
netanim/examples/star-animation.cc:  NS_LOG_INFO ("Install internet stack on all nodes.");
netanim/examples/star-animation.cc:  star.InstallStack (internet);
netanim/examples/star-animation.cc:  ApplicationContainer hubApp = packetSinkHelper.Install (star.GetHub ());
netanim/examples/star-animation.cc:      spokeApps.Add (onOffHelper.Install (star.GetSpokeNode (i)));
netanim/examples/uan-animation.cc:  socketHelper.Install (nc);
netanim/examples/uan-animation.cc:  socketHelper.Install (sink);
netanim/examples/uan-animation.cc:  NetDeviceContainer devices = uan.Install (nc, channel);
netanim/examples/uan-animation.cc:  NetDeviceContainer sinkdev = uan.Install (sink, channel);
netanim/examples/uan-animation.cc:    mobility.Install (sink);
netanim/examples/uan-animation.cc:    mobility.Install (nc);
netanim/examples/uan-animation.cc:    ApplicationContainer apps = app.Install (nc);
netanim/examples/dumbbell-animation.cc:  // Install Stack
netanim/examples/dumbbell-animation.cc:  d.InstallStack (stack);
netanim/examples/dumbbell-animation.cc:  // Install on/off app on all right side nodes
netanim/examples/dumbbell-animation.cc:      clientApps.Add (clientHelper.Install (d.GetRight (i)));
netanim/examples/wireless-animation.cc:  staDevices = wifi.Install (phy, mac, wifiStaNodes);
netanim/examples/wireless-animation.cc:  apDevices = wifi.Install (phy, mac, wifiApNode);
netanim/examples/wireless-animation.cc:  p2pDevices = pointToPoint.Install (p2pNodes);
netanim/examples/wireless-animation.cc:  csmaDevices = csma.Install (csmaNodes);
netanim/examples/wireless-animation.cc:  mobility.Install (wifiStaNodes);
netanim/examples/wireless-animation.cc:  mobility.Install (wifiApNode);
netanim/examples/wireless-animation.cc:  // Install internet stack
netanim/examples/wireless-animation.cc:  stack.Install (allNodes);
netanim/examples/wireless-animation.cc:  // Install Ipv4 addresses
netanim/examples/wireless-animation.cc:  // Install applications
netanim/examples/wireless-animation.cc:  ApplicationContainer serverApps = echoServer.Install (csmaNodes.Get (1));
netanim/examples/wireless-animation.cc:  ApplicationContainer clientApps = echoClient.Install (wifiStaNodes);
netanim/examples/dynamic_linknode.cc:  // Install Stack
netanim/examples/dynamic_linknode.cc:  d.InstallStack (stack);
netanim/examples/dynamic_linknode.cc:  // Install on/off app on all right side nodes
netanim/examples/dynamic_linknode.cc:      clientApps.Add (clientHelper.Install (d.GetRight (i)));
netanim/examples/resources_demo.cc:  // Install Stack
netanim/examples/resources_demo.cc:  d.InstallStack (stack);
netanim/examples/resources_demo.cc:  // Install on/off app on all right side nodes
netanim/examples/resources_demo.cc:      clientApps.Add (clientHelper.Install (d.GetRight (i)));
netanim/examples/grid-animation.cc:  // Install stack on Grid
netanim/examples/grid-animation.cc:  grid.InstallStack (stack);
netanim/examples/grid-animation.cc:  clientApps.Add (clientHelper.Install (grid.GetNode (0,0)));
nix-vector-routing/examples/nix-simple.cc:  stack.SetRoutingHelper (list); // has effect on the next Install ()
nix-vector-routing/examples/nix-simple.cc:  stack.Install (allNodes);
nix-vector-routing/examples/nix-simple.cc:  devices12 = pointToPoint.Install (nodes12);
nix-vector-routing/examples/nix-simple.cc:  devices23 = pointToPoint.Install (nodes23);
nix-vector-routing/examples/nix-simple.cc:  devices34 = pointToPoint.Install (nodes34);
nix-vector-routing/examples/nix-simple.cc:  ApplicationContainer serverApps = echoServer.Install (nodes34.Get (1));
nix-vector-routing/examples/nix-simple.cc:  ApplicationContainer clientApps = echoClient.Install (nodes12.Get (0));
nix-vector-routing/examples/nms-p2p-nix.cc:      stack.SetRoutingHelper (list); // has effect on the next Install ()
nix-vector-routing/examples/nms-p2p-nix.cc:          stack.Install (nodes_net0[z][i]);
nix-vector-routing/examples/nms-p2p-nix.cc:          ndc0[i] = p2p_1gb5ms.Install (nodes_net0[z][i]);
nix-vector-routing/examples/nms-p2p-nix.cc:          stack.Install (nodes_net1[z][i]);
nix-vector-routing/examples/nms-p2p-nix.cc:          ndc1[i] = p2p_1gb5ms.Install (nodes_net1[z][i]);
nix-vector-routing/examples/nms-p2p-nix.cc:      ndc0_1 = p2p_1gb5ms.Install (net0_1);
nix-vector-routing/examples/nms-p2p-nix.cc:          stack.Install (nodes_net2[z][i]);
nix-vector-routing/examples/nms-p2p-nix.cc:          ndc2[i] = p2p_1gb5ms.Install (nodes_net2[z][i]);
nix-vector-routing/examples/nms-p2p-nix.cc:              stack.Install (nodes_net2LAN[z][i][j]);
nix-vector-routing/examples/nms-p2p-nix.cc:              ndc2LAN[i][j] = p2p_100mb1ms.Install (nodes_net2LAN[z][i][j]);
nix-vector-routing/examples/nms-p2p-nix.cc:          stack.Install (nodes_net3[z][i]);
nix-vector-routing/examples/nms-p2p-nix.cc:          ndc3[i] = p2p_1gb5ms.Install (nodes_net3[z][i]);
nix-vector-routing/examples/nms-p2p-nix.cc:              stack.Install (nodes_net3LAN[z][i][j]);
nix-vector-routing/examples/nms-p2p-nix.cc:              ndc3LAN[i][j] = p2p_100mb1ms.Install (nodes_net3LAN[z][i][j]);
nix-vector-routing/examples/nms-p2p-nix.cc:      stack.Install (nodes_netLR[z]);
nix-vector-routing/examples/nms-p2p-nix.cc:      ndcLR = p2p_1gb5ms.Install (nodes_netLR[z]);
nix-vector-routing/examples/nms-p2p-nix.cc:      ndc0_4 = p2p_1gb5ms.Install (net0_4);
nix-vector-routing/examples/nms-p2p-nix.cc:      ndc0_5 = p2p_1gb5ms.Install (net0_5);
nix-vector-routing/examples/nms-p2p-nix.cc:      ndc2_4a = p2p_1gb5ms.Install (net2_4a);
nix-vector-routing/examples/nms-p2p-nix.cc:      ndc2_4b = p2p_1gb5ms.Install (net2_4b);
nix-vector-routing/examples/nms-p2p-nix.cc:      ndc3_5a = p2p_1gb5ms.Install (net3_5a);
nix-vector-routing/examples/nms-p2p-nix.cc:      ndc3_5b = p2p_1gb5ms.Install (net3_5b);
nix-vector-routing/examples/nms-p2p-nix.cc:          ndc_ring[z] = p2p_2gb200ms.Install (nodes_ring[z]);
nix-vector-routing/examples/nms-p2p-nix.cc:              ApplicationContainer sinkApp = sinkHelper.Install (
nix-vector-routing/examples/nms-p2p-nix.cc:              clientApp.Add (client.Install (nodes_net1[x][r1].Get (0)));
nix-vector-routing/examples/nms-p2p-nix.cc:              ApplicationContainer sinkApp = sinkHelper.Install (
nix-vector-routing/examples/nms-p2p-nix.cc:              clientApp.Add (client.Install (nodes_net1[x][r1].Get (0)));
nix-vector-routing/helper/ipv4-nix-vector-helper.h:  * This method will be called by ns3::InternetStackHelper::Install
nix-vector-routing/doc/nix-vector-routing.h: *    stack.Install (allNodes);
brite/test/brite-test-topology.cc:  stack.Install (source);
brite/test/brite-test-topology.cc:  stack.Install (sink);
brite/test/brite-test-topology.cc:  p2pSourceDevices = p2p.Install (source);
brite/test/brite-test-topology.cc:  p2pSinkDevices = p2p.Install (sink);
brite/test/brite-test-topology.cc:  ApplicationContainer apps = onOff.Install (source.Get (0));
brite/test/brite-test-topology.cc:  apps = sinkHelper.Install (sink.Get (0));
brite/examples/brite-MPI-example.cc:  stack.Install (client);
brite/examples/brite-MPI-example.cc:  stack.Install (server);
brite/examples/brite-MPI-example.cc:  p2pClientDevices = p2p.Install (client);
brite/examples/brite-MPI-example.cc:  p2pServerDevices = p2p.Install (server);
brite/examples/brite-MPI-example.cc:  //only has two systems in this example.  Install applications only on nodes in my system
brite/examples/brite-MPI-example.cc:      sinkApps.Add (packetSinkHelper.Install (server.Get (0)));
brite/examples/brite-MPI-example.cc:      clientApps.Add (clientHelper.Install (client.Get (0)));
brite/examples/brite-generic-example.cc:  stack.Install (client);
brite/examples/brite-generic-example.cc:  stack.Install (server);
brite/examples/brite-generic-example.cc:  p2pClientDevices = p2p.Install (client);
brite/examples/brite-generic-example.cc:  p2pServerDevices = p2p.Install (server);
brite/examples/brite-generic-example.cc:  ApplicationContainer serverApps = echoServer.Install (server.Get (0));
brite/examples/brite-generic-example.cc:  ApplicationContainer clientApps = echoClient.Install (client.Get (0));
brite/helper/brite-topology-helper.cc:  stack.Install (m_nodes);
brite/helper/brite-topology-helper.cc:  stack.Install (m_nodes);
brite/helper/brite-topology-helper.cc:      m_netDevices.push_back ( new NetDeviceContainer ( m_britePointToPointHelper.Install (m_nodes.Get ((*it).srcId), m_nodes.Get ((*it).destId))));
aodv/test/bug-772.cc:  mobility.Install (*m_nodes);
aodv/test/bug-772.cc:  NetDeviceContainer devices = wifi.Install (wifiPhy, wifiMac, *m_nodes); 
aodv/test/bug-772.cc:  internetStack.Install (*m_nodes);
aodv/test/bug-772.cc:  ApplicationContainer app = onoff.Install (m_nodes->Get (0));
aodv/test/bug-772.cc:  app = sink.Install (m_nodes->Get (m_size - 1));
aodv/test/loopback.cc:  NetDeviceContainer devices = wifi.Install (wifiPhy, wifiMac, nodes); 
aodv/test/loopback.cc:  internetStack.Install (nodes);
aodv/test/aodv-regression.cc:  mobility.Install (*m_nodes);
aodv/test/aodv-regression.cc:  NetDeviceContainer devices = wifi.Install (wifiPhy, wifiMac, *m_nodes); 
aodv/test/aodv-regression.cc:  internetStack.Install (*m_nodes);
aodv/test/aodv-regression.cc:  ApplicationContainer p = ping.Install (m_nodes->Get (0));
aodv/examples/aodv.cc:  void InstallInternetStack ();
aodv/examples/aodv.cc:  void InstallApplications ();
aodv/examples/aodv.cc:  InstallInternetStack ();
aodv/examples/aodv.cc:  InstallApplications ();
aodv/examples/aodv.cc:  mobility.Install (nodes);
aodv/examples/aodv.cc:  devices = wifi.Install (wifiPhy, wifiMac, nodes); 
aodv/examples/aodv.cc:AodvExample::InstallInternetStack ()
aodv/examples/aodv.cc:  stack.SetRoutingHelper (aodv); // has effect on the next Install ()
aodv/examples/aodv.cc:  stack.Install (nodes);
aodv/examples/aodv.cc:AodvExample::InstallApplications ()
aodv/examples/aodv.cc:  ApplicationContainer p = ping.Install (nodes.Get (0));
aodv/helper/aodv-helper.h:   * This method will be called by ns3::InternetStackHelper::Install
aodv/helper/aodv-helper.h:   * have been assigned.  The Install() method of the InternetStackHelper
inci/model/ns3-server.cc~:			my_nodeManagerPtr->InstallCommunicationModule(*moduleIt);
inci/model/ns3-server.cc~:			NS_LOG_UNCOND(Simulator::Now().GetSeconds() << " Install on node " << nodeId << " com " << cadena);
inci/model/ns3-server.cc~:			my_nodeManagerPtr->InstallCommunicationModule(*moduleIt);
inci/model/ns3-server.cc:			my_nodeManagerPtr->InstallCommunicationModule(*moduleIt);
inci/model/ns3-server.cc:			NS_LOG_UNCOND(Simulator::Now().GetSeconds() << " Install on node " << nodeId << " com " << cadena);
inci/model/ns3-server.cc:			my_nodeManagerPtr->InstallCommunicationModule(*moduleIt);
csma-layout/model/csma-star-helper.h:  void InstallStack (InternetStackHelper stack);
csma-layout/model/csma-star-helper.cc:      NetDeviceContainer nd = csmaHelper.Install (nodes);
csma-layout/model/csma-star-helper.cc:CsmaStarHelper::InstallStack (InternetStackHelper stack)
csma-layout/model/csma-star-helper.cc:  stack.Install (m_hub);
csma-layout/model/csma-star-helper.cc:  stack.Install (m_spokes);
csma-layout/examples/csma-star.cc:      fillDevices.Add (csma.Install (newNodes, csmaChannel));
csma-layout/examples/csma-star.cc:  NS_LOG_INFO ("Install internet stack on all nodes.");
csma-layout/examples/csma-star.cc:  star.InstallStack (internet);
csma-layout/examples/csma-star.cc:  internet.Install (fillNodes);
csma-layout/examples/csma-star.cc:      ApplicationContainer hubApp = packetSinkHelper.Install (star.GetHub ());
csma-layout/examples/csma-star.cc:      ApplicationContainer hubApp6 = packetSinkHelper6.Install (star.GetHub ());
csma-layout/examples/csma-star.cc:      spokeApps.Add (onOffHelper.Install (star.GetSpokeNode (i)));
csma-layout/examples/csma-star.cc:      fillApps.Add (onOffHelper.Install (fillNodes.Get (i)));
csma-layout/bindings/modulegen__gcc_ILP32.py:    ## csma-star-helper.h (module 'csma-layout'): void ns3::CsmaStarHelper::InstallStack(ns3::InternetStackHelper stack) [member function]
csma-layout/bindings/modulegen__gcc_ILP32.py:    cls.add_method('InstallStack', 
csma-layout/bindings/modulegen__gcc_ILP32.py:    ## csma-helper.h (module 'csma'): ns3::NetDeviceContainer ns3::CsmaHelper::Install(ns3::Ptr<ns3::Node> node) const [member function]
csma-layout/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
csma-layout/bindings/modulegen__gcc_ILP32.py:    ## csma-helper.h (module 'csma'): ns3::NetDeviceContainer ns3::CsmaHelper::Install(std::string name) const [member function]
csma-layout/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
csma-layout/bindings/modulegen__gcc_ILP32.py:    ## csma-helper.h (module 'csma'): ns3::NetDeviceContainer ns3::CsmaHelper::Install(ns3::Ptr<ns3::Node> node, ns3::Ptr<ns3::CsmaChannel> channel) const [member function]
csma-layout/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
csma-layout/bindings/modulegen__gcc_ILP32.py:    ## csma-helper.h (module 'csma'): ns3::NetDeviceContainer ns3::CsmaHelper::Install(ns3::Ptr<ns3::Node> node, std::string channelName) const [member function]
csma-layout/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
csma-layout/bindings/modulegen__gcc_ILP32.py:    ## csma-helper.h (module 'csma'): ns3::NetDeviceContainer ns3::CsmaHelper::Install(std::string nodeName, ns3::Ptr<ns3::CsmaChannel> channel) const [member function]
csma-layout/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
csma-layout/bindings/modulegen__gcc_ILP32.py:    ## csma-helper.h (module 'csma'): ns3::NetDeviceContainer ns3::CsmaHelper::Install(std::string nodeName, std::string channelName) const [member function]
csma-layout/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
csma-layout/bindings/modulegen__gcc_ILP32.py:    ## csma-helper.h (module 'csma'): ns3::NetDeviceContainer ns3::CsmaHelper::Install(ns3::NodeContainer const & c) const [member function]
csma-layout/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
csma-layout/bindings/modulegen__gcc_ILP32.py:    ## csma-helper.h (module 'csma'): ns3::NetDeviceContainer ns3::CsmaHelper::Install(ns3::NodeContainer const & c, ns3::Ptr<ns3::CsmaChannel> channel) const [member function]
csma-layout/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
csma-layout/bindings/modulegen__gcc_ILP32.py:    ## csma-helper.h (module 'csma'): ns3::NetDeviceContainer ns3::CsmaHelper::Install(ns3::NodeContainer const & c, std::string channelName) const [member function]
csma-layout/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
csma-layout/bindings/modulegen__gcc_ILP32.py:    ## internet-stack-helper.h (module 'internet'): void ns3::InternetStackHelper::Install(std::string nodeName) const [member function]
csma-layout/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
csma-layout/bindings/modulegen__gcc_ILP32.py:    ## internet-stack-helper.h (module 'internet'): void ns3::InternetStackHelper::Install(ns3::Ptr<ns3::Node> node) const [member function]
csma-layout/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
csma-layout/bindings/modulegen__gcc_ILP32.py:    ## internet-stack-helper.h (module 'internet'): void ns3::InternetStackHelper::Install(ns3::NodeContainer c) const [member function]
csma-layout/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
csma-layout/bindings/modulegen__gcc_ILP32.py:    ## internet-stack-helper.h (module 'internet'): void ns3::InternetStackHelper::InstallAll() const [member function]
csma-layout/bindings/modulegen__gcc_ILP32.py:    cls.add_method('InstallAll', 
csma-layout/bindings/modulegen__gcc_ILP32.py:    ## internet-stack-helper.h (module 'internet'): void ns3::InternetStackHelper::SetIpv4StackInstall(bool enable) [member function]
csma-layout/bindings/modulegen__gcc_ILP32.py:    cls.add_method('SetIpv4StackInstall', 
csma-layout/bindings/modulegen__gcc_ILP32.py:    ## internet-stack-helper.h (module 'internet'): void ns3::InternetStackHelper::SetIpv6StackInstall(bool enable) [member function]
csma-layout/bindings/modulegen__gcc_ILP32.py:    cls.add_method('SetIpv6StackInstall', 
csma-layout/bindings/modulegen__gcc_LP64.py:    ## csma-star-helper.h (module 'csma-layout'): void ns3::CsmaStarHelper::InstallStack(ns3::InternetStackHelper stack) [member function]
csma-layout/bindings/modulegen__gcc_LP64.py:    cls.add_method('InstallStack', 
csma-layout/bindings/modulegen__gcc_LP64.py:    ## csma-helper.h (module 'csma'): ns3::NetDeviceContainer ns3::CsmaHelper::Install(ns3::Ptr<ns3::Node> node) const [member function]
csma-layout/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
csma-layout/bindings/modulegen__gcc_LP64.py:    ## csma-helper.h (module 'csma'): ns3::NetDeviceContainer ns3::CsmaHelper::Install(std::string name) const [member function]
csma-layout/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
csma-layout/bindings/modulegen__gcc_LP64.py:    ## csma-helper.h (module 'csma'): ns3::NetDeviceContainer ns3::CsmaHelper::Install(ns3::Ptr<ns3::Node> node, ns3::Ptr<ns3::CsmaChannel> channel) const [member function]
csma-layout/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
csma-layout/bindings/modulegen__gcc_LP64.py:    ## csma-helper.h (module 'csma'): ns3::NetDeviceContainer ns3::CsmaHelper::Install(ns3::Ptr<ns3::Node> node, std::string channelName) const [member function]
csma-layout/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
csma-layout/bindings/modulegen__gcc_LP64.py:    ## csma-helper.h (module 'csma'): ns3::NetDeviceContainer ns3::CsmaHelper::Install(std::string nodeName, ns3::Ptr<ns3::CsmaChannel> channel) const [member function]
csma-layout/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
csma-layout/bindings/modulegen__gcc_LP64.py:    ## csma-helper.h (module 'csma'): ns3::NetDeviceContainer ns3::CsmaHelper::Install(std::string nodeName, std::string channelName) const [member function]
csma-layout/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
csma-layout/bindings/modulegen__gcc_LP64.py:    ## csma-helper.h (module 'csma'): ns3::NetDeviceContainer ns3::CsmaHelper::Install(ns3::NodeContainer const & c) const [member function]
csma-layout/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
csma-layout/bindings/modulegen__gcc_LP64.py:    ## csma-helper.h (module 'csma'): ns3::NetDeviceContainer ns3::CsmaHelper::Install(ns3::NodeContainer const & c, ns3::Ptr<ns3::CsmaChannel> channel) const [member function]
csma-layout/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
csma-layout/bindings/modulegen__gcc_LP64.py:    ## csma-helper.h (module 'csma'): ns3::NetDeviceContainer ns3::CsmaHelper::Install(ns3::NodeContainer const & c, std::string channelName) const [member function]
csma-layout/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
csma-layout/bindings/modulegen__gcc_LP64.py:    ## internet-stack-helper.h (module 'internet'): void ns3::InternetStackHelper::Install(std::string nodeName) const [member function]
csma-layout/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
csma-layout/bindings/modulegen__gcc_LP64.py:    ## internet-stack-helper.h (module 'internet'): void ns3::InternetStackHelper::Install(ns3::Ptr<ns3::Node> node) const [member function]
csma-layout/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
csma-layout/bindings/modulegen__gcc_LP64.py:    ## internet-stack-helper.h (module 'internet'): void ns3::InternetStackHelper::Install(ns3::NodeContainer c) const [member function]
csma-layout/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
csma-layout/bindings/modulegen__gcc_LP64.py:    ## internet-stack-helper.h (module 'internet'): void ns3::InternetStackHelper::InstallAll() const [member function]
csma-layout/bindings/modulegen__gcc_LP64.py:    cls.add_method('InstallAll', 
csma-layout/bindings/modulegen__gcc_LP64.py:    ## internet-stack-helper.h (module 'internet'): void ns3::InternetStackHelper::SetIpv4StackInstall(bool enable) [member function]
csma-layout/bindings/modulegen__gcc_LP64.py:    cls.add_method('SetIpv4StackInstall', 
csma-layout/bindings/modulegen__gcc_LP64.py:    ## internet-stack-helper.h (module 'internet'): void ns3::InternetStackHelper::SetIpv6StackInstall(bool enable) [member function]
csma-layout/bindings/modulegen__gcc_LP64.py:    cls.add_method('SetIpv6StackInstall', 
sixlowpan/examples/example-sixlowpan.cc:  internetv6.Install (all);
sixlowpan/examples/example-sixlowpan.cc:  NetDeviceContainer d2 = csma.Install (net2);
sixlowpan/examples/example-sixlowpan.cc:  NetDeviceContainer d1 = csma.Install (net1);
sixlowpan/examples/example-sixlowpan.cc:  NetDeviceContainer six1 = sixlowpan.Install (d1);
sixlowpan/examples/example-sixlowpan.cc:  ApplicationContainer apps = ping6.Install (net1.Get (0));
sixlowpan/examples/example-ping-lr-wpan.cc:  NetDeviceContainer lrwpanDevices = lrWpanHelper.Install(nodes);
sixlowpan/examples/example-ping-lr-wpan.cc:  mobility.Install (nodes);
sixlowpan/examples/example-ping-lr-wpan.cc:  internetv6.Install (nodes);
sixlowpan/examples/example-ping-lr-wpan.cc:  NetDeviceContainer devices = sixlowpan.Install (lrwpanDevices); 
sixlowpan/examples/example-ping-lr-wpan.cc:  ApplicationContainer apps = ping6.Install (nodes.Get (0));
sixlowpan/helper/sixlowpan-helper.cc:NetDeviceContainer SixLowPanHelper::Install (const NetDeviceContainer c)
sixlowpan/helper/sixlowpan-helper.cc:      NS_LOG_LOGIC ("**** Install 6LoWPAN on node " << node->GetId ());
sixlowpan/helper/sixlowpan-helper.h:   * SixlowpanHelper::Install.
sixlowpan/helper/sixlowpan-helper.h:   * \brief Install the SixLoWPAN stack on top of an existing NetDevice.
sixlowpan/helper/sixlowpan-helper.h:  NetDeviceContainer Install (NetDeviceContainer c);
sixlowpan/helper/sixlowpan-helper.h:  * have been assigned. The Install() method should have previously been
sixlowpan/bindings/modulegen__gcc_ILP32.py:    ## sixlowpan-helper.h (module 'sixlowpan'): ns3::NetDeviceContainer ns3::SixLowPanHelper::Install(ns3::NetDeviceContainer c) [member function]
sixlowpan/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
sixlowpan/bindings/modulegen__gcc_LP64.py:    ## sixlowpan-helper.h (module 'sixlowpan'): ns3::NetDeviceContainer ns3::SixLowPanHelper::Install(ns3::NetDeviceContainer c) [member function]
sixlowpan/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
uan/test/uan-energy-model-test.cc:  Ptr<UanNetDevice> devNode = uan.Install (m_node, channel);
uan/test/uan-energy-model-test.cc:  eh.Install (m_node);
uan/test/uan-energy-model-test.cc:  DeviceEnergyModelContainer cont = modemHelper.Install (devNode,source);
uan/test/uan-energy-model-test.cc:  Ptr<UanNetDevice> devGateway = uan.Install (m_gateway, channel);
uan/test/uan-energy-model-test.cc:  eh.Install (m_gateway);
uan/test/uan-energy-model-test.cc:  DeviceEnergyModelContainer cont2 = modemHelper.Install (devGateway, source2);
uan/test/uan-energy-model-test.cc:  Ptr<UanNetDevice> devNode = uan.Install (m_node, channel);
uan/test/uan-energy-model-test.cc:  eh.Install (m_node);
uan/test/uan-energy-model-test.cc:  DeviceEnergyModelContainer cont = modemHelper.Install (devNode,source);
uan/examples/uan-cw-example.cc:  socketHelper.Install (nc);
uan/examples/uan-cw-example.cc:  socketHelper.Install (sink);
uan/examples/uan-cw-example.cc:  NetDeviceContainer devices = uan.Install (nc, channel);
uan/examples/uan-cw-example.cc:  NetDeviceContainer sinkdev = uan.Install (sink, channel);
uan/examples/uan-cw-example.cc:    mobility.Install (sink);
uan/examples/uan-cw-example.cc:    mobility.Install (nc);
uan/examples/uan-cw-example.cc:    ApplicationContainer apps = app.Install (nc);
uan/examples/uan-rc-example.cc:  NetDeviceContainer sinkDev = uan.Install (sink, chan);
uan/examples/uan-rc-example.cc:  NetDeviceContainer devices = uan.Install (nodes, chan);
uan/examples/uan-rc-example.cc:  mobility.Install (sink);
uan/examples/uan-rc-example.cc:  mobility.Install (nodes);
uan/examples/uan-rc-example.cc:  pktskth.Install (nodes);
uan/examples/uan-rc-example.cc:  pktskth.Install (sink);
uan/examples/uan-rc-example.cc:  ApplicationContainer apps = app.Install (nodes);
uan/helper/acoustic-modem-energy-model-helper.cc:AcousticModemEnergyModelHelper::DoInstall (Ptr<NetDevice> device,
uan/helper/uan-helper.h:  NetDeviceContainer Install (NodeContainer c) const;
uan/helper/uan-helper.h:  NetDeviceContainer Install (NodeContainer c, Ptr<UanChannel> channel) const;
uan/helper/uan-helper.h:  Ptr<UanNetDevice> Install (Ptr<Node> node, Ptr<UanChannel> channel) const;
uan/helper/uan-helper.h:  * have been assigned. The Install() method should have previously been
uan/helper/acoustic-modem-energy-model-helper.h:   * Implements DeviceEnergyModel::Install.
uan/helper/acoustic-modem-energy-model-helper.h:  virtual Ptr<DeviceEnergyModel> DoInstall (Ptr<NetDevice> device,
uan/helper/uan-helper.cc:UanHelper::Install (NodeContainer c) const
uan/helper/uan-helper.cc:  return Install (c, channel);
uan/helper/uan-helper.cc:UanHelper::Install (NodeContainer c, Ptr<UanChannel> channel) const
uan/helper/uan-helper.cc:      Ptr<UanNetDevice> device = Install (node, channel);
uan/helper/uan-helper.cc:UanHelper::Install (Ptr<Node> node, Ptr<UanChannel> channel) const
uan/bindings/modulegen__gcc_ILP32.py:    ## energy-model-helper.h (module 'energy'): ns3::DeviceEnergyModelContainer ns3::DeviceEnergyModelHelper::Install(ns3::Ptr<ns3::NetDevice> device, ns3::Ptr<ns3::EnergySource> source) const [member function]
uan/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
uan/bindings/modulegen__gcc_ILP32.py:    ## energy-model-helper.h (module 'energy'): ns3::DeviceEnergyModelContainer ns3::DeviceEnergyModelHelper::Install(ns3::NetDeviceContainer deviceContainer, ns3::EnergySourceContainer sourceContainer) const [member function]
uan/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
uan/bindings/modulegen__gcc_ILP32.py:    ## energy-model-helper.h (module 'energy'): ns3::Ptr<ns3::DeviceEnergyModel> ns3::DeviceEnergyModelHelper::DoInstall(ns3::Ptr<ns3::NetDevice> device, ns3::Ptr<ns3::EnergySource> source) const [member function]
uan/bindings/modulegen__gcc_ILP32.py:    cls.add_method('DoInstall', 
uan/bindings/modulegen__gcc_ILP32.py:    ## energy-model-helper.h (module 'energy'): ns3::EnergySourceContainer ns3::EnergySourceHelper::Install(ns3::Ptr<ns3::Node> node) const [member function]
uan/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
uan/bindings/modulegen__gcc_ILP32.py:    ## energy-model-helper.h (module 'energy'): ns3::EnergySourceContainer ns3::EnergySourceHelper::Install(ns3::NodeContainer c) const [member function]
uan/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
uan/bindings/modulegen__gcc_ILP32.py:    ## energy-model-helper.h (module 'energy'): ns3::EnergySourceContainer ns3::EnergySourceHelper::Install(std::string nodeName) const [member function]
uan/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
uan/bindings/modulegen__gcc_ILP32.py:    ## energy-model-helper.h (module 'energy'): ns3::EnergySourceContainer ns3::EnergySourceHelper::InstallAll() const [member function]
uan/bindings/modulegen__gcc_ILP32.py:    cls.add_method('InstallAll', 
uan/bindings/modulegen__gcc_ILP32.py:    ## energy-model-helper.h (module 'energy'): ns3::Ptr<ns3::EnergySource> ns3::EnergySourceHelper::DoInstall(ns3::Ptr<ns3::Node> node) const [member function]
uan/bindings/modulegen__gcc_ILP32.py:    cls.add_method('DoInstall', 
uan/bindings/modulegen__gcc_ILP32.py:    ## uan-helper.h (module 'uan'): ns3::NetDeviceContainer ns3::UanHelper::Install(ns3::NodeContainer c) const [member function]
uan/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
uan/bindings/modulegen__gcc_ILP32.py:    ## uan-helper.h (module 'uan'): ns3::NetDeviceContainer ns3::UanHelper::Install(ns3::NodeContainer c, ns3::Ptr<ns3::UanChannel> channel) const [member function]
uan/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
uan/bindings/modulegen__gcc_ILP32.py:    ## uan-helper.h (module 'uan'): ns3::Ptr<ns3::UanNetDevice> ns3::UanHelper::Install(ns3::Ptr<ns3::Node> node, ns3::Ptr<ns3::UanChannel> channel) const [member function]
uan/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
uan/bindings/modulegen__gcc_ILP32.py:    ## acoustic-modem-energy-model-helper.h (module 'uan'): ns3::Ptr<ns3::DeviceEnergyModel> ns3::AcousticModemEnergyModelHelper::DoInstall(ns3::Ptr<ns3::NetDevice> device, ns3::Ptr<ns3::EnergySource> source) const [member function]
uan/bindings/modulegen__gcc_ILP32.py:    cls.add_method('DoInstall', 
uan/bindings/modulegen__gcc_LP64.py:    ## energy-model-helper.h (module 'energy'): ns3::DeviceEnergyModelContainer ns3::DeviceEnergyModelHelper::Install(ns3::Ptr<ns3::NetDevice> device, ns3::Ptr<ns3::EnergySource> source) const [member function]
uan/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
uan/bindings/modulegen__gcc_LP64.py:    ## energy-model-helper.h (module 'energy'): ns3::DeviceEnergyModelContainer ns3::DeviceEnergyModelHelper::Install(ns3::NetDeviceContainer deviceContainer, ns3::EnergySourceContainer sourceContainer) const [member function]
uan/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
uan/bindings/modulegen__gcc_LP64.py:    ## energy-model-helper.h (module 'energy'): ns3::Ptr<ns3::DeviceEnergyModel> ns3::DeviceEnergyModelHelper::DoInstall(ns3::Ptr<ns3::NetDevice> device, ns3::Ptr<ns3::EnergySource> source) const [member function]
uan/bindings/modulegen__gcc_LP64.py:    cls.add_method('DoInstall', 
uan/bindings/modulegen__gcc_LP64.py:    ## energy-model-helper.h (module 'energy'): ns3::EnergySourceContainer ns3::EnergySourceHelper::Install(ns3::Ptr<ns3::Node> node) const [member function]
uan/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
uan/bindings/modulegen__gcc_LP64.py:    ## energy-model-helper.h (module 'energy'): ns3::EnergySourceContainer ns3::EnergySourceHelper::Install(ns3::NodeContainer c) const [member function]
uan/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
uan/bindings/modulegen__gcc_LP64.py:    ## energy-model-helper.h (module 'energy'): ns3::EnergySourceContainer ns3::EnergySourceHelper::Install(std::string nodeName) const [member function]
uan/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
uan/bindings/modulegen__gcc_LP64.py:    ## energy-model-helper.h (module 'energy'): ns3::EnergySourceContainer ns3::EnergySourceHelper::InstallAll() const [member function]
uan/bindings/modulegen__gcc_LP64.py:    cls.add_method('InstallAll', 
uan/bindings/modulegen__gcc_LP64.py:    ## energy-model-helper.h (module 'energy'): ns3::Ptr<ns3::EnergySource> ns3::EnergySourceHelper::DoInstall(ns3::Ptr<ns3::Node> node) const [member function]
uan/bindings/modulegen__gcc_LP64.py:    cls.add_method('DoInstall', 
uan/bindings/modulegen__gcc_LP64.py:    ## uan-helper.h (module 'uan'): ns3::NetDeviceContainer ns3::UanHelper::Install(ns3::NodeContainer c) const [member function]
uan/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
uan/bindings/modulegen__gcc_LP64.py:    ## uan-helper.h (module 'uan'): ns3::NetDeviceContainer ns3::UanHelper::Install(ns3::NodeContainer c, ns3::Ptr<ns3::UanChannel> channel) const [member function]
uan/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
uan/bindings/modulegen__gcc_LP64.py:    ## uan-helper.h (module 'uan'): ns3::Ptr<ns3::UanNetDevice> ns3::UanHelper::Install(ns3::Ptr<ns3::Node> node, ns3::Ptr<ns3::UanChannel> channel) const [member function]
uan/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
uan/bindings/modulegen__gcc_LP64.py:    ## acoustic-modem-energy-model-helper.h (module 'uan'): ns3::Ptr<ns3::DeviceEnergyModel> ns3::AcousticModemEnergyModelHelper::DoInstall(ns3::Ptr<ns3::NetDevice> device, ns3::Ptr<ns3::EnergySource> source) const [member function]
uan/bindings/modulegen__gcc_LP64.py:    cls.add_method('DoInstall', 
openflow/examples/openflow-switch.cc:      NetDeviceContainer link = csma.Install (NodeContainer (terminals.Get (i), csmaSwitch));
openflow/examples/openflow-switch.cc:      swtch.Install (switchNode, switchDevices, controller);
openflow/examples/openflow-switch.cc:      swtch.Install (switchNode, switchDevices, controller);
openflow/examples/openflow-switch.cc:  internet.Install (terminals);
openflow/examples/openflow-switch.cc:  ApplicationContainer app = onoff.Install (terminals.Get (0));
openflow/examples/openflow-switch.cc:  app = sink.Install (terminals.Get (1));
openflow/examples/openflow-switch.cc:  app = onoff.Install (terminals.Get (3));
openflow/examples/openflow-switch.cc:  app = sink.Install (terminals.Get (0));
openflow/helper/openflow-switch-helper.h:   * OpenFlowSwitchHelper::Install
openflow/helper/openflow-switch-helper.h:  Install (Ptr<Node> node, NetDeviceContainer c, Ptr<ns3::ofi::Controller> controller);
openflow/helper/openflow-switch-helper.h:  Install (Ptr<Node> node, NetDeviceContainer c);
openflow/helper/openflow-switch-helper.h:  Install (std::string nodeName, NetDeviceContainer c);
openflow/helper/openflow-switch-helper.cc:OpenFlowSwitchHelper::Install (Ptr<Node> node, NetDeviceContainer c, Ptr<ns3::ofi::Controller> controller)
openflow/helper/openflow-switch-helper.cc:  NS_LOG_INFO ("**** Install switch device on node " << node->GetId ());
openflow/helper/openflow-switch-helper.cc:OpenFlowSwitchHelper::Install (Ptr<Node> node, NetDeviceContainer c)
openflow/helper/openflow-switch-helper.cc:  NS_LOG_INFO ("**** Install switch device on node " << node->GetId ());
openflow/helper/openflow-switch-helper.cc:OpenFlowSwitchHelper::Install (std::string nodeName, NetDeviceContainer c)
openflow/helper/openflow-switch-helper.cc:  return Install (node, c);
inci-utils/model/wifi-ip-installer.h:class WifiIpInstaller : public CommModuleInstaller
inci-utils/model/wifi-ip-installer.h:    WifiIpInstaller();
inci-utils/model/wifi-ip-installer.h:    void Install (NodeContainer container); 
inci-utils/model/lte-installer.h~:class LteInstaller : public CommModuleInstaller
inci-utils/model/lte-installer.h~:    LteInstaller(void);
inci-utils/model/lte-installer.h~:    void Install (NodeContainer container); 
inci-utils/model/lte-installer.h~:    void ProcessApplicationInstall (xmlTextReaderPtr reader);
inci-utils/model/lte-installer.h~:    ~LteInstaller();
inci-utils/model/lte-installer.h~:    virtual void DoInstall (NodeContainer container, NetDeviceContainer * createdDevices) = 0; 
inci-utils/model/dvbh-installer.h:class DvbhInstaller : public CommModuleInstaller
inci-utils/model/dvbh-installer.h:    DvbhInstaller(void);    
inci-utils/model/dvbh-installer.h:    void Install (NodeContainer container); 
inci-utils/model/dvbh-installer.h:    void ProcessApplicationInstall (xmlTextReaderPtr reader);
inci-utils/model/dvbh-installer.h:    void ProcessStreamInstall (xmlTextReaderPtr reader);
inci-utils/model/dvbh-installer.h:    ~DvbhInstaller();
inci-utils/model/dvbh-installer.h:    virtual void DoInstall (NodeContainer container, NetDeviceContainer devices) = 0;
inci-utils/model/lte-bs-installer.cc~:NS_LOG_COMPONENT_DEFINE ("LteBsInstaller");
inci-utils/model/lte-bs-installer.cc~:NS_OBJECT_ENSURE_REGISTERED (LteBsInstaller);
inci-utils/model/lte-bs-installer.cc~:TypeId LteBsInstaller::GetTypeId (void)
inci-utils/model/lte-bs-installer.cc~:  static TypeId tid = TypeId ("ns3::LteBsInstaller")
inci-utils/model/lte-bs-installer.cc~:    .AddConstructor<LteBsInstaller>()
inci-utils/model/lte-bs-installer.cc~:LteBsInstaller::LteBsInstaller ()
inci-utils/model/lte-bs-installer.cc~:LteBsInstaller::DoInstall (NodeContainer container, NetDeviceContainer * createdDevices) 
inci-utils/model/lte-bs-installer.cc~:  NS_LOG_INFO ("*** LteBsInstaller ***");
inci-utils/model/lte-bs-installer.cc~:    	  facilitiesHelper.Install(*it);
inci-utils/model/umts-vehicle-installer.h:class UmtsVehicleInstaller : public UmtsInstaller
inci-utils/model/umts-vehicle-installer.h:     void DoInstall (NodeContainer container,NetDeviceContainer devices, STACK stack);
inci-utils/model/wimax-vehicle-installer.h:class WimaxVehicleInstaller : public WimaxInstaller
inci-utils/model/wimax-vehicle-installer.h:    NetDeviceContainer DoInstall (NodeContainer container);
inci-utils/model/wimax-vehicle-installer.h:    void DoProcessApplicationInstall (std::string appName);
inci-utils/model/wimax-installer.h~:class WimaxInstaller : public CommModuleInstaller
inci-utils/model/wimax-installer.h~:    WimaxInstaller(void);    
inci-utils/model/wimax-installer.h~:    void Install (NodeContainer container); 
inci-utils/model/wimax-installer.h~:    ~WimaxInstaller();
inci-utils/model/wimax-installer.h~:    virtual NetDeviceContainer DoInstall (NodeContainer container) = 0;
inci-utils/model/wimax-installer.h~:    void ProcessApplicationInstall (xmlTextReaderPtr reader);
inci-utils/model/wimax-installer.h~:    virtual void DoProcessApplicationInstall (std::string appName) {};
inci-utils/model/comm-module-installer.h: * @class CommModuleInstaller
inci-utils/model/comm-module-installer.h: * @brief The base class CommModuleInstaller can be derived to implement a specific installer which allows attach a communication module to a node.
inci-utils/model/comm-module-installer.h:class CommModuleInstaller : public Object
inci-utils/model/comm-module-installer.h:    virtual void Install (NodeContainer container) = 0;
inci-utils/model/comm-module-installer.h:    virtual void Install (NodeContainer container, STACK stack){}; 
inci-utils/model/comm-module-installer.h:    virtual void RelateInstaller (Ptr<CommModuleInstaller> installer) {};
inci-utils/model/comm-module-installer.h:    virtual ~CommModuleInstaller();
inci-utils/model/iTETRISNodeManager.h:     * @brief Attach a new communication module Installer to the NodeManager
inci-utils/model/iTETRISNodeManager.h:    void AttachInstaller (std::string typeOfModule, Ptr<CommModuleInstaller> installer); 
inci-utils/model/iTETRISNodeManager.h:     * @brief Install a new communication module ('typeOfModule') in the last node that has been created
inci-utils/model/iTETRISNodeManager.h:    NodeContainer* InstallCommunicationModule (std::string typeOfModule);
inci-utils/model/iTETRISNodeManager.h:     * @brief Install a new communication module ('typeOfModule') in the last node that has been created
inci-utils/model/iTETRISNodeManager.h:    NodeContainer* InstallCommunicationModule (std::string typeOfModule, STACK stack);  
inci-utils/model/iTETRISNodeManager.h:    Ptr<CommModuleInstaller> GetInstaller (std::string typeOfModule);
inci-utils/model/iTETRISNodeManager.h:    typedef std::map<std::string, Ptr<CommModuleInstaller> > InstallerContainerList; 
inci-utils/model/iTETRISNodeManager.h:    InstallerContainerList m_itetrisInstallers;  
inci-utils/model/iTETRISNodeManager.h:    std::vector<Ptr<CommModuleInstaller> > m_defaultModules;
inci-utils/model/dvbh-vehicle-installer.cc:NS_LOG_COMPONENT_DEFINE ("DvbhVehicleInstaller");
inci-utils/model/dvbh-vehicle-installer.cc:NS_OBJECT_ENSURE_REGISTERED (DvbhVehicleInstaller);
inci-utils/model/dvbh-vehicle-installer.cc:TypeId DvbhVehicleInstaller::GetTypeId (void)
inci-utils/model/dvbh-vehicle-installer.cc:  static TypeId tid = TypeId ("ns3::DvbhVehicleInstaller")
inci-utils/model/dvbh-vehicle-installer.cc:    .AddConstructor<DvbhVehicleInstaller>()                
inci-utils/model/dvbh-vehicle-installer.cc:DvbhVehicleInstaller::DoInstall (NodeContainer container,NetDeviceContainer devices)
inci-utils/model/dvbh-vehicle-installer.cc:  NS_LOG_INFO ("*** DvbhVehicleInstaller ***");
inci-utils/model/dvbh-vehicle-installer.cc:          facilitiesHelper.Install (*i);
inci-utils/model/umts-installer.h:class UmtsInstaller : public CommModuleInstaller
inci-utils/model/umts-installer.h:    UmtsInstaller(void);
inci-utils/model/umts-installer.h:    void Install (NodeContainer container);
inci-utils/model/umts-installer.h:    void Install (NodeContainer container, STACK stack);
inci-utils/model/umts-installer.h:    void ProcessApplicationInstall (xmlTextReaderPtr reader);
inci-utils/model/umts-installer.h:    ~UmtsInstaller();
inci-utils/model/umts-installer.h:    virtual void DoInstall (NodeContainer container, NetDeviceContainer devices, STACK stack) = 0;
inci-utils/model/wave-rsu-installer.cc:NS_LOG_COMPONENT_DEFINE ("WaveRsuInstaller");
inci-utils/model/wave-rsu-installer.cc:NS_OBJECT_ENSURE_REGISTERED (WaveRsuInstaller);
inci-utils/model/wave-rsu-installer.cc:TypeId WaveRsuInstaller::GetTypeId (void)
inci-utils/model/wave-rsu-installer.cc:  static TypeId tid = TypeId ("ns3::WaveRsuInstaller")
inci-utils/model/wave-rsu-installer.cc:    .SetParent<WaveInstaller> ()     
inci-utils/model/wave-rsu-installer.cc:    .AddConstructor<WaveRsuInstaller> ()             
inci-utils/model/wave-rsu-installer.cc:WaveRsuInstaller::AllocateIpv6Prefix()
inci-utils/model/wave-rsu-installer.cc:	std::cout<<"WaveRsuInstaller::AllocateIpv6Prefix()"<<prefix<<std::endl;
inci-utils/model/wave-rsu-installer.cc:WaveRsuInstaller::AllocateIpv6Prefix()
inci-utils/model/wave-rsu-installer.cc:	std::cout<<"WaveRsuInstaller::AllocateIpv6Prefix()"<<prefix<<std::endl;
inci-utils/model/wave-rsu-installer.cc:WaveRsuInstaller::DoInstall (NodeContainer container, NetDeviceContainer cchDevices, NetDeviceContainer schDevices)
inci-utils/model/wave-rsu-installer.cc: //std::cout<<"WaveRsuInstaller::DoInstall"<<std::endl;
inci-utils/model/wave-rsu-installer.cc: //std::cout<<"WaveRsuInstaller::DoInstall: "<<pref2<<std::endl;
inci-utils/model/wave-rsu-installer.cc:          facilitiesHelper.Install (*i);
inci-utils/model/wave-rsu-installer.cc:         //std::cout<<"WaveRSUInstaller::DoInstall After facilities helper install"<<std::endl;
inci-utils/model/comm-module-installer.cc:NS_LOG_COMPONENT_DEFINE ("CommModuleInstaller");
inci-utils/model/comm-module-installer.cc:NS_OBJECT_ENSURE_REGISTERED (CommModuleInstaller);
inci-utils/model/comm-module-installer.cc:TypeId CommModuleInstaller::GetTypeId (void)
inci-utils/model/comm-module-installer.cc:  static TypeId tid = TypeId ("ns3::CommModuleInstaller")
inci-utils/model/comm-module-installer.cc:CommModuleInstaller::~CommModuleInstaller ()
inci-utils/model/itetris-network-transport-installer.cc~:NS_LOG_COMPONENT_DEFINE ("ItetrisNetworkTransportInstaller");
inci-utils/model/itetris-network-transport-installer.cc~:NS_OBJECT_ENSURE_REGISTERED (ItetrisNetworkTransportInstaller);
inci-utils/model/itetris-network-transport-installer.cc~:TypeId ItetrisNetworkTransportInstaller::GetTypeId (void)
inci-utils/model/itetris-network-transport-installer.cc~:  static TypeId tid = TypeId ("ns3::ItetrisNetworkTransportInstaller")
inci-utils/model/itetris-network-transport-installer.cc~:    .AddConstructor<ItetrisNetworkTransportInstaller> ()             
inci-utils/model/itetris-network-transport-installer.cc~:ItetrisNetworkTransportInstaller::ItetrisNetworkTransportInstaller () 
inci-utils/model/itetris-network-transport-installer.cc~:  stack.Setc2cStackInstall (true);  // -- false = Disable
inci-utils/model/itetris-network-transport-installer.cc~:  stack.SetIpv6StackInstall(true);
inci-utils/model/itetris-network-transport-installer.cc~:  stack.SetIpv4StackInstall(false);
inci-utils/model/itetris-network-transport-installer.cc~:ItetrisNetworkTransportInstaller::Install (NodeContainer container) {
inci-utils/model/itetris-network-transport-installer.cc~:std::cout<<"ItetrisNetworkTransportInstaller::Install!!!!!!!!!!!!!!!!!"<<std::endl;
inci-utils/model/itetris-network-transport-installer.cc~:  stack.Install (container);
inci-utils/model/tmc-installer.h:class TmcInstaller : public CommModuleInstaller
inci-utils/model/tmc-installer.h:    void Install (NodeContainer container);
inci-utils/model/wifi-vehicle-installer.h:class WifiVehicleInstaller : public WifiInstaller
inci-utils/model/wifi-vehicle-installer.h:    void Install (NodeContainer container); 
inci-utils/model/wifi-vehicle-installer.cc:NS_LOG_COMPONENT_DEFINE ("WifiVehicleInstaller");
inci-utils/model/wifi-vehicle-installer.cc:NS_OBJECT_ENSURE_REGISTERED (WifiVehicleInstaller);
inci-utils/model/wifi-vehicle-installer.cc:TypeId WifiVehicleInstaller::GetTypeId (void)
inci-utils/model/wifi-vehicle-installer.cc:  static TypeId tid = TypeId ("ns3::WifiVehicleInstaller")
inci-utils/model/wifi-vehicle-installer.cc:    .AddConstructor<WifiVehicleInstaller> ()             
inci-utils/model/wifi-vehicle-installer.cc:WifiVehicleInstaller::Install (NodeContainer container) 
inci-utils/model/wifi-vehicle-installer.cc:  NetDeviceContainer netDevices = wifi.Install (wifiPhy, wifiMac, container);
inci-utils/model/wifi-vehicle-installer.cc:WifiVehicleInstaller::ConfigureDerivedWifiStation (NodeContainer container, NetDeviceContainer devices)
inci-utils/model/wifi-vehicle-installer.cc:  NS_LOG_INFO ("WifiVehicleInstaller");
inci-utils/model/wifi-vehicle-installer.cc:          facilitiesHelper.Install (*i);
inci-utils/model/tmc-installer.cc:NS_LOG_COMPONENT_DEFINE ("TmcInstaller");
inci-utils/model/tmc-installer.cc:NS_OBJECT_ENSURE_REGISTERED (TmcInstaller);
inci-utils/model/tmc-installer.cc:TypeId TmcInstaller::GetTypeId (void)
inci-utils/model/tmc-installer.cc:  static TypeId tid = TypeId ("ns3::TmcInstaller")
inci-utils/model/tmc-installer.cc:    .SetParent<CommModuleInstaller> ()
inci-utils/model/tmc-installer.cc:    .AddConstructor<TmcInstaller> ()
inci-utils/model/tmc-installer.cc:TmcInstaller::Install (NodeContainer container)
inci-utils/model/tmc-installer.cc:  NS_LOG_INFO ("TmcInstaller");
inci-utils/model/tmc-installer.cc:          facilitiesHelper.Install (*i);
inci-utils/model/facilities-installer.cc:NS_LOG_COMPONENT_DEFINE ("FacilitiesInstaller");
inci-utils/model/facilities-installer.cc:NS_OBJECT_ENSURE_REGISTERED (FacilitiesInstaller);
inci-utils/model/facilities-installer.cc:TypeId FacilitiesInstaller::GetTypeId (void)
inci-utils/model/facilities-installer.cc:  static TypeId tid = TypeId ("ns3::FacilitiesInstaller")
inci-utils/model/facilities-installer.cc:    .AddConstructor<FacilitiesInstaller> ()             
inci-utils/model/facilities-installer.cc:FacilitiesInstaller::FacilitiesInstaller () 
inci-utils/model/facilities-installer.cc:FacilitiesInstaller::Install (NodeContainer container) 
inci-utils/model/facilities-installer.cc:  m_facilitiesHelper.Install (container);
inci-utils/model/wave-vehicle-installer.cc:NS_LOG_COMPONENT_DEFINE ("WaveVehicleInstaller");
inci-utils/model/wave-vehicle-installer.cc:	NS_OBJECT_ENSURE_REGISTERED (WaveVehicleInstaller);
inci-utils/model/wave-vehicle-installer.cc:	TypeId WaveVehicleInstaller::GetTypeId(void)
inci-utils/model/wave-vehicle-installer.cc:		static TypeId tid = TypeId("ns3::WaveVehicleInstaller").SetParent<WaveInstaller>().AddConstructor<
inci-utils/model/wave-vehicle-installer.cc:				WaveVehicleInstaller>();
inci-utils/model/wave-vehicle-installer.cc:	void WaveVehicleInstaller::DoInstall(NodeContainer container, NetDeviceContainer cchDevices,
inci-utils/model/wave-vehicle-installer.cc:				facilitiesHelper.Install(*i);
inci-utils/model/wave-vehicle-installer.cc:				//std::cout<<"WaveVehicleInstaller::DoInstall After facilities helper install"<<std::endl;
inci-utils/model/wave-installer.h:class WaveInstaller : public CommModuleInstaller
inci-utils/model/wave-installer.h:    WaveInstaller();
inci-utils/model/wave-installer.h:    ~WaveInstaller ();
inci-utils/model/wave-installer.h:    void Install (NodeContainer container); 
inci-utils/model/wave-installer.h:    void RelateInstaller (Ptr<CommModuleInstaller> installer);
inci-utils/model/wave-installer.h:    virtual void DoInstall (NodeContainer container, NetDeviceContainer cchDevices, NetDeviceContainer schDevices) = 0;
inci-utils/model/wave-installer.h:    void ProcessApplicationInstall (xmlTextReaderPtr reader);
inci-utils/model/wifi-bs-installer.cc:NS_LOG_COMPONENT_DEFINE ("WifiBsInstaller");
inci-utils/model/wifi-bs-installer.cc:NS_OBJECT_ENSURE_REGISTERED (WifiBsInstaller);
inci-utils/model/wifi-bs-installer.cc:TypeId WifiBsInstaller::GetTypeId (void)
inci-utils/model/wifi-bs-installer.cc:  static TypeId tid = TypeId ("ns3::WifiBsInstaller")
inci-utils/model/wifi-bs-installer.cc:    .AddConstructor<WifiBsInstaller> ()             
inci-utils/model/wifi-bs-installer.cc:WifiBsInstaller::Install (NodeContainer container) 
inci-utils/model/wifi-bs-installer.cc:  NetDeviceContainer netDevices = wifi.Install (wifiPhy, wifiMac, container);
inci-utils/model/wifi-bs-installer.cc:WifiBsInstaller::ConfigureDerivedWifiStation (NodeContainer container, NetDeviceContainer devices)
inci-utils/model/wifi-bs-installer.cc:  NS_LOG_INFO ("WifiBsInstaller");
inci-utils/model/wifi-installer.cc:NS_LOG_COMPONENT_DEFINE ("WifiInstaller");
inci-utils/model/wifi-installer.cc:Ipv4AddressHelper WifiInstaller::m_ipAddressHelper("10.1.0.0", "255.255.0.0");
inci-utils/model/wifi-installer.cc:NS_OBJECT_ENSURE_REGISTERED (WifiInstaller);
inci-utils/model/wifi-installer.cc:TypeId WifiInstaller::GetTypeId (void)
inci-utils/model/wifi-installer.cc:  static TypeId tid = TypeId ("ns3::WifiInstaller")
inci-utils/model/wifi-installer.cc:    .AddConstructor<WifiInstaller> ()             
inci-utils/model/wifi-installer.cc:WifiInstaller::WifiInstaller () {
inci-utils/model/wifi-installer.cc:WifiInstaller::Install (NodeContainer container) 
inci-utils/model/wifi-installer.cc:  NetDeviceContainer netDevices = wifi.Install (wifiPhy, wifiMac, container);
inci-utils/model/wifi-installer.cc:WifiInstaller::Install (NodeContainer container, STACK stack) 
inci-utils/model/wifi-installer.cc:  NetDeviceContainer netDevices = wifi.Install (wifiPhy, wifiMac, container);
inci-utils/model/wifi-installer.cc:WifiInstaller::Configure (std::string filename)
inci-utils/model/wifi-installer.cc:WifiInstaller::AddInterfacesToIpInterfaceList (NodeContainer container)
inci-utils/model/wifi-installer.cc:      NS_ASSERT_MSG (res, "WifiInstaller::AddInterfacesToIpInterfaceList - The IP interface cannot be added to the IpInterfaceList");
inci-utils/model/mobility-model-installer.cc:NS_LOG_COMPONENT_DEFINE ("MobilityModelInstaller");
inci-utils/model/mobility-model-installer.cc:NS_OBJECT_ENSURE_REGISTERED (MobilityModelInstaller);
inci-utils/model/mobility-model-installer.cc:TypeId MobilityModelInstaller::GetTypeId (void)
inci-utils/model/mobility-model-installer.cc:  static TypeId tid = TypeId ("ns3::MobilityModelInstaller")
inci-utils/model/mobility-model-installer.cc:    .AddConstructor<MobilityModelInstaller> ()             
inci-utils/model/mobility-model-installer.cc:MobilityModelInstaller::MobilityModelInstaller () 
inci-utils/model/mobility-model-installer.cc:MobilityModelInstaller::Install (NodeContainer container) 
inci-utils/model/mobility-model-installer.cc:  m_mobility.Install (container);
inci-utils/model/umts-bs-installer.h:class UmtsBsInstaller : public UmtsInstaller
inci-utils/model/umts-bs-installer.h:     void DoInstall(NodeContainer container, NetDeviceContainer devices, STACK stack);
inci-utils/model/wifi-installer.h:class WifiInstaller : public CommModuleInstaller
inci-utils/model/wifi-installer.h:    WifiInstaller(void);
inci-utils/model/wifi-installer.h:    void Install (NodeContainer container); 
inci-utils/model/wifi-installer.h:    void Install (NodeContainer container, STACK stack);
inci-utils/model/wimax-installer.cc:NS_LOG_COMPONENT_DEFINE ("WimaxInstaller");
inci-utils/model/wimax-installer.cc:Ipv4AddressHelper WimaxInstaller::m_ipAddressHelper;
inci-utils/model/wimax-installer.cc:NodeContainer WimaxInstaller::m_vehicleContainer;
inci-utils/model/wimax-installer.cc:NodeContainer WimaxInstaller::m_baseStationContainer;
inci-utils/model/wimax-installer.cc:NetDeviceContainer WimaxInstaller::m_baseStationDeviceContainer;
inci-utils/model/wimax-installer.cc:NetDeviceContainer WimaxInstaller::m_vehicleDeviceContainer;
inci-utils/model/wimax-installer.cc:Ptr<SimpleOfdmWimaxChannel> WimaxInstaller::m_channel = NULL;
inci-utils/model/wimax-installer.cc:WimaxHelper WimaxInstaller::m_wimax;
inci-utils/model/wimax-installer.cc:WimaxCommandManagerHelper WimaxInstaller::m_commandMgnr;
inci-utils/model/wimax-installer.cc:BsCommandManagerContainer WimaxInstaller::m_bsMgnrCont;
inci-utils/model/wimax-installer.cc:SsCommandManagerContainer WimaxInstaller::m_ssMgnrCont;
inci-utils/model/wimax-installer.cc:NS_OBJECT_ENSURE_REGISTERED (WimaxInstaller);
inci-utils/model/wimax-installer.cc:TypeId WimaxInstaller::GetTypeId (void)
inci-utils/model/wimax-installer.cc:  static TypeId tid = TypeId ("ns3::WimaxInstaller")
inci-utils/model/wimax-installer.cc:WimaxInstaller::WimaxInstaller () 
inci-utils/model/wimax-installer.cc:WimaxInstaller::~WimaxInstaller()
inci-utils/model/wimax-installer.cc:WimaxInstaller::Install (NodeContainer container) 
inci-utils/model/wimax-installer.cc:  NetDeviceContainer netDevices = DoInstall (container);      
inci-utils/model/wimax-installer.cc:WimaxInstaller::AddServiceFlow (NetDeviceContainer netDevices)
inci-utils/model/wimax-installer.cc:WimaxInstaller::Configure (std::string filename)
inci-utils/model/wimax-installer.cc:	  ProcessApplicationInstall (reader);
inci-utils/model/wimax-installer.cc:WimaxInstaller::ConvertToInt (std::string cadena)
inci-utils/model/wimax-installer.cc:WimaxInstaller::ConvertToDouble (std::string cadena)
inci-utils/model/wimax-installer.cc:WimaxInstaller::AddInterfacesToIpInterfaceList (NodeContainer container)
inci-utils/model/wimax-installer.cc:      NS_ASSERT_MSG (res, "WimaxInstaller::AddInterfacesToIpInterfaceList - The IP interface cannot be added to the IpInterfaceList");
inci-utils/model/wimax-installer.cc:WimaxInstaller::SetWimaxParameters (NetDeviceContainer devices)
inci-utils/model/wimax-installer.cc:WimaxInstaller::ProcessApplicationInstall (xmlTextReaderPtr reader)
inci-utils/model/wimax-installer.cc:	  DoProcessApplicationInstall (appName);
inci-utils/model/facilities-installer.h:class FacilitiesInstaller : public CommModuleInstaller
inci-utils/model/facilities-installer.h:    FacilitiesInstaller();
inci-utils/model/facilities-installer.h:    void Install (NodeContainer container); 
inci-utils/model/configuration-manager-xml.cc~:          Ptr<CommModuleInstaller> installer = DynamicCast<CommModuleInstaller>(object);
inci-utils/model/configuration-manager-xml.cc~:	  nodeManager->AttachInstaller((char*)name, installer);
inci-utils/model/configuration-manager-xml.cc~:	  NS_LOG_DEBUG ("Installer type="<<type<<" name="<<name);
inci-utils/model/configuration-manager-xml.cc~:	    xmlChar *relatedInstaller = xmlTextReaderGetAttribute (reader, BAD_CAST "relatedInstaller");
inci-utils/model/configuration-manager-xml.cc~:	    if (relatedInstaller != 0)
inci-utils/model/configuration-manager-xml.cc~:		Ptr<CommModuleInstaller> relatedInstallerObject = nodeManager->GetInstaller ((char*)relatedInstaller);
inci-utils/model/configuration-manager-xml.cc~:                NS_ASSERT_MSG (installer,"Installer has not been created");
inci-utils/model/configuration-manager-xml.cc~:		installer->RelateInstaller (relatedInstallerObject);
inci-utils/model/configuration-manager-xml.cc~:		NS_LOG_DEBUG ("Installer " << (char*)name << " will be related with installer " << (char*)relatedInstaller);
inci-utils/model/configuration-manager-xml.cc~:		    NS_LOG_DEBUG ("Installer "<< (char*)name << " will be installed by default in every new node");
inci-utils/model/umts-vehicle-installer.cc:NS_LOG_COMPONENT_DEFINE ("UmtsVehicleInstaller");
inci-utils/model/umts-vehicle-installer.cc:NS_OBJECT_ENSURE_REGISTERED (UmtsVehicleInstaller);
inci-utils/model/umts-vehicle-installer.cc:TypeId UmtsVehicleInstaller::GetTypeId (void)
inci-utils/model/umts-vehicle-installer.cc:  static TypeId tid = TypeId ("ns3::UmtsVehicleInstaller")
inci-utils/model/umts-vehicle-installer.cc:    .AddConstructor<UmtsVehicleInstaller>()                
inci-utils/model/umts-vehicle-installer.cc:// UmtsVehicleInstaller::AddBaseStations(NetDeviceContainer netDevices)
inci-utils/model/umts-vehicle-installer.cc:UmtsVehicleInstaller::DoInstall (NodeContainer container,NetDeviceContainer devices, STACK stack)
inci-utils/model/umts-vehicle-installer.cc:  NS_LOG_INFO ("*** UmtsVehicleInstaller ***");
inci-utils/model/umts-vehicle-installer.cc:          facilitiesHelper.Install (*i);
inci-utils/model/lte-bs-installer.h~:class LteBsInstaller : public LteInstaller
inci-utils/model/lte-bs-installer.h~:    LteBsInstaller ();  
inci-utils/model/lte-bs-installer.h~:     void DoInstall(NodeContainer container, NetDeviceContainer * createdDevices);
inci-utils/model/itetris-network-transport-installer.cc:NS_LOG_COMPONENT_DEFINE ("ItetrisNetworkTransportInstaller");
inci-utils/model/itetris-network-transport-installer.cc:NS_OBJECT_ENSURE_REGISTERED (ItetrisNetworkTransportInstaller);
inci-utils/model/itetris-network-transport-installer.cc:TypeId ItetrisNetworkTransportInstaller::GetTypeId (void)
inci-utils/model/itetris-network-transport-installer.cc:  static TypeId tid = TypeId ("ns3::ItetrisNetworkTransportInstaller")
inci-utils/model/itetris-network-transport-installer.cc:    .AddConstructor<ItetrisNetworkTransportInstaller> ()             
inci-utils/model/itetris-network-transport-installer.cc:ItetrisNetworkTransportInstaller::ItetrisNetworkTransportInstaller () 
inci-utils/model/itetris-network-transport-installer.cc:  stack.Setc2cStackInstall (true);  // -- false = Disable
inci-utils/model/itetris-network-transport-installer.cc:  stack.SetIpv6StackInstall(true);
inci-utils/model/itetris-network-transport-installer.cc:  stack.SetIpv4StackInstall(false);
inci-utils/model/itetris-network-transport-installer.cc:ItetrisNetworkTransportInstaller::Install (NodeContainer container) {
inci-utils/model/itetris-network-transport-installer.cc://std::cout<<"ItetrisNetworkTransportInstaller::Install!!!!!!!!!!!!!!!!!"<<std::endl;
inci-utils/model/itetris-network-transport-installer.cc:  stack.Install (container);
inci-utils/model/lte-installer.cc~:NS_LOG_COMPONENT_DEFINE ("LteInstaller");
inci-utils/model/lte-installer.cc~:Ipv4AddressHelper LteInstaller::m_ipAddressHelper;
inci-utils/model/lte-installer.cc~:Ptr<LteHelper> LteInstaller::lteHelper;
inci-utils/model/lte-installer.cc~://Ptr<EpcHelper> LteInstaller::epcHelper; 
inci-utils/model/lte-installer.cc~:Ptr<PointToPointEpcHelper>LteInstaller:: epcHelper ;
inci-utils/model/lte-installer.cc~:NodeContainer LteInstaller::enbNodeContainer;
inci-utils/model/lte-installer.cc~:NetDeviceContainer LteInstaller::enbDeviceContainer;
inci-utils/model/lte-installer.cc~:NS_OBJECT_ENSURE_REGISTERED (LteInstaller);
inci-utils/model/lte-installer.cc~:TypeId LteInstaller::GetTypeId (void)
inci-utils/model/lte-installer.cc~:  static TypeId tid = TypeId ("ns3::LteInstaller")
inci-utils/model/lte-installer.cc~:LteInstaller::LteInstaller () 
inci-utils/model/lte-installer.cc~:LteInstaller::~LteInstaller()
inci-utils/model/lte-installer.cc~:LteInstaller::Install (NodeContainer container) 
inci-utils/model/lte-installer.cc~:  createdDevices = lteHelper->InstallEnbDevice(container,m_nodeType);
inci-utils/model/lte-installer.cc~:cout<<"jin lte installer Install function.3.."<<endl;
inci-utils/model/lte-installer.cc~:  internet.Install (remoteHost); 
inci-utils/model/lte-installer.cc~:  NetDeviceContainer internetDevices = p2ph.Install(pgw, remoteHost);
inci-utils/model/lte-installer.cc~:  DoInstall(container, &createdDevices); 
inci-utils/model/lte-installer.cc~:  createdDevices = lteHelper->InstallUeDevice(container,m_nodeType);
inci-utils/model/lte-installer.cc~:  internet.Install (container); 
inci-utils/model/lte-installer.cc~:  DoInstall(container, &createdDevices); 
inci-utils/model/lte-installer.cc~:LteInstaller::Configure (std::string filename) 
inci-utils/model/lte-installer.cc~:          ProcessApplicationInstall (reader);
inci-utils/model/lte-installer.cc~:LteInstaller::AddInterfacesToIpInterfaceList (NodeContainer container)
inci-utils/model/lte-installer.cc~:      NS_ASSERT_MSG (res, "LteInstaller::AddInterfacesToIpInterfaceList - The IP interface cannot be added to the IpInterfaceList");
inci-utils/model/lte-installer.cc~:LteInstaller::AddVehicles(NodeContainer container,NetDeviceContainer netDevices)  
inci-utils/model/lte-installer.cc~:LteInstaller::ProcessApplicationInstall (xmlTextReaderPtr reader) 
inci-utils/model/lte-installer.cc~:LteInstaller::AddEnb (Ptr<Node> enbNode, Ptr<NetDevice> lteEnbNetDevice, uint16_t cellId){
inci-utils/model/lte-installer.cc~:LteInstaller::AddUe (Ptr<NetDevice> ueLteDevice, uint64_t imsi){
inci-utils/model/lte-installer.cc~:LteInstaller::ActivateEpsBearer (Ptr<NetDevice> ueLteDevice, uint64_t imsi, Ptr<EpcTft> tft, EpsBearer bearer){
inci-utils/model/lte-installer.cc~:LteInstaller::AddX2Interface (Ptr<Node> enbNode1, Ptr<Node> enbNode2){
inci-utils/model/lte-installer.cc~:LteInstaller::GetPgwNode (){
inci-utils/model/lte-installer.cc~:LteInstaller::AssignUeIpv4Address (NetDeviceContainer ueDevices){
inci-utils/model/lte-installer.cc~:LteInstaller::GetUeDefaultGatewayAddress () {
inci-utils/model/wimax-bs-installer.h:class WimaxBsInstaller : public WimaxInstaller
inci-utils/model/wimax-bs-installer.h:    NetDeviceContainer DoInstall (NodeContainer container);
inci-utils/model/wimax-bs-installer.h:    void DoProcessApplicationInstall (std::string appName);
inci-utils/model/configuration-manager-xml.h:   *  relatedInstaller -> indicate a related installer that can be used within the installer 
inci-utils/model/configuration-manager-xml.h:   *                      being defined, e.g. this tag is used in the RSU WaveInstaller to 
inci-utils/model/umts-bs-installer.cc:NS_LOG_COMPONENT_DEFINE ("UmtsBsInstaller");
inci-utils/model/umts-bs-installer.cc:NS_OBJECT_ENSURE_REGISTERED (UmtsBsInstaller);
inci-utils/model/umts-bs-installer.cc:TypeId UmtsBsInstaller::GetTypeId (void)
inci-utils/model/umts-bs-installer.cc:  static TypeId tid = TypeId ("ns3::UmtsBsInstaller")
inci-utils/model/umts-bs-installer.cc:    .AddConstructor<UmtsBsInstaller>()
inci-utils/model/umts-bs-installer.cc:UmtsBsInstaller::DoInstall (NodeContainer container, NetDeviceContainer devices, STACK stack)
inci-utils/model/umts-bs-installer.cc:  NS_LOG_INFO ("*** UmtsBsInstaller ***");
inci-utils/model/umts-bs-installer.cc:	facilitiesHelper.Install (*i);
inci-utils/model/umts-bs-installer.cc:// UmtsBsInstaller::AddVehicles(NetDeviceContainer netDevices)
inci-utils/model/lte-vehicle-installer.cc:NS_LOG_COMPONENT_DEFINE ("LteVehicleInstaller");
inci-utils/model/lte-vehicle-installer.cc:NS_OBJECT_ENSURE_REGISTERED (LteVehicleInstaller);
inci-utils/model/lte-vehicle-installer.cc:TypeId LteVehicleInstaller::GetTypeId (void)
inci-utils/model/lte-vehicle-installer.cc:  static TypeId tid = TypeId ("ns3::LteVehicleInstaller")
inci-utils/model/lte-vehicle-installer.cc:    .AddConstructor<LteVehicleInstaller>()
inci-utils/model/lte-vehicle-installer.cc:LteVehicleInstaller::DoInstall (NodeContainer container, NetDeviceContainer * createdDevices) 
inci-utils/model/lte-vehicle-installer.cc:  NS_LOG_INFO ("*** LteVehicleInstaller ***");
inci-utils/model/lte-vehicle-installer.cc:    	  facilitiesHelper.Install (*it);
inci-utils/model/dvbh-installer.cc:NS_LOG_COMPONENT_DEFINE ("DvbhInstaller");
inci-utils/model/dvbh-installer.cc:Ipv4AddressHelper DvbhInstaller::m_ipAddressHelper;
inci-utils/model/dvbh-installer.cc:NodeContainer DvbhInstaller::vehicleContainer;
inci-utils/model/dvbh-installer.cc:NodeContainer DvbhInstaller::baseStationContainer;
inci-utils/model/dvbh-installer.cc:NetDeviceContainer DvbhInstaller::baseStationDeviceContainer;
inci-utils/model/dvbh-installer.cc:NetDeviceContainer DvbhInstaller::vehicleDeviceContainer;
inci-utils/model/dvbh-installer.cc:NS_OBJECT_ENSURE_REGISTERED (DvbhInstaller);
inci-utils/model/dvbh-installer.cc:TypeId DvbhInstaller::GetTypeId (void)
inci-utils/model/dvbh-installer.cc:  static TypeId tid = TypeId ("ns3::DvbhInstaller")
inci-utils/model/dvbh-installer.cc:DvbhInstaller::DvbhInstaller () {
inci-utils/model/dvbh-installer.cc:DvbhInstaller::~DvbhInstaller()
inci-utils/model/dvbh-installer.cc:DvbhInstaller::Install (NodeContainer container) 
inci-utils/model/dvbh-installer.cc:  NetDeviceContainer netDevices = dvbh.Install (dvbhOfdm,container,m_nodeType);   
inci-utils/model/dvbh-installer.cc:  DoInstall(container,netDevices);
inci-utils/model/dvbh-installer.cc:DvbhInstaller::AddVehicles(NodeContainer container,NetDeviceContainer netDevices)
inci-utils/model/dvbh-installer.cc:DvbhInstaller::AddBaseStations(NodeContainer container,NetDeviceContainer netDevices)
inci-utils/model/dvbh-installer.cc:DvbhInstaller::Configure (std::string filename)
inci-utils/model/dvbh-installer.cc:	  ProcessApplicationInstall (reader);
inci-utils/model/dvbh-installer.cc:DvbhInstaller::AddInterfacesToIpInterfaceList (NodeContainer container)
inci-utils/model/dvbh-installer.cc:      NS_ASSERT_MSG (res, "DvbhInstaller::AddInterfacesToIpInterfaceList - The IP interface cannot be added to the IpInterfaceList");
inci-utils/model/dvbh-installer.cc:DvbhInstaller::ProcessApplicationInstall (xmlTextReaderPtr reader)
inci-utils/model/dvbh-installer.cc:	  ProcessStreamInstall (reader);
inci-utils/model/dvbh-installer.cc:DvbhInstaller::ProcessStreamInstall (xmlTextReaderPtr reader)
inci-utils/model/lte-bs-installer.h:class LteBsInstaller : public LteInstaller
inci-utils/model/lte-bs-installer.h:    LteBsInstaller ();  
inci-utils/model/lte-bs-installer.h:     void DoInstall(NodeContainer container, NetDeviceContainer * createdDevices);
inci-utils/model/wifi-bs-installer.h:class WifiBsInstaller : public WifiInstaller
inci-utils/model/wifi-bs-installer.h:    void Install (NodeContainer container); 
inci-utils/model/lte-installer.h:class LteInstaller : public CommModuleInstaller
inci-utils/model/lte-installer.h:    LteInstaller(void);
inci-utils/model/lte-installer.h:    void Install (NodeContainer container); 
inci-utils/model/lte-installer.h:    void ProcessApplicationInstall (xmlTextReaderPtr reader);
inci-utils/model/lte-installer.h:    ~LteInstaller();
inci-utils/model/lte-installer.h:    virtual void DoInstall (NodeContainer container, NetDeviceContainer * createdDevices) = 0; 
inci-utils/model/dvbh-vehicle-installer.h:class DvbhVehicleInstaller : public DvbhInstaller
inci-utils/model/dvbh-vehicle-installer.h:     void DoInstall (NodeContainer container,NetDeviceContainer devices);
inci-utils/model/dvbh-bs-installer.cc:NS_LOG_COMPONENT_DEFINE ("DvbhBsInstaller");
inci-utils/model/dvbh-bs-installer.cc:NS_OBJECT_ENSURE_REGISTERED (DvbhBsInstaller);
inci-utils/model/dvbh-bs-installer.cc:TypeId DvbhBsInstaller::GetTypeId (void)
inci-utils/model/dvbh-bs-installer.cc:  static TypeId tid = TypeId ("ns3::DvbhBsInstaller")
inci-utils/model/dvbh-bs-installer.cc:    .AddConstructor<DvbhBsInstaller>()
inci-utils/model/dvbh-bs-installer.cc:DvbhBsInstaller::DoInstall (NodeContainer container, NetDeviceContainer devices)
inci-utils/model/dvbh-bs-installer.cc:  NS_LOG_INFO ("*** DvbhBsInstaller ***");
inci-utils/model/dvbh-bs-installer.cc:	facilitiesHelper.Install (*i);
inci-utils/model/configuration-manager-xml.cc:          Ptr<CommModuleInstaller> installer = DynamicCast<CommModuleInstaller>(object);
inci-utils/model/configuration-manager-xml.cc:	  nodeManager->AttachInstaller((char*)name, installer);
inci-utils/model/configuration-manager-xml.cc:	  NS_LOG_DEBUG ("Installer type="<<type<<" name="<<name);
inci-utils/model/configuration-manager-xml.cc:	    xmlChar *relatedInstaller = xmlTextReaderGetAttribute (reader, BAD_CAST "relatedInstaller");
inci-utils/model/configuration-manager-xml.cc:	    if (relatedInstaller != 0)
inci-utils/model/configuration-manager-xml.cc:		Ptr<CommModuleInstaller> relatedInstallerObject = nodeManager->GetInstaller ((char*)relatedInstaller);
inci-utils/model/configuration-manager-xml.cc:                NS_ASSERT_MSG (installer,"Installer has not been created");
inci-utils/model/configuration-manager-xml.cc:		installer->RelateInstaller (relatedInstallerObject);
inci-utils/model/configuration-manager-xml.cc:		NS_LOG_DEBUG ("Installer " << (char*)name << " will be related with installer " << (char*)relatedInstaller);
inci-utils/model/configuration-manager-xml.cc:		    NS_LOG_DEBUG ("Installer "<< (char*)name << " will be installed by default in every new node");
inci-utils/model/wimax-installer.h:class WimaxInstaller : public CommModuleInstaller
inci-utils/model/wimax-installer.h:    WimaxInstaller(void);    
inci-utils/model/wimax-installer.h:    void Install (NodeContainer container); 
inci-utils/model/wimax-installer.h:    ~WimaxInstaller();
inci-utils/model/wimax-installer.h:    virtual NetDeviceContainer DoInstall (NodeContainer container) = 0;
inci-utils/model/wimax-installer.h:    void ProcessApplicationInstall (xmlTextReaderPtr reader);
inci-utils/model/wimax-installer.h:    virtual void DoProcessApplicationInstall (std::string appName) {};
inci-utils/model/lte-vehicle-installer.h:class LteVehicleInstaller : public LteInstaller
inci-utils/model/lte-vehicle-installer.h:     void DoInstall (NodeContainer container, NetDeviceContainer * createdDevices); 
inci-utils/model/wimax-vehicle-installer.cc:NS_LOG_COMPONENT_DEFINE ("WimaxVehicleInstaller");
inci-utils/model/wimax-vehicle-installer.cc:NS_OBJECT_ENSURE_REGISTERED (WimaxVehicleInstaller);
inci-utils/model/wimax-vehicle-installer.cc:TypeId WimaxVehicleInstaller::GetTypeId (void)
inci-utils/model/wimax-vehicle-installer.cc:  static TypeId tid = TypeId ("ns3::WimaxVehicleInstaller")
inci-utils/model/wimax-vehicle-installer.cc:    .AddConstructor<WimaxVehicleInstaller>()                
inci-utils/model/wimax-vehicle-installer.cc:WimaxVehicleInstaller::DoInstall (NodeContainer container)
inci-utils/model/wimax-vehicle-installer.cc:  NS_LOG_INFO ("*** WimaxVehicleInstaller ***");
inci-utils/model/wimax-vehicle-installer.cc:  NetDeviceContainer devices = m_wimax.Install (container, WimaxHelper::DEVICE_TYPE_SUBSCRIBER_STATION, WimaxHelper::SIMPLE_PHY_TYPE_OFDM, m_channel, WimaxHelper::SCHED_TYPE_SIMPLE, ns3::WIMAX_VERSION_ITETRIS);  
inci-utils/model/wimax-vehicle-installer.cc:  SsCommandManagerContainer mgnrCont = m_commandMgnr.InstallSsCommandManagers (devices);
inci-utils/model/wimax-vehicle-installer.cc:          facilitiesHelper.Install (*i);
inci-utils/model/wimax-vehicle-installer.cc:WimaxVehicleInstaller::DoProcessApplicationInstall (std::string appName)
inci-utils/model/iTETRISNodeManager.cc:     InstallCommunicationModule ("UmtsVehicle", IPv6);
inci-utils/model/iTETRISNodeManager.cc:     InstallCommunicationModule ("WaveVehicle");
inci-utils/model/iTETRISNodeManager.cc:  vector<Ptr<CommModuleInstaller> >::iterator it;
inci-utils/model/iTETRISNodeManager.cc:    (*it)->Install(singleNodeContainer);
inci-utils/model/iTETRISNodeManager.cc:  InstallCommunicationModule ("UmtsVehicle", IPv6);
inci-utils/model/iTETRISNodeManager.cc:  InstallCommunicationModule ("WaveVehicle");
inci-utils/model/iTETRISNodeManager.cc:  InstallCommunicationModule ("LteVehicle");
inci-utils/model/iTETRISNodeManager.cc:  vector<Ptr<CommModuleInstaller> >::iterator it;
inci-utils/model/iTETRISNodeManager.cc:    (*it)->Install(singleNodeContainer);
inci-utils/model/iTETRISNodeManager.cc:  Ptr<CommModuleInstaller> comInstaller = GetInstaller ("TMC");
inci-utils/model/iTETRISNodeManager.cc:  comInstaller->Install(singleNodeContainer);
inci-utils/model/iTETRISNodeManager.cc:iTETRISNodeManager::InstallCommunicationModule (std::string typeOfModule, STACK stack)
inci-utils/model/iTETRISNodeManager.cc:      InstallerContainerList::iterator iterInstaller = m_itetrisInstallers.find(typeOfModule);
inci-utils/model/iTETRISNodeManager.cc:      //std::cout<<"iTETRISNodeManager::InstallCommunicationModule m_itetrisinstallers size:"<<m_itetrisInstallers.size()<<std::endl;
inci-utils/model/iTETRISNodeManager.cc:      if( iterInstaller != m_itetrisInstallers.end() ) 
inci-utils/model/iTETRISNodeManager.cc:          //std::cout<<" iTETRISNodeManager::InstallCommunicationModule: "<<typeOfModule<<std::endl;
inci-utils/model/iTETRISNodeManager.cc:          Ptr<CommModuleInstaller> installer = iterInstaller->second;	 
inci-utils/model/iTETRISNodeManager.cc:                 installer->Install(singleNodeContainer, stack);
inci-utils/model/iTETRISNodeManager.cc:                installer->Install(singleNodeContainer);
inci-utils/model/iTETRISNodeManager.cc:iTETRISNodeManager::InstallCommunicationModule (std::string typeOfModule)
inci-utils/model/iTETRISNodeManager.cc:      InstallerContainerList::iterator iterInstaller = m_itetrisInstallers.find(typeOfModule);
inci-utils/model/iTETRISNodeManager.cc:      if( iterInstaller != m_itetrisInstallers.end() ) 
inci-utils/model/iTETRISNodeManager.cc:          Ptr<CommModuleInstaller> installer = iterInstaller->second;	 
inci-utils/model/iTETRISNodeManager.cc:          installer->Install(singleNodeContainer);
inci-utils/model/iTETRISNodeManager.cc:iTETRISNodeManager::AttachInstaller (std::string typeOfModule, Ptr<CommModuleInstaller> installer)
inci-utils/model/iTETRISNodeManager.cc:  InstallerContainerList::iterator iter = m_itetrisInstallers.find(typeOfModule);
inci-utils/model/iTETRISNodeManager.cc:  if( iter != m_itetrisInstallers.end() ) 
inci-utils/model/iTETRISNodeManager.cc:  m_itetrisInstallers.insert (std::make_pair(typeOfModule, installer));
inci-utils/model/iTETRISNodeManager.cc:  InstallerContainerList::iterator iter = m_itetrisInstallers.find(typeOfModule);
inci-utils/model/iTETRISNodeManager.cc:  if( iter != m_itetrisInstallers.end() ) 
inci-utils/model/iTETRISNodeManager.cc:Ptr<CommModuleInstaller> 
inci-utils/model/iTETRISNodeManager.cc:iTETRISNodeManager::GetInstaller (std::string typeOfModule)
inci-utils/model/iTETRISNodeManager.cc:  Ptr<CommModuleInstaller> installer = NULL;
inci-utils/model/iTETRISNodeManager.cc:  InstallerContainerList::iterator iterInstaller = m_itetrisInstallers.find(typeOfModule);
inci-utils/model/iTETRISNodeManager.cc:  if( iterInstaller != m_itetrisInstallers.end() ) 
inci-utils/model/iTETRISNodeManager.cc:      installer = iterInstaller->second;	
inci-utils/model/wave-installer.cc:NS_LOG_COMPONENT_DEFINE ("WaveInstaller");
inci-utils/model/wave-installer.cc:NS_OBJECT_ENSURE_REGISTERED (WaveInstaller);
inci-utils/model/wave-installer.cc:TypeId WaveInstaller::GetTypeId (void)
inci-utils/model/wave-installer.cc:  static TypeId tid = TypeId ("ns3::WaveInstaller")
inci-utils/model/wave-installer.cc:WaveInstaller::WaveInstaller () 
inci-utils/model/wave-installer.cc:WaveInstaller::~WaveInstaller ()
inci-utils/model/wave-installer.cc:WaveInstaller::CreateAndAggregateObjectFromTypeId (Ptr<Node> node, const std::string typeId)
inci-utils/model/wave-installer.cc:WaveInstaller::Install (NodeContainer container) 
inci-utils/model/wave-installer.cc:  NetDeviceContainer CchDevices = wave.Install (wavePhyCch, waveMac, container);
inci-utils/model/wave-installer.cc:  NetDeviceContainer SchDevices = wave.Install (wavePhySch, waveMac, container);
inci-utils/model/wave-installer.cc:  //switchingHelper.Install(SchDevices);
inci-utils/model/wave-installer.cc:  DoInstall (container, CchDevices, SchDevices);
inci-utils/model/wave-installer.cc:WaveInstaller::SetAntennaHeightInNodes (NodeContainer container)
inci-utils/model/wave-installer.cc:WaveInstaller::ConfigureWaveChannel (void)
inci-utils/model/wave-installer.cc:WaveInstaller::GetWaveCch (void)
inci-utils/model/wave-installer.cc:WaveInstaller::GetWaveSch (void)
inci-utils/model/wave-installer.cc:WaveInstaller::RelateInstaller (Ptr<CommModuleInstaller> installer)
inci-utils/model/wave-installer.cc:  Ptr<WaveInstaller> relatedInstaller = DynamicCast<WaveInstaller> (installer);
inci-utils/model/wave-installer.cc:  NS_ASSERT (relatedInstaller->GetWaveCch ());
inci-utils/model/wave-installer.cc:  NS_ASSERT (relatedInstaller->GetWaveSch ());
inci-utils/model/wave-installer.cc:  wavePhyCch.SetChannel (relatedInstaller->GetWaveCch ());
inci-utils/model/wave-installer.cc:  wavePhySch.SetChannel (relatedInstaller->GetWaveSch ());
inci-utils/model/wave-installer.cc:  NS_LOG_DEBUG ("Linking installers in WaveInstaller::RelateInstaller");
inci-utils/model/wave-installer.cc:WaveInstaller::SetChannelType (NetDeviceContainer devices, ChannelType channel)
inci-utils/model/wave-installer.cc:std::vector<WaveInstaller::AttributesChannel>::iterator 
inci-utils/model/wave-installer.cc:WaveInstaller::GetFirstEmptyElement (void)
inci-utils/model/wave-installer.cc:  for(std::vector<WaveInstaller::AttributesChannel>::iterator it = m_attributesChannel.begin(); it != m_attributesChannel.end(); ++it)
inci-utils/model/wave-installer.cc:WaveInstaller::Configure (std::string filename)
inci-utils/model/wave-installer.cc:		  std::vector<WaveInstaller::AttributesChannel>::iterator it = GetFirstEmptyElement ();
inci-utils/model/wave-installer.cc:		  std::vector<WaveInstaller::AttributesChannel>::iterator it = GetFirstEmptyElement ();
inci-utils/model/wave-installer.cc:		  std::vector<WaveInstaller::AttributesChannel>::iterator it = GetFirstEmptyElement ();
inci-utils/model/wave-installer.cc:	  ProcessApplicationInstall (reader);
inci-utils/model/wave-installer.cc:         std::vector<WaveInstaller::AttributesChannel>::iterator it = GetFirstEmptyElement ();
inci-utils/model/wave-installer.cc:WaveInstaller::ProcessApplicationInstall (xmlTextReaderPtr reader)
inci-utils/model/wave-installer.cc:                  NS_FATAL_ERROR ("WaveInstaller::ProcessApplicationInstall: The name 'CAM' cannot be assigned to an Application (it is reserved)."); 
inci-utils/model/dvbh-bs-installer.h:class DvbhBsInstaller : public DvbhInstaller
inci-utils/model/dvbh-bs-installer.h:     void DoInstall(NodeContainer container, NetDeviceContainer devices);
inci-utils/model/umts-installer.cc:NS_LOG_COMPONENT_DEFINE ("UmtsInstaller");
inci-utils/model/umts-installer.cc:Ipv4AddressHelper UmtsInstaller::m_ipAddressHelper;
inci-utils/model/umts-installer.cc://Ipv6AddressHelper UmtsInstaller::m_ipv6AddressHelper;
inci-utils/model/umts-installer.cc:NodeContainer UmtsInstaller::vehicleContainer;
inci-utils/model/umts-installer.cc:NodeContainer UmtsInstaller::baseStationContainer;
inci-utils/model/umts-installer.cc:NetDeviceContainer UmtsInstaller::baseStationDeviceContainer;
inci-utils/model/umts-installer.cc:NetDeviceContainer UmtsInstaller::vehicleDeviceContainer;
inci-utils/model/umts-installer.cc:NS_OBJECT_ENSURE_REGISTERED (UmtsInstaller);
inci-utils/model/umts-installer.cc:TypeId UmtsInstaller::GetTypeId (void)
inci-utils/model/umts-installer.cc:  static TypeId tid = TypeId ("ns3::UmtsInstaller")
inci-utils/model/umts-installer.cc:UmtsInstaller::UmtsInstaller () {
inci-utils/model/umts-installer.cc:UmtsInstaller::~UmtsInstaller()
inci-utils/model/umts-installer.cc:UmtsInstaller::AllocateIpv6Prefix()
inci-utils/model/umts-installer.cc:	std::cout<<"WaveRsuInstaller::AllocateIpv6Prefix()"<<prefix<<std::endl;
inci-utils/model/umts-installer.cc:UmtsInstaller::Install (NodeContainer container, STACK stack) 
inci-utils/model/umts-installer.cc:    NetDeviceContainer netDevices = umts.Install (umtsPhyUE,m_nodeType, container);   
inci-utils/model/umts-installer.cc:    DoInstall(container,netDevices,stack);      
inci-utils/model/umts-installer.cc:     NetDeviceContainer netDevices = umts.Install (umtsPhyBS,m_nodeType, container);   
inci-utils/model/umts-installer.cc:    	std::cout<<"UmtsInstaller::Install: "<<pref2<<std::endl;
inci-utils/model/umts-installer.cc:     DoInstall(container,netDevices,stack);
inci-utils/model/umts-installer.cc:UmtsInstaller::Install (NodeContainer container) 
inci-utils/model/umts-installer.cc:    NetDeviceContainer netDevices = umts.Install (umtsPhyUE,m_nodeType, container);   
inci-utils/model/umts-installer.cc:    DoInstall(container,netDevices,stack);      
inci-utils/model/umts-installer.cc:     NetDeviceContainer netDevices = umts.Install (umtsPhyBS,m_nodeType, container);   
inci-utils/model/umts-installer.cc:     DoInstall(container,netDevices,stack);
inci-utils/model/umts-installer.cc:UmtsInstaller::AddVehicles(NodeContainer container,NetDeviceContainer netDevices)
inci-utils/model/umts-installer.cc:UmtsInstaller::AddBaseStations(NodeContainer container,NetDeviceContainer netDevices)
inci-utils/model/umts-installer.cc:UmtsInstaller::Configure (std::string filename)
inci-utils/model/umts-installer.cc:         //std::cout<<"UmtsInstaller::Configure ip address:"<<(char*)address<<std::endl;
inci-utils/model/umts-installer.cc:         //std::cout<<"UmtsInstaller::Configure ip mask:"<<(char*)mask<<std::endl;
inci-utils/model/umts-installer.cc:	  ProcessApplicationInstall (reader);
inci-utils/model/umts-installer.cc:UmtsInstaller::AddInterfacesToIpInterfaceList (NodeContainer container)
inci-utils/model/umts-installer.cc:      NS_ASSERT_MSG (res, "UmtsInstaller::AddInterfacesToIpInterfaceList - The IP interface cannot be added to the IpInterfaceList");
inci-utils/model/umts-installer.cc:UmtsInstaller::AddInterfacesToIpv6InterfaceList (NodeContainer container)
inci-utils/model/umts-installer.cc:      NS_ASSERT_MSG (res, "UmtsInstaller::AddInterfacesToIpInterfaceList - The IP interface cannot be added to the IpInterfaceList");
inci-utils/model/umts-installer.cc:      //std::cout<<"!!!!!!!!!!!!!! UmtsInstaller::IPv6 Address !!!!!!!!!!!!!!!:"<<ipStack->GetAddress (index-1,1)<<std::endl;
inci-utils/model/umts-installer.cc:UmtsInstaller::ProcessApplicationInstall (xmlTextReaderPtr reader)
inci-utils/model/iTETRISNodeManager.cc~:     InstallCommunicationModule ("UmtsVehicle", IPv6);
inci-utils/model/iTETRISNodeManager.cc~:     InstallCommunicationModule ("WaveVehicle");
inci-utils/model/iTETRISNodeManager.cc~:  vector<Ptr<CommModuleInstaller> >::iterator it;
inci-utils/model/iTETRISNodeManager.cc~:    (*it)->Install(singleNodeContainer);
inci-utils/model/iTETRISNodeManager.cc~:  InstallCommunicationModule ("UmtsVehicle", IPv6);
inci-utils/model/iTETRISNodeManager.cc~:  InstallCommunicationModule ("WaveVehicle");
inci-utils/model/iTETRISNodeManager.cc~:  InstallCommunicationModule ("LteVehicle");
inci-utils/model/iTETRISNodeManager.cc~:  vector<Ptr<CommModuleInstaller> >::iterator it;
inci-utils/model/iTETRISNodeManager.cc~:    (*it)->Install(singleNodeContainer);
inci-utils/model/iTETRISNodeManager.cc~:  Ptr<CommModuleInstaller> comInstaller = GetInstaller ("TMC");
inci-utils/model/iTETRISNodeManager.cc~:  comInstaller->Install(singleNodeContainer);
inci-utils/model/iTETRISNodeManager.cc~:iTETRISNodeManager::InstallCommunicationModule (std::string typeOfModule, STACK stack)
inci-utils/model/iTETRISNodeManager.cc~:{cout <<"jin InstallCommunication test4"<<endl;
inci-utils/model/iTETRISNodeManager.cc~:      InstallerContainerList::iterator iterInstaller = m_itetrisInstallers.find(typeOfModule);
inci-utils/model/iTETRISNodeManager.cc~:      //std::cout<<"iTETRISNodeManager::InstallCommunicationModule m_itetrisinstallers size:"<<m_itetrisInstallers.size()<<std::endl;
inci-utils/model/iTETRISNodeManager.cc~:      if( iterInstaller != m_itetrisInstallers.end() ) 
inci-utils/model/iTETRISNodeManager.cc~:          //std::cout<<" iTETRISNodeManager::InstallCommunicationModule: "<<typeOfModule<<std::endl;
inci-utils/model/iTETRISNodeManager.cc~:          Ptr<CommModuleInstaller> installer = iterInstaller->second;	 
inci-utils/model/iTETRISNodeManager.cc~:                 installer->Install(singleNodeContainer, stack);
inci-utils/model/iTETRISNodeManager.cc~:                installer->Install(singleNodeContainer);
inci-utils/model/iTETRISNodeManager.cc~:iTETRISNodeManager::InstallCommunicationModule (std::string typeOfModule)
inci-utils/model/iTETRISNodeManager.cc~:{	 cout <<"jin InstallCommunication test5"<<endl;
inci-utils/model/iTETRISNodeManager.cc~:      InstallerContainerList::iterator iterInstaller = m_itetrisInstallers.find(typeOfModule);
inci-utils/model/iTETRISNodeManager.cc~:      if( iterInstaller != m_itetrisInstallers.end() ) 
inci-utils/model/iTETRISNodeManager.cc~:          Ptr<CommModuleInstaller> installer = iterInstaller->second;	 
inci-utils/model/iTETRISNodeManager.cc~:          installer->Install(singleNodeContainer);
inci-utils/model/iTETRISNodeManager.cc~:iTETRISNodeManager::AttachInstaller (std::string typeOfModule, Ptr<CommModuleInstaller> installer)
inci-utils/model/iTETRISNodeManager.cc~:  InstallerContainerList::iterator iter = m_itetrisInstallers.find(typeOfModule);
inci-utils/model/iTETRISNodeManager.cc~:  if( iter != m_itetrisInstallers.end() ) 
inci-utils/model/iTETRISNodeManager.cc~:  m_itetrisInstallers.insert (std::make_pair(typeOfModule, installer));
inci-utils/model/iTETRISNodeManager.cc~:  InstallerContainerList::iterator iter = m_itetrisInstallers.find(typeOfModule);
inci-utils/model/iTETRISNodeManager.cc~:  if( iter != m_itetrisInstallers.end() ) 
inci-utils/model/iTETRISNodeManager.cc~:Ptr<CommModuleInstaller> 
inci-utils/model/iTETRISNodeManager.cc~:iTETRISNodeManager::GetInstaller (std::string typeOfModule)
inci-utils/model/iTETRISNodeManager.cc~:  Ptr<CommModuleInstaller> installer = NULL;
inci-utils/model/iTETRISNodeManager.cc~:  InstallerContainerList::iterator iterInstaller = m_itetrisInstallers.find(typeOfModule);
inci-utils/model/iTETRISNodeManager.cc~:  if( iterInstaller != m_itetrisInstallers.end() ) 
inci-utils/model/iTETRISNodeManager.cc~:      installer = iterInstaller->second;	
inci-utils/model/lte-installer.cc:NS_LOG_COMPONENT_DEFINE ("LteInstaller");
inci-utils/model/lte-installer.cc:Ipv4AddressHelper LteInstaller::m_ipAddressHelper;
inci-utils/model/lte-installer.cc:Ptr<LteHelper> LteInstaller::lteHelper;
inci-utils/model/lte-installer.cc://Ptr<EpcHelper> LteInstaller::epcHelper; 
inci-utils/model/lte-installer.cc:Ptr<PointToPointEpcHelper>LteInstaller:: epcHelper ;
inci-utils/model/lte-installer.cc:NodeContainer LteInstaller::enbNodeContainer;
inci-utils/model/lte-installer.cc:NetDeviceContainer LteInstaller::enbDeviceContainer;
inci-utils/model/lte-installer.cc:NS_OBJECT_ENSURE_REGISTERED (LteInstaller);
inci-utils/model/lte-installer.cc:TypeId LteInstaller::GetTypeId (void)
inci-utils/model/lte-installer.cc:  static TypeId tid = TypeId ("ns3::LteInstaller")
inci-utils/model/lte-installer.cc:LteInstaller::LteInstaller () 
inci-utils/model/lte-installer.cc:LteInstaller::~LteInstaller()
inci-utils/model/lte-installer.cc:LteInstaller::Install (NodeContainer container) 
inci-utils/model/lte-installer.cc:  createdDevices = lteHelper->InstallEnbDevice(container,m_nodeType);
inci-utils/model/lte-installer.cc:  cout<<"jin lte installer Install function.3.."<<endl;
inci-utils/model/lte-installer.cc:  internet.Install (remoteHost); 
inci-utils/model/lte-installer.cc:  NetDeviceContainer internetDevices = p2ph.Install(pgw, remoteHost);
inci-utils/model/lte-installer.cc:  DoInstall(container, &createdDevices); 
inci-utils/model/lte-installer.cc:  createdDevices = lteHelper->InstallUeDevice(container,m_nodeType);
inci-utils/model/lte-installer.cc:  internet.Install (container); 
inci-utils/model/lte-installer.cc:  DoInstall(container, &createdDevices); 
inci-utils/model/lte-installer.cc:LteInstaller::Configure (std::string filename) 
inci-utils/model/lte-installer.cc:          ProcessApplicationInstall (reader);
inci-utils/model/lte-installer.cc:LteInstaller::AddInterfacesToIpInterfaceList (NodeContainer container)
inci-utils/model/lte-installer.cc:      NS_ASSERT_MSG (res, "LteInstaller::AddInterfacesToIpInterfaceList - The IP interface cannot be added to the IpInterfaceList");
inci-utils/model/lte-installer.cc:LteInstaller::AddVehicles(NodeContainer container,NetDeviceContainer netDevices)  
inci-utils/model/lte-installer.cc:LteInstaller::ProcessApplicationInstall (xmlTextReaderPtr reader) 
inci-utils/model/lte-installer.cc:LteInstaller::AddEnb (Ptr<Node> enbNode, Ptr<NetDevice> lteEnbNetDevice, uint16_t cellId){
inci-utils/model/lte-installer.cc:LteInstaller::AddUe (Ptr<NetDevice> ueLteDevice, uint64_t imsi){
inci-utils/model/lte-installer.cc:LteInstaller::ActivateEpsBearer (Ptr<NetDevice> ueLteDevice, uint64_t imsi, Ptr<EpcTft> tft, EpsBearer bearer){
inci-utils/model/lte-installer.cc:LteInstaller::AddX2Interface (Ptr<Node> enbNode1, Ptr<Node> enbNode2){
inci-utils/model/lte-installer.cc:LteInstaller::GetPgwNode (){
inci-utils/model/lte-installer.cc:LteInstaller::AssignUeIpv4Address (NetDeviceContainer ueDevices){
inci-utils/model/lte-installer.cc:LteInstaller::GetUeDefaultGatewayAddress () {
inci-utils/model/mobility-model-installer.h:class MobilityModelInstaller : public CommModuleInstaller
inci-utils/model/mobility-model-installer.h:    MobilityModelInstaller();
inci-utils/model/mobility-model-installer.h:    void Install (NodeContainer container); 
inci-utils/model/lte-bs-installer.cc:NS_LOG_COMPONENT_DEFINE ("LteBsInstaller");
inci-utils/model/lte-bs-installer.cc:NS_OBJECT_ENSURE_REGISTERED (LteBsInstaller);
inci-utils/model/lte-bs-installer.cc:TypeId LteBsInstaller::GetTypeId (void)
inci-utils/model/lte-bs-installer.cc:  static TypeId tid = TypeId ("ns3::LteBsInstaller")
inci-utils/model/lte-bs-installer.cc:    .AddConstructor<LteBsInstaller>()
inci-utils/model/lte-bs-installer.cc:LteBsInstaller::LteBsInstaller ()
inci-utils/model/lte-bs-installer.cc:LteBsInstaller::DoInstall (NodeContainer container, NetDeviceContainer * createdDevices) 
inci-utils/model/lte-bs-installer.cc:  NS_LOG_INFO ("*** LteBsInstaller ***");
inci-utils/model/lte-bs-installer.cc:    	  facilitiesHelper.Install(*it);
inci-utils/model/wifi-ip-installer.cc:NS_LOG_COMPONENT_DEFINE ("WifiIpInstaller");
inci-utils/model/wifi-ip-installer.cc:NS_OBJECT_ENSURE_REGISTERED (WifiIpInstaller);
inci-utils/model/wifi-ip-installer.cc:TypeId WifiIpInstaller::GetTypeId (void)
inci-utils/model/wifi-ip-installer.cc:  static TypeId tid = TypeId ("ns3::WifiIpInstaller")
inci-utils/model/wifi-ip-installer.cc:    .AddConstructor<WifiIpInstaller> ()             
inci-utils/model/wifi-ip-installer.cc:WifiIpInstaller::WifiIpInstaller () {
inci-utils/model/wifi-ip-installer.cc:WifiIpInstaller::Install (NodeContainer container) {
inci-utils/model/wifi-ip-installer.cc:  wifi.Install (wifiPhy, wifiMac, container);
inci-utils/model/wifi-ip-installer.cc:  internet.Install (container);
inci-utils/model/wimax-bs-installer.cc:NS_LOG_COMPONENT_DEFINE ("WimaxBsInstaller");
inci-utils/model/wimax-bs-installer.cc:NS_OBJECT_ENSURE_REGISTERED (WimaxBsInstaller);
inci-utils/model/wimax-bs-installer.cc:TypeId WimaxBsInstaller::GetTypeId (void)
inci-utils/model/wimax-bs-installer.cc:  static TypeId tid = TypeId ("ns3::WimaxBsInstaller")
inci-utils/model/wimax-bs-installer.cc:    .AddConstructor<WimaxBsInstaller>()
inci-utils/model/wimax-bs-installer.cc:WimaxBsInstaller::DoInstall (NodeContainer container)
inci-utils/model/wimax-bs-installer.cc:  NS_LOG_INFO ("*** WimaxBsInstaller ***");
inci-utils/model/wimax-bs-installer.cc:  NetDeviceContainer devices = m_wimax.Install (container, WimaxHelper::DEVICE_TYPE_BASE_STATION, WimaxHelper::SIMPLE_PHY_TYPE_OFDM, channel, WimaxHelper::SCHED_TYPE_SIMPLE, ns3::WIMAX_VERSION_ITETRIS); 
inci-utils/model/wimax-bs-installer.cc:  BsCommandManagerContainer mgnrCont = m_commandMgnr.InstallBsCommandManagers (devices, 30.0);
inci-utils/model/wimax-bs-installer.cc:	  facilitiesHelper.Install (*i);
inci-utils/model/wimax-bs-installer.cc:WimaxBsInstaller::DoSetWimaxParameters (NetDeviceContainer devices)
inci-utils/model/wimax-bs-installer.cc:WimaxBsInstaller::DoProcessApplicationInstall (std::string appName)
inci-utils/model/wave-vehicle-installer.h:class WaveVehicleInstaller : public WaveInstaller
inci-utils/model/wave-vehicle-installer.h:    void DoInstall (NodeContainer container, NetDeviceContainer cchDevices, NetDeviceContainer schDevices);
inci-utils/model/itetris-network-transport-installer.h: * @class ItetrisNetworkTransportInstaller
inci-utils/model/itetris-network-transport-installer.h:class ItetrisNetworkTransportInstaller : public CommModuleInstaller
inci-utils/model/itetris-network-transport-installer.h:    ItetrisNetworkTransportInstaller();
inci-utils/model/itetris-network-transport-installer.h:    void Install (NodeContainer container); 
inci-utils/model/wave-rsu-installer.h:class WaveRsuInstaller : public WaveInstaller
inci-utils/model/wave-rsu-installer.h:    void DoInstall (NodeContainer container, NetDeviceContainer cchDevices, NetDeviceContainer schDevices);
inci-utils/helper/Lte-App-helper.cc~:LTEAppHelper::Install (NodeContainer c) const
inci-utils/helper/Lte-App-helper.cc~:      apps.Add (InstallPriv (*i));
inci-utils/helper/Lte-App-helper.cc~:LTEAppHelper::InstallPriv (Ptr<Node> node) const
inci-utils/helper/Lte-App-helper.cc~:LTEAppHelper::Install (Ptr<Node> node) const
inci-utils/helper/Lte-App-helper.cc~:  return ApplicationContainer (InstallPriv (node));
inci-utils/helper/Lte-App-helper.cc~:LTEAppHelper::Install (std::string nodeName) const
inci-utils/helper/Lte-App-helper.cc~:  return ApplicationContainer (InstallPriv (node));
inci-utils/helper/Lte-App-helper.cc~:LTEAppHelper::Install (NodeContainer c) const
inci-utils/helper/Lte-App-helper.cc~:      apps.Add (InstallPriv (*i));
inci-utils/helper/Lte-App-helper.cc~:LTEAppHelper::InstallPriv (Ptr<Node> node) const
inci-utils/helper/dvbh-helper.cc:DvbhHelper::Install (const DvbhOfdmLayerHelper &ofdmHelper,NodeContainer c,std::string nodeType/*,Ptr<DVBHChannel> broadcastChannel*/) const
inci-utils/helper/Umts-App-helper.h:   * Install UMTS-App on each Node in the provided NodeContainer.
inci-utils/helper/Umts-App-helper.h: ApplicationContainer Install (NodeContainer nodes) const;
inci-utils/helper/Umts-App-helper.h:   * Install UMTS-App on the provided Node.  The Node is specified
inci-utils/helper/Umts-App-helper.h: ApplicationContainer Install (Ptr<Node> node) const;
inci-utils/helper/Umts-App-helper.h:   * Install UMTS-App on the provided Node.  The Node is specified
inci-utils/helper/Umts-App-helper.h:  ApplicationContainer Install (std::string nodeName) const;
inci-utils/helper/Umts-App-helper.h:  Ptr<Application> InstallPriv (Ptr<Node> node) const;
inci-utils/helper/Lte-App-helper.h:   * Install LTE-App on each Node in the provided NodeContainer.
inci-utils/helper/Lte-App-helper.h: ApplicationContainer Install (NodeContainer nodes) const;
inci-utils/helper/Lte-App-helper.h:   * Install LTE-App on the provided Node.  The Node is specified
inci-utils/helper/Lte-App-helper.h: ApplicationContainer Install (Ptr<Node> node) const;
inci-utils/helper/Lte-App-helper.h:   * Install LTE-App on the provided Node.  The Node is specified
inci-utils/helper/Lte-App-helper.h: ApplicationContainer Install (std::string nodeName) const;
inci-utils/helper/Lte-App-helper.h:  Ptr<Application> InstallPriv (Ptr<Node> node) const;
inci-utils/helper/dvbh-helper.h:  NetDeviceContainer Install (const DvbhOfdmLayerHelper &ofdmHelper,NodeContainer c,std::string nodeType/*,Ptr<DVBHChannel> broadcastChannel*/) const;
inci-utils/helper/umts-helper.h:  NetDeviceContainer Install (const UMTSPhyHelper &phyHelper,std::string nodeType,NodeContainer c) const;
inci-utils/helper/umts-helper.h:  NetDeviceContainer Install (const UMTSPhyHelper &phy, std::string nodeType, Ptr<Node> node) const;
inci-utils/helper/umts-helper.h:  NetDeviceContainer Install (const UMTSPhyHelper &phy,std::string nodeType, std::string nodeName) const;
inci-utils/helper/umts-helper.h:  NetDeviceContainer Install (NodeContainer c,std::string nodeType,Ptr<UMTSChannel> broadcastChannel) ;
inci-utils/helper/umts-helper.h:  Ptr<UMTSNetDevice>  NetDeviceInstall(NodeContainer c,Ptr<UMTSChannel> broadcastChannel,std::string nodeType);
inci-utils/helper/Umts-App-helper.cc:UMTSAppHelper::Install (Ptr<Node> node) const
inci-utils/helper/Umts-App-helper.cc:  return ApplicationContainer (InstallPriv (node));
inci-utils/helper/Umts-App-helper.cc:UMTSAppHelper::Install (std::string nodeName) const
inci-utils/helper/Umts-App-helper.cc:  return ApplicationContainer (InstallPriv (node));
inci-utils/helper/Umts-App-helper.cc:UMTSAppHelper::Install (NodeContainer c) const
inci-utils/helper/Umts-App-helper.cc:      apps.Add (InstallPriv (*i));
inci-utils/helper/Umts-App-helper.cc:UMTSAppHelper::InstallPriv (Ptr<Node> node) const
inci-utils/helper/umts-helper.cc:UMTSHelper::Install (const UMTSPhyHelper &phyHelper,std::string nodeType,NodeContainer c) const
inci-utils/helper/umts-helper.cc:UMTSHelper::Install (const UMTSPhyHelper &phy,std::string nodeType,Ptr<Node> node) const
inci-utils/helper/umts-helper.cc:  return Install (phy,nodeType, NodeContainer (node));
inci-utils/helper/umts-helper.cc:UMTSHelper::Install (const UMTSPhyHelper &phy,
inci-utils/helper/umts-helper.cc:  return Install (phy, nodeType, NodeContainer (node));
inci-utils/helper/umts-helper.cc:UMTSHelper::NetDeviceInstall (NodeContainer c,Ptr<UMTSChannel> broadcastChannel,std::string nodeType)
inci-utils/helper/wimax-command-manager-helper.cc:WimaxCommandManagerHelper::InstallBsCommandManagers (NetDeviceContainer bsDevices, double txPower)
inci-utils/helper/wimax-command-manager-helper.cc:      NS_LOG_INFO ( "[WimaxCommandManagerHelper::InstallBsCommandManagers] bsid=" << m_bsId );
inci-utils/helper/wimax-command-manager-helper.cc:      NS_LOG_INFO ( "[WimaxCommandManagerHelper::InstallBsCommandManagers]" );
inci-utils/helper/wimax-command-manager-helper.cc:WimaxCommandManagerHelper::InstallSsCommandManagers (NetDeviceContainer ssDevices)
inci-utils/helper/wimax-command-manager-helper.h:  BsCommandManagerContainer InstallBsCommandManagers (NetDeviceContainer bsDevices, double txPower);
inci-utils/helper/wimax-command-manager-helper.h:  SsCommandManagerContainer InstallSsCommandManagers (NetDeviceContainer ssDevices);
inci-utils/helper/Lte-App-helper.cc:LTEAppHelper::Install (NodeContainer c) const
inci-utils/helper/Lte-App-helper.cc:      apps.Add (InstallPriv (*i));
inci-utils/helper/Lte-App-helper.cc:LTEAppHelper::InstallPriv (Ptr<Node> node) const
inci-utils/helper/Lte-App-helper.cc:LTEAppHelper::Install (Ptr<Node> node) const
inci-utils/helper/Lte-App-helper.cc:  return ApplicationContainer (InstallPriv (node));
inci-utils/helper/Lte-App-helper.cc:LTEAppHelper::Install (std::string nodeName) const
inci-utils/helper/Lte-App-helper.cc:  return ApplicationContainer (InstallPriv (node));
inci-utils/helper/Lte-App-helper.cc:LTEAppHelper::Install (NodeContainer c) const
inci-utils/helper/Lte-App-helper.cc:      apps.Add (InstallPriv (*i));
inci-utils/helper/Lte-App-helper.cc:LTEAppHelper::InstallPriv (Ptr<Node> node) const
stats/doc/statistics.rst:    NetDeviceContainer nodeDevices = wifi.Install(nodes);
stats/doc/statistics.rst:    internet.Install(nodes);
stats/doc/statistics.rst:    mobility.Install(nodes);
stats/doc/statistics.rst:* Installing a traffic generator and a traffic sink.  The stock ``Applications`` could be used, but the example includes custom objects in ``src/test/test02-apps.(cc|h)``.  These have a simple behavior, generating a given number of packets spaced at a given interval.  As there is only one of each they are installed manually; for a larger set the ``ns3::ApplicationHelper`` class could be used.  The commented-out ``Config::Set`` line changes the destination of the packets, set to broadcast by default in this example.  Note that in general WiFi may have different performance for broadcast and unicast frames due to different rate control and MAC retransmission policies.
csma/examples/csma-ping.cc:  NetDeviceContainer devs = csma.Install (c);
csma/examples/csma-ping.cc:  ipStack.Install (c);
csma/examples/csma-ping.cc:  ApplicationContainer apps = onoff.Install (c.Get (0));
csma/examples/csma-ping.cc:  apps = sink.Install (c.Get (3));
csma/examples/csma-ping.cc:  apps = ping.Install (pingers);
csma/examples/csma-one-subnet.cc:  NetDeviceContainer devices = csma.Install (nodes);
csma/examples/csma-one-subnet.cc:  internet.Install (nodes);
csma/examples/csma-one-subnet.cc:  ApplicationContainer app = onoff.Install (nodes.Get (0));
csma/examples/csma-one-subnet.cc:  app = sink.Install (nodes.Get (1));
csma/examples/csma-one-subnet.cc:  app = onoff.Install (nodes.Get (3));
csma/examples/csma-one-subnet.cc:  app = sink.Install (nodes.Get (0));
csma/examples/csma-broadcast.cc:  NetDeviceContainer n0 = csma.Install (c0);
csma/examples/csma-broadcast.cc:  NetDeviceContainer n1 = csma.Install (c1);
csma/examples/csma-broadcast.cc:  internet.Install (c);
csma/examples/csma-broadcast.cc:  ApplicationContainer app = onoff.Install (c0.Get (0));
csma/examples/csma-broadcast.cc:  app = sink.Install (c0.Get (1));
csma/examples/csma-broadcast.cc:  app.Add (sink.Install (c1.Get (1)));
csma/examples/csma-raw-ip-socket.cc:  NetDeviceContainer devs = csma.Install (c);
csma/examples/csma-raw-ip-socket.cc:  ipStack.Install (c);
csma/examples/csma-raw-ip-socket.cc:  ApplicationContainer apps = onoff.Install (c.Get (0));
csma/examples/csma-raw-ip-socket.cc:  apps = sink.Install (c.Get (3));
csma/examples/csma-multicast.cc:  NetDeviceContainer nd0 = csma.Install (c0);  // First LAN
csma/examples/csma-multicast.cc:  NetDeviceContainer nd1 = csma.Install (c1);  // Second LAN
csma/examples/csma-multicast.cc:  internet.Install (c);
csma/examples/csma-multicast.cc:  ApplicationContainer srcC = onoff.Install (c0.Get (0));
csma/examples/csma-multicast.cc:  ApplicationContainer sinkC = sink.Install (c1.Get (2)); // Node n4 
csma/examples/csma-packet-socket.cc:  packetSocket.Install (nodes);
csma/examples/csma-packet-socket.cc:  NetDeviceContainer devs = csma.Install (nodes, channel);
csma/examples/csma-packet-socket.cc:  ApplicationContainer apps = onoff.Install (nodes.Get (0));
csma/examples/csma-packet-socket.cc:  apps = onoff.Install (nodes.Get (3));
csma/examples/csma-packet-socket.cc:  // Install packet sink on node 0 to receive packets from node 1
csma/examples/csma-packet-socket.cc:  apps = sink.Install (nodes.Get (0));
csma/helper/csma-helper.h:   * CsmaNetDevice created through CsmaHelper::Install.
csma/helper/csma-helper.h:   * by CsmaHelper::Install
csma/helper/csma-helper.h:   * by CsmaHelper::Install
csma/helper/csma-helper.h:  NetDeviceContainer Install (Ptr<Node> node) const;
csma/helper/csma-helper.h:  NetDeviceContainer Install (std::string name) const;
csma/helper/csma-helper.h:  NetDeviceContainer Install (Ptr<Node> node, Ptr<CsmaChannel> channel) const;
csma/helper/csma-helper.h:  NetDeviceContainer Install (Ptr<Node> node, std::string channelName) const;
csma/helper/csma-helper.h:  NetDeviceContainer Install (std::string nodeName, Ptr<CsmaChannel> channel) const;
csma/helper/csma-helper.h:  NetDeviceContainer Install (std::string nodeName, std::string channelName) const;
csma/helper/csma-helper.h:  NetDeviceContainer Install (const NodeContainer &c) const;
csma/helper/csma-helper.h:  NetDeviceContainer Install (const NodeContainer &c, Ptr<CsmaChannel> channel) const;
csma/helper/csma-helper.h:  NetDeviceContainer Install (const NodeContainer &c, std::string channelName) const;
csma/helper/csma-helper.h:  * have been assigned. The Install() method should have previously been
csma/helper/csma-helper.h:  Ptr<NetDevice> InstallPriv (Ptr<Node> node, Ptr<CsmaChannel> channel) const;
csma/helper/csma-helper.cc:CsmaHelper::Install (Ptr<Node> node) const
csma/helper/csma-helper.cc:  return Install (node, channel);
csma/helper/csma-helper.cc:CsmaHelper::Install (std::string nodeName) const
csma/helper/csma-helper.cc:  return Install (node);
csma/helper/csma-helper.cc:CsmaHelper::Install (Ptr<Node> node, Ptr<CsmaChannel> channel) const
csma/helper/csma-helper.cc:  return NetDeviceContainer (InstallPriv (node, channel));
csma/helper/csma-helper.cc:CsmaHelper::Install (Ptr<Node> node, std::string channelName) const
csma/helper/csma-helper.cc:  return NetDeviceContainer (InstallPriv (node, channel));
csma/helper/csma-helper.cc:CsmaHelper::Install (std::string nodeName, Ptr<CsmaChannel> channel) const
csma/helper/csma-helper.cc:  return NetDeviceContainer (InstallPriv (node, channel));
csma/helper/csma-helper.cc:CsmaHelper::Install (std::string nodeName, std::string channelName) const
csma/helper/csma-helper.cc:  return NetDeviceContainer (InstallPriv (node, channel));
csma/helper/csma-helper.cc:CsmaHelper::Install (const NodeContainer &c) const
csma/helper/csma-helper.cc:  return Install (c, channel);
csma/helper/csma-helper.cc:CsmaHelper::Install (const NodeContainer &c, Ptr<CsmaChannel> channel) const
csma/helper/csma-helper.cc:      devs.Add (InstallPriv (*i, channel));
csma/helper/csma-helper.cc:CsmaHelper::Install (const NodeContainer &c, std::string channelName) const
csma/helper/csma-helper.cc:  return Install (c, channel);
csma/helper/csma-helper.cc:CsmaHelper::InstallPriv (Ptr<Node> node, Ptr<CsmaChannel> channel) const
csma/bindings/modulegen__gcc_ILP32.py:    ## csma-helper.h (module 'csma'): ns3::NetDeviceContainer ns3::CsmaHelper::Install(ns3::Ptr<ns3::Node> node) const [member function]
csma/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
csma/bindings/modulegen__gcc_ILP32.py:    ## csma-helper.h (module 'csma'): ns3::NetDeviceContainer ns3::CsmaHelper::Install(std::string name) const [member function]
csma/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
csma/bindings/modulegen__gcc_ILP32.py:    ## csma-helper.h (module 'csma'): ns3::NetDeviceContainer ns3::CsmaHelper::Install(ns3::Ptr<ns3::Node> node, ns3::Ptr<ns3::CsmaChannel> channel) const [member function]
csma/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
csma/bindings/modulegen__gcc_ILP32.py:    ## csma-helper.h (module 'csma'): ns3::NetDeviceContainer ns3::CsmaHelper::Install(ns3::Ptr<ns3::Node> node, std::string channelName) const [member function]
csma/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
csma/bindings/modulegen__gcc_ILP32.py:    ## csma-helper.h (module 'csma'): ns3::NetDeviceContainer ns3::CsmaHelper::Install(std::string nodeName, ns3::Ptr<ns3::CsmaChannel> channel) const [member function]
csma/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
csma/bindings/modulegen__gcc_ILP32.py:    ## csma-helper.h (module 'csma'): ns3::NetDeviceContainer ns3::CsmaHelper::Install(std::string nodeName, std::string channelName) const [member function]
csma/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
csma/bindings/modulegen__gcc_ILP32.py:    ## csma-helper.h (module 'csma'): ns3::NetDeviceContainer ns3::CsmaHelper::Install(ns3::NodeContainer const & c) const [member function]
csma/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
csma/bindings/modulegen__gcc_ILP32.py:    ## csma-helper.h (module 'csma'): ns3::NetDeviceContainer ns3::CsmaHelper::Install(ns3::NodeContainer const & c, ns3::Ptr<ns3::CsmaChannel> channel) const [member function]
csma/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
csma/bindings/modulegen__gcc_ILP32.py:    ## csma-helper.h (module 'csma'): ns3::NetDeviceContainer ns3::CsmaHelper::Install(ns3::NodeContainer const & c, std::string channelName) const [member function]
csma/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
csma/bindings/modulegen__gcc_LP64.py:    ## csma-helper.h (module 'csma'): ns3::NetDeviceContainer ns3::CsmaHelper::Install(ns3::Ptr<ns3::Node> node) const [member function]
csma/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
csma/bindings/modulegen__gcc_LP64.py:    ## csma-helper.h (module 'csma'): ns3::NetDeviceContainer ns3::CsmaHelper::Install(std::string name) const [member function]
csma/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
csma/bindings/modulegen__gcc_LP64.py:    ## csma-helper.h (module 'csma'): ns3::NetDeviceContainer ns3::CsmaHelper::Install(ns3::Ptr<ns3::Node> node, ns3::Ptr<ns3::CsmaChannel> channel) const [member function]
csma/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
csma/bindings/modulegen__gcc_LP64.py:    ## csma-helper.h (module 'csma'): ns3::NetDeviceContainer ns3::CsmaHelper::Install(ns3::Ptr<ns3::Node> node, std::string channelName) const [member function]
csma/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
csma/bindings/modulegen__gcc_LP64.py:    ## csma-helper.h (module 'csma'): ns3::NetDeviceContainer ns3::CsmaHelper::Install(std::string nodeName, ns3::Ptr<ns3::CsmaChannel> channel) const [member function]
csma/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
csma/bindings/modulegen__gcc_LP64.py:    ## csma-helper.h (module 'csma'): ns3::NetDeviceContainer ns3::CsmaHelper::Install(std::string nodeName, std::string channelName) const [member function]
csma/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
csma/bindings/modulegen__gcc_LP64.py:    ## csma-helper.h (module 'csma'): ns3::NetDeviceContainer ns3::CsmaHelper::Install(ns3::NodeContainer const & c) const [member function]
csma/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
csma/bindings/modulegen__gcc_LP64.py:    ## csma-helper.h (module 'csma'): ns3::NetDeviceContainer ns3::CsmaHelper::Install(ns3::NodeContainer const & c, ns3::Ptr<ns3::CsmaChannel> channel) const [member function]
csma/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
csma/bindings/modulegen__gcc_LP64.py:    ## csma-helper.h (module 'csma'): ns3::NetDeviceContainer ns3::CsmaHelper::Install(ns3::NodeContainer const & c, std::string channelName) const [member function]
csma/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
csma/doc/csma.rst:  NetDeviceContainer csmaDevices = csma.Install (csmaNodes);
wimax/test/qos-test.cc:  ssDevs = wimax.Install (ssNodes,
wimax/test/qos-test.cc:  bsDevs = wimax.Install (bsNodes, WimaxHelper::DEVICE_TYPE_BASE_STATION, WimaxHelper::SIMPLE_PHY_TYPE_OFDM, scheduler);
wimax/test/qos-test.cc:  stack.Install (bsNodes);
wimax/test/qos-test.cc:  stack.Install (ssNodes);
wimax/test/qos-test.cc:  serverApps = udpServer.Install (ssNodes.Get (0));
wimax/test/qos-test.cc:  clientApps = udpClient.Install (ssNodes.Get (1));
wimax/test/qos-test.cc:  ssDevs = wimax.Install (ssNodes,
wimax/test/qos-test.cc:  bsDevs = wimax.Install (bsNodes,
wimax/test/qos-test.cc:  stack.Install (bsNodes);
wimax/test/qos-test.cc:  stack.Install (ssNodes);
wimax/test/qos-test.cc:  serverApps = udpServer.Install (ssNodes.Get (0));
wimax/test/qos-test.cc:  clientApps = udpClient.Install (ssNodes.Get (1));
wimax/test/wimax-service-flow-test.cc:  ssDevs = wimax.Install (ssNodes,
wimax/test/wimax-service-flow-test.cc:  bsDevs = wimax.Install (bsNodes, WimaxHelper::DEVICE_TYPE_BASE_STATION, WimaxHelper::SIMPLE_PHY_TYPE_OFDM, scheduler);
wimax/test/wimax-service-flow-test.cc:  stack.Install (bsNodes);
wimax/test/wimax-service-flow-test.cc:  stack.Install (ssNodes);
wimax/test/phy-test.cc: * Install a SIMPLE OFDM PHY layer on all nodes and check that all SSs
wimax/test/phy-test.cc:  ssDevs = wimax.Install (ssNodes, WimaxHelper::DEVICE_TYPE_SUBSCRIBER_STATION,
wimax/test/phy-test.cc:  bsDevs = wimax.Install (bsNodes, WimaxHelper::DEVICE_TYPE_BASE_STATION,
wimax/test/ss-mac-test.cc:  ssDevs = wimax.Install (ssNodes,
wimax/test/ss-mac-test.cc:  bsDevs = wimax.Install (bsNodes,
wimax/test/ss-mac-test.cc:  ssDevs = wimax.Install (ssNodes,
wimax/test/ss-mac-test.cc:  bsDevs = wimax.Install (bsNodes,
wimax/examples/wimax-multicast.cc:  ssDevs = wimax.Install (ssNodes,
wimax/examples/wimax-multicast.cc:  Ptr<WimaxNetDevice> dev = wimax.Install (bsNodes.Get (0),
wimax/examples/wimax-multicast.cc:  NetDeviceContainer LAN_ASN_BS_Devs = csmaASN_BS.Install (LAN_ASN_BS);
wimax/examples/wimax-multicast.cc:  NetDeviceContainer LAN_ASN_STREAMER_Devs = csmaStreamer_ASN.Install (LAN_ASN_STREAMER);
wimax/examples/wimax-multicast.cc:  mobility.Install (bsNodes);
wimax/examples/wimax-multicast.cc:  stack.Install (bsNodes);
wimax/examples/wimax-multicast.cc:  mobility.Install (ssNodes);
wimax/examples/wimax-multicast.cc:  stack.Install (ssNodes);
wimax/examples/wimax-multicast.cc:  stack.Install (Streamer_Node);
wimax/examples/wimax-multicast.cc:  stack.Install (ASNGW_Node);
wimax/examples/wimax-multicast.cc:      serverApps[i] = udpServer[i].Install (ssNodes.Get (i));
wimax/examples/wimax-multicast.cc:  clientApps = udpClient.Install (Streamer_Node.Get (0));
wimax/examples/wimax-ipv4.cc:  ssDevs = wimax.Install (ssNodes,
wimax/examples/wimax-ipv4.cc:  bsDevs = wimax.Install (bsNodes, WimaxHelper::DEVICE_TYPE_BASE_STATION, WimaxHelper::SIMPLE_PHY_TYPE_OFDM, scheduler);
wimax/examples/wimax-ipv4.cc:  mobility.Install (bsNodes);
wimax/examples/wimax-ipv4.cc:  mobility.Install (ssNodes);
wimax/examples/wimax-ipv4.cc:  stack.Install (bsNodes);
wimax/examples/wimax-ipv4.cc:  stack.Install (ssNodes);
wimax/examples/wimax-ipv4.cc:      serverApps[i] = udpServer[i].Install (ssNodes.Get (i));
wimax/examples/wimax-ipv4.cc:      clientApps[i] = udpClient[i].Install (ssNodes.Get (i + (nbSS / 2)));
wimax/examples/wimax-simple.cc:  ssDevs = wimax.Install (ssNodes,
wimax/examples/wimax-simple.cc:  bsDevs = wimax.Install (bsNodes, WimaxHelper::DEVICE_TYPE_BASE_STATION, WimaxHelper::SIMPLE_PHY_TYPE_OFDM, scheduler);
wimax/examples/wimax-simple.cc:  stack.Install (bsNodes);
wimax/examples/wimax-simple.cc:  stack.Install (ssNodes);
wimax/examples/wimax-simple.cc:  serverApps = udpServer.Install (ssNodes.Get (0));
wimax/examples/wimax-simple.cc:  clientApps = udpClient.Install (ssNodes.Get (1));
wimax/helper/wimax-helper.h:  NetDeviceContainer Install (NodeContainer c, NetDeviceType type, PhyType phyType, SchedulerType schedulerType);
wimax/helper/wimax-helper.h:  NetDeviceContainer Install (NodeContainer c,
wimax/helper/wimax-helper.h:  NetDeviceContainer Install (NodeContainer c,
wimax/helper/wimax-helper.h:    NetDeviceContainer Install (NodeContainer c,
wimax/helper/wimax-helper.h:  Ptr<WimaxNetDevice> Install (Ptr<Node> node,
wimax/helper/wimax-helper.h:    Ptr<WimaxNetDevice> Install (Ptr<Node> node,
wimax/helper/wimax-helper.h:  * have been assigned. The Install() method should have previously been
wimax/helper/wimax-helper.cc:NetDeviceContainer WimaxHelper::Install (NodeContainer c,
wimax/helper/wimax-helper.cc:NetDeviceContainer WimaxHelper::Install (NodeContainer c,
wimax/helper/wimax-helper.cc:NetDeviceContainer WimaxHelper::Install (NodeContainer c,
wimax/helper/wimax-helper.cc:WimaxHelper::Install (NodeContainer c, NetDeviceType deviceType,
wimax/helper/wimax-helper.cc:Ptr<WimaxNetDevice> WimaxHelper::Install (Ptr<Node> node,
wimax/helper/wimax-helper.cc:WimaxHelper::Install (Ptr<Node> node, NetDeviceType deviceType,
wimax/bindings/modulegen__gcc_ILP32.py:    ## wimax-helper.h (module 'wimax'): ns3::NetDeviceContainer ns3::WimaxHelper::Install(ns3::NodeContainer c, ns3::WimaxHelper::NetDeviceType type, ns3::WimaxHelper::PhyType phyType, ns3::WimaxHelper::SchedulerType schedulerType) [member function]
wimax/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
wimax/bindings/modulegen__gcc_ILP32.py:    ## wimax-helper.h (module 'wimax'): ns3::NetDeviceContainer ns3::WimaxHelper::Install(ns3::NodeContainer c, ns3::WimaxHelper::NetDeviceType deviceType, ns3::WimaxHelper::PhyType phyType, ns3::Ptr<ns3::WimaxChannel> channel, ns3::WimaxHelper::SchedulerType schedulerType) [member function]
wimax/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
wimax/bindings/modulegen__gcc_ILP32.py:    ## wimax-helper.h (module 'wimax'): ns3::NetDeviceContainer ns3::WimaxHelper::Install(ns3::NodeContainer c, ns3::WimaxHelper::NetDeviceType deviceType, ns3::WimaxHelper::PhyType phyType, ns3::WimaxHelper::SchedulerType schedulerType, double frameDuration) [member function]
wimax/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
wimax/bindings/modulegen__gcc_ILP32.py:    ## wimax-helper.h (module 'wimax'): ns3::Ptr<ns3::WimaxNetDevice> ns3::WimaxHelper::Install(ns3::Ptr<ns3::Node> node, ns3::WimaxHelper::NetDeviceType deviceType, ns3::WimaxHelper::PhyType phyType, ns3::Ptr<ns3::WimaxChannel> channel, ns3::WimaxHelper::SchedulerType schedulerType) [member function]
wimax/bindings/modulegen__gcc_ILP32.py:    cls.add_method('Install', 
wimax/bindings/modulegen__gcc_LP64.py:    ## wimax-helper.h (module 'wimax'): ns3::NetDeviceContainer ns3::WimaxHelper::Install(ns3::NodeContainer c, ns3::WimaxHelper::NetDeviceType type, ns3::WimaxHelper::PhyType phyType, ns3::WimaxHelper::SchedulerType schedulerType) [member function]
wimax/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
wimax/bindings/modulegen__gcc_LP64.py:    ## wimax-helper.h (module 'wimax'): ns3::NetDeviceContainer ns3::WimaxHelper::Install(ns3::NodeContainer c, ns3::WimaxHelper::NetDeviceType deviceType, ns3::WimaxHelper::PhyType phyType, ns3::Ptr<ns3::WimaxChannel> channel, ns3::WimaxHelper::SchedulerType schedulerType) [member function]
wimax/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
wimax/bindings/modulegen__gcc_LP64.py:    ## wimax-helper.h (module 'wimax'): ns3::NetDeviceContainer ns3::WimaxHelper::Install(ns3::NodeContainer c, ns3::WimaxHelper::NetDeviceType deviceType, ns3::WimaxHelper::PhyType phyType, ns3::WimaxHelper::SchedulerType schedulerType, double frameDuration) [member function]
wimax/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
wimax/bindings/modulegen__gcc_LP64.py:    ## wimax-helper.h (module 'wimax'): ns3::Ptr<ns3::WimaxNetDevice> ns3::WimaxHelper::Install(ns3::Ptr<ns3::Node> node, ns3::WimaxHelper::NetDeviceType deviceType, ns3::WimaxHelper::PhyType phyType, ns3::Ptr<ns3::WimaxChannel> channel, ns3::WimaxHelper::SchedulerType schedulerType) [member function]
wimax/bindings/modulegen__gcc_LP64.py:    cls.add_method('Install', 
wimax/doc/wimax.rst:  ssDevs = wimax.Install (ssNodes,
wimax/doc/wimax.rst:  bsDevs = wimax.Install (bsNodes, WimaxHelper::DEVICE_TYPE_BASE_STATION, WimaxHelper::SIMPLE_PHY_TYPE_OFDM, scheduler);
wimax/doc/wimax.rst:created. The helper method ``Install`` allows the user to specify the scheduler
wimax/doc/wimax.rst:Different variants of ``Install`` are available; for instance, the example
wimax/doc/wimax.rst:  ssDevs = wimax.Install (ssNodes,
wimax/doc/wimax.rst:  Ptr<WimaxNetDevice> dev = wimax.Install (bsNodes.Get (0),
